<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你别睡这么晚！</title>
  
  <subtitle>我有一只小兔兔🐇</subtitle>
  <link href="https://dont-sleep-so-late.github.io/atom.xml" rel="self"/>
  
  <link href="https://dont-sleep-so-late.github.io/"/>
  <updated>2024-04-07T12:26:41.469Z</updated>
  <id>https://dont-sleep-so-late.github.io/</id>
  
  <author>
    <name>你别睡这么晚</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端AI语音方面的实现</title>
    <link href="https://dont-sleep-so-late.github.io/2024/04/02/js/%E8%AF%AD%E9%9F%B3%E6%96%87%E5%AD%97%E4%BA%92%E8%BD%AC/"/>
    <id>https://dont-sleep-so-late.github.io/2024/04/02/js/%E8%AF%AD%E9%9F%B3%E6%96%87%E5%AD%97%E4%BA%92%E8%BD%AC/</id>
    <published>2024-04-02T14:31:15.000Z</published>
    <updated>2024-04-07T12:26:41.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端AI语音方面的实现"><a href="#前端AI语音方面的实现" class="headerlink" title="前端AI语音方面的实现"></a>前端AI语音方面的实现</h1><h2 id="webkitSpeechRecognition（语音识别）"><a href="#webkitSpeechRecognition（语音识别）" class="headerlink" title="webkitSpeechRecognition（语音识别）"></a>webkitSpeechRecognition（语音识别）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个webkitSpeechRecognition实例</span></span><br><span class="line"><span class="keyword">let</span> newRecognition = <span class="keyword">new</span> <span class="title function_">webkitSpeechRecognition</span>();</span><br><span class="line"><span class="comment">// 设置识别到声音就关闭还是一直识别</span></span><br><span class="line">newRecognition.<span class="property">continuous</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 开启录音</span></span><br><span class="line">newRecognition.<span class="title function_">start</span>();</span><br><span class="line"><span class="comment">// 关闭录音</span></span><br><span class="line">newRecognition.<span class="title function_">stop</span>();</span><br><span class="line"><span class="comment">// 识别到结果即触发，所以讲话过程多次停顿的情况下会触发多次</span></span><br><span class="line">newRecognition.<span class="property">onresult</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基本以上就已经达到了语音转文字的功能，下面是一些其他事件</span></span><br><span class="line"><span class="comment">//只要开始讲话了，就会触发onsoundstart和onspeechstart事件</span></span><br><span class="line">newRecognition.<span class="property">onsoundstart</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始收听了&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">newRecognition.<span class="property">onspeechstart</span> = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始讲话了&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// onspeechend事件应该是监测到执行了stop方法时触发的。而如果一段时间没有录入信息，则会自动执行stop方法停止录音，同样也会触发onspeechend事件</span></span><br><span class="line">newRecognition.<span class="property">onspeechend</span> = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;讲话完毕&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// onerror很明显是有异常时会触发该事件，测试发现当长时间没有录入导致自动关闭录音的时候就会触发该事件</span></span><br><span class="line">newRecognition.<span class="property">onerror</span> = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生异常&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue3demo </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;语音转文字内容区&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;area&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;说点什么吧...&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">&quot;areaRef&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;textInp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;speek&quot;</span>&gt;</span>🎤<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;addText&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-show</span>=<span class="string">&quot;list.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, toRefs, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    setup () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> areaRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">textInp</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isGoing</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> recognition = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title function_">webkitSpeechRecognition</span>();</span></span><br><span class="line"><span class="language-javascript">        recognition.<span class="property">continuous</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        recognition.<span class="property">interimResults</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        recognition.<span class="property">lang</span> = <span class="string">&#x27;zh-CN&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        recognition.<span class="property">onresult</span>=<span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt;= event.<span class="property">resultIndex</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                result += event.<span class="property">results</span>[i][<span class="number">0</span>].<span class="property">transcript</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            state.<span class="property">textInp</span> = result</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/** 开始 / 结束 录音 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">speek</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(state.<span class="property">isGoing</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                recognition.<span class="title function_">stop</span>();</span></span><br><span class="line"><span class="language-javascript">                state.<span class="property">isGoing</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                recognition.<span class="title function_">start</span>();</span></span><br><span class="line"><span class="language-javascript">                state.<span class="property">isGoing</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/** 发布 */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">addText</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            state.<span class="property">list</span>.<span class="title function_">push</span>(state.<span class="property">textInp</span>);</span></span><br><span class="line"><span class="language-javascript">            state.<span class="property">textInp</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">toRefs</span>(state),</span></span><br><span class="line"><span class="language-javascript">            areaRef,</span></span><br><span class="line"><span class="language-javascript">            addText,</span></span><br><span class="line"><span class="language-javascript">            speek</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpeechSynthesisUtterance（语音合成）"><a href="#SpeechSynthesisUtterance（语音合成）" class="headerlink" title="SpeechSynthesisUtterance（语音合成）"></a>SpeechSynthesisUtterance（语音合成）</h2><p>基础测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ssu = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">SpeechSynthesisUtterance</span>(<span class="string">&#x27;Hi，girl！&#x27;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">speechSynthesis</span>.<span class="title function_">speak</span>(ssu);</span><br></pre></td></tr></table></figure><p><strong>SpeechSynthesisUtterance对象提供了一些其他属性供设置：</strong></p><ul><li><p>lang：使用的语言，字符串（比如：“zh-cn”）</p></li><li><p>volume：音量，值在0-1之间（默认是1）</p></li><li><p>rate：语速的倍数，值在0.1-10之间（默认1倍）</p></li><li><p>pitch：音高，值在0-2之间，（默认是1）</p></li><li><p>voiceURI：指定希望使用的声音，字符串</p></li><li><p>onstart：语音开始合成时触发</p></li><li><p>onpause：语音暂停时触发</p></li><li><p>onresume：语音合成重新开始时触发</p></li><li><p>onend：语音结束时触发</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ssu = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">SpeechSynthesisUtterance</span>();</span><br><span class="line">ssu.<span class="property">text</span> = <span class="string">&#x27;Hi，girl！&#x27;</span>;</span><br><span class="line">ssu.<span class="property">volume</span> = <span class="number">0.5</span>;</span><br><span class="line">ssu.<span class="property">rate</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>speechSynthesis对象</strong><br>创建完SpeechSynthesisUtterance对象之后，把这个对象传递给speechSynthesis对象的speak方法中。</p><ul><li><p>stop()：停止合成</p></li><li><p>pause()：暂停合成</p></li><li><p>resume()：重新开始合成</p></li><li><p>getVoices()：返回浏览器支持的语音包数组</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">speechSynthesis</span>.<span class="title function_">pause</span>(); <span class="comment">// 点击暂停</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">speechSynthesis</span>.<span class="title function_">getVoices</span>()); <span class="comment">//我的chrome浏览器下竟然是空数组。。wtf</span></span><br></pre></td></tr></table></figure><p>demo:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>语音转文字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">shape</span>=<span class="string">&quot;&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;area&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请说点什么...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;speek&quot;</span>&gt;</span>麦克风<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addBtn&quot;</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面加载完毕&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#area&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> speek = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#speek&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> addBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#addBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> recognition = <span class="keyword">new</span> <span class="title function_">webkitSpeechRecognition</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> isSpeek = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            recognition.<span class="property">continuous</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            recognition.<span class="property">interimResults</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            recognition.<span class="property">lang</span> = <span class="string">&#x27;zh-CN&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            recognition.<span class="property">onresult</span>=<span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> i = event.<span class="property">resultIndex</span>;i &lt;= event.<span class="property">resultIndex</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (event.<span class="property">results</span>[i].<span class="property">isFinal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        result += event.<span class="property">results</span>[i][<span class="number">0</span>].<span class="property">transcript</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                area.<span class="property">value</span> = result</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            speek.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(isSpeek) &#123;</span></span><br><span class="line"><span class="language-javascript">                    recognition.<span class="title function_">stop</span>();</span></span><br><span class="line"><span class="language-javascript">                    isSpeek = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                recognition.<span class="title function_">start</span>();</span></span><br><span class="line"><span class="language-javascript">                isSpeek = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            addBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">textContent</span> = area.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                text.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">                area.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="edge-tts语音合成-web前端实现"><a href="#edge-tts语音合成-web前端实现" class="headerlink" title="edge-tts语音合成 web前端实现"></a>edge-tts语音合成 web前端实现</h1><h2 id="1、使用方法："><a href="#1、使用方法：" class="headerlink" title="1、使用方法："></a>1、使用方法：</h2><p>在需要的地方导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> voiceList = [&#123;<span class="string">&quot;ShortName&quot;</span>:<span class="string">&quot;zh-CN-XiaoxiaoNeural&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;Xiaoxiao&quot;</span>&#125;,&#123;<span class="string">&quot;ShortName&quot;</span>:<span class="string">&quot;zh-CN-XiaoyiNeural&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;Xiaoyi&quot;</span>&#125;,&#123;<span class="string">&quot;ShortName&quot;</span>:<span class="string">&quot;zh-CN-YunjianNeural&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;Yunjian&quot;</span>&#125;,&#123;<span class="string">&quot;ShortName&quot;</span>:<span class="string">&quot;zh-CN-YunxiNeural&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;Yunxi&quot;</span>&#125;,&#123;<span class="string">&quot;ShortName&quot;</span>:<span class="string">&quot;zh-CN-YunxiaNeural&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;Yunxia&quot;</span>&#125;,&#123;<span class="string">&quot;ShortName&quot;</span>:<span class="string">&quot;zh-CN-YunyangNeural&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;Yunyang&quot;</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> ws = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> blobs = [];</span><br><span class="line"><span class="keyword">let</span> audioElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;audio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendReq</span>(<span class="params">ssml, format,connectionId</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> configData = &#123;</span><br><span class="line">    <span class="attr">context</span>: &#123;</span><br><span class="line">      <span class="attr">synthesis</span>: &#123;</span><br><span class="line">        <span class="attr">audio</span>: &#123;</span><br><span class="line">          <span class="attr">metadataoptions</span>: &#123;</span><br><span class="line">            <span class="attr">sentenceBoundaryEnabled</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">            <span class="attr">wordBoundaryEnabled</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">outputFormat</span>: format,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> configMessage =</span><br><span class="line">    <span class="string">`X-Timestamp:<span class="subst">$&#123;<span class="built_in">Date</span>()&#125;</span>\r\n`</span> +</span><br><span class="line">    <span class="string">&quot;Content-Type:application/json; charset=utf-8\r\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;Path:speech.config\r\n\r\n&quot;</span> +</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(configData);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`配置请求发送：<span class="subst">$&#123;configMessage&#125;</span>\n`</span>);</span><br><span class="line">  <span class="keyword">let</span> ssmlMessage =</span><br><span class="line">    <span class="string">`X-Timestamp:<span class="subst">$&#123;<span class="built_in">Date</span>()&#125;</span>\r\n`</span> +</span><br><span class="line">    <span class="string">`X-RequestId:<span class="subst">$&#123;connectionId&#125;</span>\r\n`</span> +</span><br><span class="line">    <span class="string">`Content-Type:application/ssml+xml\r\n`</span> +</span><br><span class="line">    <span class="string">`Path:ssml\r\n\r\n`</span> +</span><br><span class="line">    ssml;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SSML消息发送：<span class="subst">$&#123;ssmlMessage&#125;</span>\n`</span>);</span><br><span class="line">  ws.<span class="title function_">send</span>(configMessage, <span class="function">(<span class="params">configError</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (configError) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`配置请求发送失败：<span class="subst">$&#123;connectionId&#125;</span>\n`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  ws.<span class="title function_">send</span>(ssmlMessage, <span class="function">(<span class="params">ssmlError</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ssmlError) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SSML消息发送失败：<span class="subst">$&#123;connectionId&#125;</span>\n`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateRandomHex</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个长度为 16 字节的 Uint8Array</span></span><br><span class="line">  <span class="keyword">const</span> randomBytes = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="number">16</span>);</span><br><span class="line">  <span class="comment">// 填充数组的每个元素为一个随机的 0-255 之间的整数</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">crypto</span>.<span class="title function_">getRandomValues</span>(randomBytes);</span><br><span class="line">  <span class="comment">// 将字节数组转换为十六进制字符串，并将字母转换为小写</span></span><br><span class="line">  <span class="keyword">const</span> hexString = <span class="title class_">Array</span>.<span class="title function_">from</span>(randomBytes)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">byte</span> =&gt;</span> byte.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">return</span> hexString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">ssml, format,autpPlay</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connectionId = <span class="title function_">generateRandomHex</span>();</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4&amp;ConnectionId=<span class="subst">$&#123;connectionId&#125;</span>`</span>;</span><br><span class="line">    ws = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">WebSocket</span>(url);</span><br><span class="line">    ws.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wsOpen&quot;</span>);</span><br><span class="line">      <span class="title function_">sendReq</span>(ssml, format,connectionId)</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.<span class="property">onclose</span> = <span class="function">(<span class="params">code, reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 服务器会自动断开空闲超过30秒的连接</span></span><br><span class="line">      ws = <span class="literal">null</span>;</span><br><span class="line">      blobs = [];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`连接已关闭： <span class="subst">$&#123;reason&#125;</span> <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.<span class="property">onmessage</span> = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(message.<span class="property">data</span> <span class="keyword">instanceof</span> <span class="title class_">Blob</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = message.<span class="property">data</span>.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="title function_">includes</span>(<span class="string">&quot;Path:turn.start&quot;</span>)) &#123;</span><br><span class="line">          <span class="comment">// 开始传输</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="title function_">includes</span>(<span class="string">&quot;Path:turn.end&quot;</span>)) &#123;</span><br><span class="line">          <span class="comment">// 结束传输</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;blobs.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> contentIndex = <span class="number">130</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == blobs.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">              contentIndex = <span class="number">105</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            blobs[i] = blobs[i].<span class="title function_">slice</span>(contentIndex)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Blob</span>(blobs);</span><br><span class="line">          <span class="keyword">let</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(result);</span><br><span class="line">          <span class="keyword">if</span>(autpPlay)&#123;</span><br><span class="line">            audioElement.<span class="title function_">pause</span>();</span><br><span class="line">            audioElement.<span class="property">src</span> = url;</span><br><span class="line">            audioElement.<span class="title function_">play</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          blobs = [];</span><br><span class="line">          ws.<span class="title function_">close</span>();</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`传输完成：<span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">          <span class="title function_">resolve</span>(url);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.<span class="property">data</span> <span class="keyword">instanceof</span> <span class="title class_">Blob</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到信号了b......&quot;</span>,message.<span class="property">data</span>)</span><br><span class="line">        blobs.<span class="title function_">push</span>(message.<span class="property">data</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.<span class="property">onerror</span> = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`连接失败： <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params">text,voice=<span class="number">1</span>,rate = <span class="number">0</span>,pitch=<span class="number">0</span>,autpPlay=<span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(text)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable constant_">SSML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;text&quot;</span>,text);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;voice&quot;</span>,voiceList[voice].<span class="property">ShortName</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rate&quot;</span>,rate);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pitch&quot;</span>,pitch);</span><br><span class="line">    <span class="variable constant_">SSML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;speak xmlns=&quot;http://www.w3.org/2001/10/synthesis&quot; xmlns:mstts=&quot;http://www.w3.org/2001/mstts&quot; xmlns:emo=&quot;http://www.w3.org/2009/10/emotionml&quot; version=&quot;1.0&quot; xml:lang=&quot;en-US&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;voice name=&quot;<span class="subst">$&#123;voiceList[voice].ShortName&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;prosody rate=&quot;<span class="subst">$&#123;rate&#125;</span>%&quot; pitch=&quot;<span class="subst">$&#123;pitch&#125;</span>%&quot;&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;text&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/prosody&gt;</span></span><br><span class="line"><span class="string">        &lt;/voice&gt;</span></span><br><span class="line"><span class="string">    &lt;/speak&gt;`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">SSML</span>);</span><br><span class="line">    <span class="keyword">let</span> format = <span class="string">&quot;audio-24khz-48kbitrate-mono-mp3&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">connect</span>(<span class="variable constant_">SSML</span>, format,autpPlay).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received result:&#x27;</span>, result);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、方法说明"><a href="#2、方法说明" class="headerlink" title="2、方法说明"></a>2、方法说明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start方法：传递文本及语音配置信息</span><br><span class="line">调用示例</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">startSpeak</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">await</span> <span class="title function_">start</span>(<span class="string">&#x27;欢迎来到中国联通智慧大脑展厅,接下来为各位来宾介绍政企大屏；&#x27;</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">返回示例：</span><br><span class="line"><span class="attr">blob</span>:<span class="attr">http</span>:<span class="comment">//localhost:8080/f0cf900d-81ed-4e0f-bade-058726453781</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>入参字段</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>需要转为语音的文字(必传)</td></tr><tr><td>voice</td><td>转换为中文的人物(音色，传<strong>第三部分角色说明</strong>ShortName对应对象的key值)</td></tr><tr><td>rate</td><td>语速，默认值为0</td></tr><tr><td>pitch</td><td>音调，默认值为0</td></tr><tr><td>autoPlay</td><td>是否自动播放，默认值true</td></tr></tbody></table><h2 id="3、角色说明"><a href="#3、角色说明" class="headerlink" title="3、角色说明"></a>3、角色说明</h2><p>voice：声音 【0-5】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ShortName</span>: 人物声音</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;ShortName&quot;</span>: <span class="string">&quot;zh-CN-XiaoxiaoNeural&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Xiaoxiao&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;ShortName&quot;</span>: <span class="string">&quot;zh-CN-XiaoyiNeural&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Xiaoyi&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;ShortName&quot;</span>: <span class="string">&quot;zh-CN-YunjianNeural&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Yunjian&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;ShortName&quot;</span>: <span class="string">&quot;zh-CN-YunxiNeural&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Yunxi&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;ShortName&quot;</span>: <span class="string">&quot;zh-CN-YunxiaNeural&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Yunxia&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;ShortName&quot;</span>: <span class="string">&quot;zh-CN-YunyangNeural&quot;</span>,</span><br><span class="line">        <span class="string">&quot;label&quot;</span>: <span class="string">&quot;Yunyang&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端AI语音方面的实现&quot;&gt;&lt;a href=&quot;#前端AI语音方面的实现&quot; class=&quot;headerlink&quot; title=&quot;前端AI语音方面的实现&quot;&gt;&lt;/a&gt;前端AI语音方面的实现&lt;/h1&gt;&lt;h2 id=&quot;webkitSpeechRecognition（语音识别）</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaSciprt" scheme="https://dont-sleep-so-late.github.io/tags/JavaSciprt/"/>
    
    <category term="AI语音" scheme="https://dont-sleep-so-late.github.io/tags/AI%E8%AF%AD%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>异步相关</title>
    <link href="https://dont-sleep-so-late.github.io/2024/04/02/%E5%85%AB%E8%82%A1%E6%96%87/%E5%BC%82%E6%AD%A5%E7%9B%B8%E5%85%B3/"/>
    <id>https://dont-sleep-so-late.github.io/2024/04/02/%E5%85%AB%E8%82%A1%E6%96%87/%E5%BC%82%E6%AD%A5%E7%9B%B8%E5%85%B3/</id>
    <published>2024-04-02T03:31:36.000Z</published>
    <updated>2024-04-03T03:48:46.815Z</updated>
    
    <content type="html"><![CDATA[<h4 id="3-1-promise和-async-await-区别"><a href="#3-1-promise和-async-await-区别" class="headerlink" title="3.1 promise和 async await 区别"></a>3.1 promise和 async await 区别</h4><p><strong>参考答案：</strong></p><ul><li><p><strong>概念</strong><br><strong>Promise</strong> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大，简单地说，Promise好比容器，里面存放着一些未来才会执行完毕（异步）的事件的结果，而这些结果一旦生成是无法改变的</p><p><strong>async await</strong>也是异步编程的一种解决方案，他遵循的是Generator 函数的语法糖，他拥有内置执行器，不需要额外的调用直接会自动执行并输出结果，它返回的是一个Promise对象。</p></li><li><h5 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h5><ol><li>Promise的出现解决了传统callback函数导致的“地域回调”问题，但它的语法导致了它向纵向发展行成了一个回调链，遇到复杂的业务场景，这样的语法显然也是不美观的。而async await代码看起来会简洁些，使得异步代码看起来像同步代码，await的本质是可以提供等同于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。</li><li>async await与Promise一样，是非阻塞的。</li><li>async await是基于Promise实现的，可以说是改良版的Promise，它不能用于普通的回调函数。</li></ol></li></ul><h4 id="3-2-defer和async区别"><a href="#3-2-defer和async区别" class="headerlink" title="3.2 defer和async区别"></a>3.2 defer和async区别</h4><p><strong>参考答案：</strong></p><p>区别主要在于一个执行时间,defer会在文档解析完之后执行,并且多个defer会按照顺序执行,而async则是在js加载好之后就会执行,并且多个async,哪个加载好就执行哪个</p><p><strong>解析：</strong></p><p>在没有defer或者async的情况下：会立即执行脚本,所以通常建议把script放在body最后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>async：有async的话,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。<br>但是多个js文件的加载顺序不会按照书写顺序进行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>derer：有derer的话,加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成,并且多个defer会按照顺序进行加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-同步和异步"><a href="#3-3-同步和异步" class="headerlink" title="3.3. 同步和异步"></a>3.3. 同步和异步</h4><p><strong>参考答案：</strong></p><p>同步</p><ul><li>指在 <strong>主线程</strong>上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务。</li><li>也就是调用一旦开始，必须这个调用 <strong>返回结果</strong>(划重点——）才能继续往后执行。程序的执行顺序和任务排列顺序是一致的。</li></ul><p>异步</p><ul><li>异步任务是指不进入主线程，而进入 <strong>任务队列</strong>的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程。</li><li>每一个任务有一个或多个 <strong>回调函数</strong>。前一个任务结束后，不是执行后一个任务,而是执行回调函数，后一个任务则是不等前一个任务结束就执行。</li><li>程序的执行顺序和任务的排列顺序是<strong>不一致</strong>的，异步的。</li><li>我们常用的setTimeout和setInterval函数，Ajax都是异步操作。</li></ul><h4 id="3-4-实现异步的方法"><a href="#3-4-实现异步的方法" class="headerlink" title="3.4 实现异步的方法"></a>3.4 实现异步的方法</h4><p><strong>参考答案：</strong></p><p>回调函数（Callback）、事件监听、发布订阅、Promise&#x2F;A+、生成器Generators&#x2F; yield、async&#x2F;await</p><ol><li><p>JS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await</p></li><li><p>async&#x2F;await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。</p></li><li><p>async&#x2F;await可以说是异步终极解决方案了。</p><p>(1) async&#x2F;await函数相对于Promise，优势体现在：</p><ul><li>处理 then 的调用链，能够更清晰准确的写出代码</li><li>并且也能优雅地解决回调地狱问题。</li></ul><p>当然async&#x2F;await函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。</p><p>(2) async&#x2F;await函数对 Generator 函数的改进，体现在以下三点：</p><ul><li>内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，<strong>async 函数的执行，与普通函数一模一样，只要一行</strong>。</li><li>更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 <strong>async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）</strong>。</li><li>更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</li></ul></li></ol><p><strong>解析：</strong></p><ol><li><p>回调函数（Callback）</p><p>回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是回调函数有一个致命的弱点，就是容易写出<strong>回调地狱（Callback hell）</strong>。假设多个请求存在依赖性，你可能就会写出如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(url, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="title function_">ajax</span>(url1, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理逻辑</span></span><br><span class="line">        <span class="title function_">ajax</span>(url2, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理逻辑</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回调函数的优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。此外它不能使用 try catch 捕获错误，不能直接 return。</p></li><li><p>事件监听</p><p>这种方式下，<strong>异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生</strong>。</p><p>下面是两个函数f1和f2，编程的意图是f2必须等到f1执行完成，才能执行。首先，为f1绑定一个事件（这里采用的jQuery的写法）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1.<span class="title function_">on</span>(<span class="string">&#x27;done&#x27;</span>, f2);</span><br></pre></td></tr></table></figure><p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    f1.<span class="title function_">trigger</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。</p><p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”，有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。</p></li><li><p>发布订阅</p><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布&#x2F;订阅模式”（publish-subscribe pattern），又称”观察者模式”（observer pattern）。</p><p>首先，f2向信号中心jQuery订阅done信号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">subscribe</span>(<span class="string">&#x27;done&#x27;</span>, f2);</span><br></pre></td></tr></table></figure><p>然后，f1进行如下改写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    jQuery.<span class="title function_">publish</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，jQuery.publish(‘done’)的意思是，f1执行完成后，向信号中心jQuery发布done信号，从而引发f2的执行。 f2完成执行后，可以取消订阅（unsubscribe）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="title function_">unsubscribe</span>(<span class="string">&#x27;done&#x27;</span>, f2);</span><br></pre></td></tr></table></figure><p>这种方法的性质与“事件监听”类似，但是明显优于后者。因为可以通过查看“消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p></li><li><p>Promise&#x2F;A+</p><p>Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果。 什么时候会用到过一段时间？答案是异步操作，异步是指可能比较长时间才有结果的才做，例如网络请求、读取本地文件等</p><p>4.1 Promise的三种状态</p><ul><li>Pending—-Promise对象实例创建时候的初始状态</li><li>Fulfilled—-可以理解为成功的状态</li><li>Rejected—-可以理解为失败的状态</li></ul><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646121826353/AE8F5B0E5132A5E6C19BCE0A3065045C" alt="img"></p><p><strong>这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了</strong>，比如说一旦状态变为 resolved 后，就不能 再次改变为Fulfilled</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;reject&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)<span class="comment">//无效代码不会执行</span></span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)<span class="comment">//reject</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当我们在构造 Promise 的时候，构造函数内部的代码是立即执行的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new Promise&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="comment">// new Promise =&gt; end</span></span><br></pre></td></tr></table></figure></li></ol><p>4.2 promise的链式调用</p><ul><li><p>每次调用返回的都是一个新的Promise实例(这就是then可用链式调用的原因)</p></li><li><p>如果then中返回的是一个结果的话会把这个结果传递下一次then中的成功回调</p></li><li><p>如果then中出现异常,会走下一个then的失败回调</p></li><li><p>在 then中使用了return，那么 return 的值会被Promise.resolve() 包装(见例1，2)</p></li><li><p>then中可以不传递参数，如果不传递会透到下一个then中(见例3)</p></li><li><p>catch 会捕获到没有捕获的异常</p><p>接下来我们看几个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> <span class="comment">//包装成 Promise.resolve(2)</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="number">3</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;My Error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> <span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x)) <span class="comment">//2</span></span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>)</span><br><span class="line">复制代码</span><br><span class="line"><span class="comment">// 例3</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params">url</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(url, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">read</span>(<span class="string">&#x27;./name.txt&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>() <span class="comment">//then中出现异常,会走下一个then的失败回调</span></span><br><span class="line">&#125;) <span class="comment">//由于下一个then没有失败回调，就会继续往下找，如果都没有，就会被catch捕获到</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>, err)<span class="comment">// then error</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise不仅能够捕获错误，而且也很好地解决了回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(url)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ajax</span>(url1)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ajax</span>(url2)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p>它也是存在一些缺点的，比如无法取消 Promise，错误需要通过回调函数捕获。</p></li></ul><ol><li><p>生成器Generators&#x2F; yield</p><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同，Generator 最大的特点就是可以控制函数的执行。</p><ul><li><p>语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p></li><li><p><strong>Generator 函数除了状态机，还是一个遍历器对象生成函数</strong>。</p></li><li><p><strong>可暂停函数, yield可暂停，next方法可启动，每次返回的是yield后的表达式结果</strong>。</p></li><li><p>yield表达式本身没有返回值，或者说总是返回undefined。<strong>next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值</strong>。</p><p>我们先来看个例子：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>))</span><br><span class="line">  <span class="keyword">let</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> (x + y + z)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">foo</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>())   <span class="comment">// =&gt; &#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>(<span class="number">12</span>)) <span class="comment">// =&gt; &#123;value: 8, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>(<span class="number">13</span>)) <span class="comment">// =&gt; &#123;value: 42, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>可能结果跟你想象不一致，接下来我们逐行代码分析：</p><ul><li><p>首先 Generator 函数调用和普通函数不同，它会返回一个迭代器</p></li><li><p>当执行第一次 next 时，传参会被忽略，并且函数暂停在 yield (x + 1) 处，所以返回 5 + 1 &#x3D; 6</p></li><li><p>当执行第二次 next 时，传入的参数12就会被当作上一个yield表达式的返回值，如果你不传参，yield 永远返回 undefined。此时 let y &#x3D; 2 * 12，所以第二个 yield 等于 2 * 12 &#x2F; 3 &#x3D; 8</p></li><li><p>当执行第三次 next 时，传入的参数13就会被当作上一个yield表达式的返回值，所以 z &#x3D; 13, x &#x3D; 5, y &#x3D; 24，相加等于 42</p><p>我们再来看个例子：有三个本地文件，分别1.txt,2.txt和3.txt，内容都只有一句话，下一个请求依赖上一个请求的结果，想通过Generator函数依次调用三个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.txt</span><br><span class="line">//1.txt文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.txt</span><br><span class="line">//2.txt文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.txt</span><br><span class="line">//3.txt文件</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">r</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r1 = <span class="keyword">yield</span> <span class="title function_">read</span>(<span class="string">&#x27;./1.txt&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> r2 = <span class="keyword">yield</span> <span class="title function_">read</span>(r1)</span><br><span class="line">  <span class="keyword">let</span> r3 = <span class="keyword">yield</span> <span class="title function_">read</span>(r2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">r</span>()</span><br><span class="line"><span class="keyword">let</span> &#123; value, done &#125; = it.<span class="title function_">next</span>()</span><br><span class="line">value.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123; <span class="comment">// value是个promise</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//data=&gt;2.txt</span></span><br><span class="line">  <span class="keyword">let</span> &#123; value, done &#125; = it.<span class="title function_">next</span>(data)</span><br><span class="line">  value.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//data=&gt;3.txt</span></span><br><span class="line">    <span class="keyword">let</span> &#123; value, done &#125; = it.<span class="title function_">next</span>(data)</span><br><span class="line">    value.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//data=&gt;结束</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>从上例中我们看出手动迭代Generator函数很麻烦，实现逻辑有点绕，而实际开发一般会配合co库去使用。<strong>co是一个为Node.js和浏览器打造的基于生成器的流程控制工具，借助于Promise，你可以使用更加优雅的方式编写非阻塞代码</strong>。</p><p>安装co库只需：npm install co</p><p>上面例子只需两句话就可以轻松实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">r</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r1 = <span class="keyword">yield</span> <span class="title function_">read</span>(<span class="string">&#x27;./1.txt&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> r2 = <span class="keyword">yield</span> <span class="title function_">read</span>(r1)</span><br><span class="line">  <span class="keyword">let</span> r3 = <span class="keyword">yield</span> <span class="title function_">read</span>(r2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> co = <span class="built_in">require</span>(<span class="string">&#x27;co&#x27;</span>)</span><br><span class="line"><span class="title function_">co</span>(<span class="title function_">r</span>()).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.txt=&gt;3.txt=&gt;结束=&gt;undefined</span></span><br></pre></td></tr></table></figure><p>我们可以通过 Generator 函数解决回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">ajax</span>(url, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">ajax</span>(url1, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">ajax</span>(url2, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it = <span class="title function_">fetch</span>()</span><br><span class="line"><span class="keyword">let</span> result1 = it.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">let</span> result2 = it.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">let</span> result3 = it.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure></li><li><p>async&#x2F;await</p><p>5.1 Async&#x2F;Await简介</p><p>使用async&#x2F;await，你可以轻松地达成之前使用生成器和co函数所做到的工作,它有如下特点：</p><p>\1. async&#x2F;await是基于Promise实现的，它不能用于普通的回调函数。</p><p>\2. async&#x2F;await与Promise一样，是非阻塞的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</span><br></pre></td></tr></table></figure></li></ol><p><strong>一个函数如果加上 async ，那么该函数就会返回一个 Promise</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">async1</span>()) <span class="comment">// -&gt; Promise &#123;&lt;resolved&gt;: &quot;1&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>Generator函数依次调用三个文件那个例子用async&#x2F;await写法，只需几句话便可实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readResult</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">await</span> <span class="title function_">read</span>(params, <span class="string">&#x27;utf8&#x27;</span>)<span class="comment">//await后面跟的是一个Promise实例</span></span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">await</span> <span class="title function_">read</span>(p1, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> p3 = <span class="keyword">await</span> <span class="title function_">read</span>(p2, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1&#x27;</span>, p1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2&#x27;</span>, p2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p3&#x27;</span>, p3)</span><br><span class="line">    <span class="keyword">return</span> p3</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">readResult</span>(<span class="string">&#x27;1.txt&#x27;</span>).<span class="title function_">then</span>( <span class="comment">// async函数返回的也是个promise</span></span><br><span class="line">  <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// p1 2.txt</span></span><br><span class="line"><span class="comment">// p2 3.txt</span></span><br><span class="line"><span class="comment">// p3 结束</span></span><br><span class="line"><span class="comment">// 结束</span></span><br></pre></td></tr></table></figure><p>5.2 Async&#x2F;Await并发请求</p><p>如果请求两个文件，毫无关系，可以通过并发请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(file, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">read1</span>()</span><br><span class="line">  <span class="title function_">read2</span>()<span class="comment">//这个函数同步执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">read1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">read2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">readAll</span>() <span class="comment">// 2.txt 3.txt</span></span><br></pre></td></tr></table></figure><h4 id="3-5-怎么解决callback多层嵌套"><a href="#3-5-怎么解决callback多层嵌套" class="headerlink" title="3.5 怎么解决callback多层嵌套"></a>3.5 怎么解决callback多层嵌套</h4><p><strong>参考答案：</strong></p><p>回调地狱有两种解决方案：</p><ol><li>Promises</li><li>Async&#x2F;await</li></ol><h4 id="3-6-promise的介绍与使用"><a href="#3-6-promise的介绍与使用" class="headerlink" title="3.6 promise的介绍与使用"></a>3.6 promise的介绍与使用</h4><p><strong>参考答案：</strong></p><p><strong>Promise 介绍：</strong></p><p>ES6中的Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。</p><p>Promise对象, 可以<strong>将异步操作以同步的流程表达出来</strong>。使用 Promise 主要有以下好处：</p><ul><li>可以很好地解决<strong>回调地狱</strong>的问题（避免了层层嵌套的回调函数）。</li><li>语法非常简洁。Promise 对象提供了简洁的API，使得控制异步操作更加容易。</li></ul><p><strong>Promise 使用：</strong></p><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;<span class="comment">/* executor函数 */</span></span><br><span class="line">    <span class="comment">// ... some code</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//failure</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>参数<br>executor函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor函数在Promise构造函数返回新建对象前被调用）。<br>executor内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled(完成)，或者将promise的状态改为rejected(失败)。<br>如果在executor函数中抛出一个错误，那么该promise状态为rejected。executor函数的返回值被忽略。</li><li>简单使用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">timeout</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//done</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>原型方法</strong></p><p>Promise.prototype.then(onFulfilled, onRejected)</p><ol><li><p>语法<br>p.then(onFulfilled, onRejected);<br>p.then((value) &#x3D;&gt; {&#x2F;&#x2F; fulfillment}, (reason) &#x3D;&gt; {&#x2F;&#x2F; rejection});</p></li><li><p>含义<br>为Promise实例添加状态改变时的回调函数。then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。</p></li><li><p>链式操作<br>then方法返回的是一个新的promise，因此可以采用链式写法，即then方法后面再调用另一个then方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)) <span class="comment">//1</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);              <span class="comment">//undefined</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);             <span class="comment">//2</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;err&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);            </span><br><span class="line">    &#125;, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);                <span class="comment">//Error: err</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);            <span class="comment">//3</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>注意：①不管是then方法的onfulfilled函数参数执行还是onrejected（可选参数）函数参数执行，then方法返回的都是一个新的Promise对象，都可以继续采用链式写法调用另一个then方法。②Promise.prototype.catch()方法返回的也是一个Promise对象。then方法和catch方法可以链式操作。</p></li><li><p>返回值<br>then方法返回一个Promise，而它的行为与then中的被调用的回调函数(onfulfilled函数&#x2F;onrejected函数)的返回值有关。<br>(1) 如果then中的回调函数返回一个值，那么then返回的Promise将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>( <span class="function">() =&gt;</span> <span class="number">99</span>, <span class="function">() =&gt;</span> <span class="number">42</span> )</span><br><span class="line">.<span class="title function_">then</span>( <span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>(2) 如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>)&#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125;); <span class="comment">//Error: err</span></span><br></pre></td></tr></table></figure><p>(3) 如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(result)&#125;); <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><p>(4) 如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125;); <span class="comment">//Error: err</span></span><br></pre></td></tr></table></figure><p>(5) 如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, <span class="number">2000</span>, <span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>( <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(result)&#125;); <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><p>注意：这里是then方法中被调用回调函数的返回值与then方法返回的Promise对象状态之间的关系。</p></li></ol><p><strong>Promise.prototype.catch(onRejected)</strong></p><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">catch</span>(onRejected);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 拒绝</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>含义<br>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数，返回一个新的promise对象。</p></li><li><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;err&#x27;</span>)); <span class="comment">//reject方法的作用，等同于抛出错误</span></span><br><span class="line">    <span class="comment">//throw new Error(&#x27;err&#x27;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);  <span class="comment">//Err: err</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------等价写法---------</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">//Err: err</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：由于.catch方法是.then(null, rejection)的别名，故.then中的链式操作(3)、返回值(4)等语法在.catch中都适用。</p></li><li><p>一般总是建议，Promise对象后面要跟catch方法，这样可以处理Promise内部发生的错误。catch方法返回的还是一个Promise对象，因此后面还可以接着调用then方法。</p></li><li><p>Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。 即：当前catch方法可以捕获上一个catch方法(包括上一个catch)到当前catch(不包括当前catch)方法之间所有的错误，如果没有错误，则当前catch方法不执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Promise(() =&gt; &#123;</span><br><span class="line">    throw new Error(&#x27;err1&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(() =&gt; &#123;console.log(1);&#125;)</span><br><span class="line">    .then(() =&gt; &#123;console.log(2);&#125;)</span><br><span class="line">    .catch((err) =&gt; &#123;</span><br><span class="line">        console.log(err); //Err: err1</span><br><span class="line">        throw  new Error(&#x27;err2&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err) =&gt; &#123;console.log(err);&#125;)//Err: err2</span><br></pre></td></tr></table></figure></li><li><p>一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;<span class="comment">/* success */</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="comment">/* error */</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="comment">/* success */</span> &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="comment">/* error */</span> &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法。</p></li><li><p>与传统的try&#x2F;catch代码块不同的是，即使没有使用catch方法指定错误处理的回调函数，Promise对象抛出的错误也不会中止外部脚本运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;over&#x27;</span>)&#125;);</span><br><span class="line"><span class="comment">//Uncaught (in promise) ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">//over</span></span><br></pre></td></tr></table></figure></li><li><p>在异步函数中抛出的错误不会被catch捕获到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        throw &#x27;Uncaught Exception!&#x27;;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;).catch(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;err&#x27;); //不会执行</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        reject();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;).catch(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;err&#x27;); //err</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在resolve()后面抛出的错误会被忽略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;Silenced Exception!&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p><strong>Promise.all(iterable)</strong></p><ol><li><p>语法<br>var p &#x3D; Promise.all([p1, p2, p3]);</p></li><li><p>含义<br>Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）<br>p的状态由p1、p2、p3决定，分成两种情况。<br>(1) 只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。<br>(2) 只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p></li><li><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="string">&#x27;p1-ok&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;p2-ok&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&#x27;p3-ok&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;p4-err&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">resolves</span>) =&gt;</span> &#123;</span><br><span class="line">      resolves.<span class="title function_">forEach</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(resolve); <span class="comment">//p1-ok   p2-ok  p3-ok</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3, p4])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">//p4-err</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>Promise.race(iterable)</strong></p><ol><li><p>语法<br>var p &#x3D; Promise.race([p1, p2, p3]);</p></li><li><p>含义<br>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。<br>Promise.race方法的参数与Promise.all方法一样，如果不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p></li><li><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&quot;one&quot;</span>);&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&quot;two&quot;</span>);&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &quot;two&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&quot;three&quot;</span>);&#125;);</span><br><span class="line"><span class="keyword">var</span> p4 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;<span class="built_in">setTimeout</span>(reject, <span class="number">500</span>, <span class="string">&quot;four&quot;</span>);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p3, p4])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &quot;three&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未被调用  </span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p5 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&quot;five&quot;</span>);&#125;);</span><br><span class="line"><span class="keyword">var</span> p6 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&quot;six&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p5, p6])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 未被调用             </span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// &quot;six&quot;</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><p><strong>Promise.resolve(value)</strong></p><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable);</span><br></pre></td></tr></table></figure><p>Promise.resolve等价于下面的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value) ;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(value));</span><br></pre></td></tr></table></figure></li><li><p>含义<br>返回一个状态由给定value决定的Promise实例。</p></li><li><p>用法<br>(1) 如果该值是一个Promise对象，则直接返回该对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;<span class="title function_">resolve</span>()&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p === p2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>(2) 如果参数是thenable对象(即带有then方法的对象)，则返回的Promise对象的最终状态由then方法的执行决定；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);  <span class="comment">// 42</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>(3) 如果参数是不具有then方法的对象或基本数据类型，则返回的Promise对象的状态为fulfilled，并且将该参数传递给then方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">//Hello</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>(4) 如果不带有任何参数，则返回的Promise对象的状态为fulfilled，并且将undefined作为参数传递给then方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">//undefined</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value)来返回一个Promise对象,这样就能将该value以Promise对象形式使用。</p></li><li><p>立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="comment">// one </span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>Promise.reject(reason)</strong></p><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br></pre></td></tr></table></figure><p>Promise.reject等价于下面的写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(reason));</span><br></pre></td></tr></table></figure></li><li><p>含义<br>返回一个状态为rejected的Promise对象，并将给定的失败信息传递给对应的处理方法。</p></li></ol><blockquote><p><strong>注意：Promise.resolve(value)方法返回的Promise实例的状态由value决定，可能是fulfilled，也可能是rejected。Promise.reject(reason)方法返回的Promise实例的状态一定是rejected。</strong></p></blockquote><ol><li><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;Testing static reject&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未被调用</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// Testing static reject</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;fail&quot;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 未被调用</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// Error: fail</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e === <span class="string">&#x27;ok&#x27;</span>); <span class="comment">//true</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(thenable)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e === thenable); <span class="comment">// true</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-7-Promise-all"><a href="#3-7-Promise-all" class="headerlink" title="3.7 Promise.all"></a>3.7 Promise.all</h4><p><strong>参考答案：</strong></p><p>Promise.all(iterable)方法返回一个Promise实例，此实例在iterable参数内所有的promise都“完成（resolved）”或参数中不包含promise时回调完成（resolve）；如果参数中promise有一个失败（rejected），此实例回调失败（reject），失败的原因是第一个失败promise的结果。</p><p><strong>解析：</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Promise.all(iterable);</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><p>iterable</p><p>一个可迭代对象，如Array或String</p></li></ul><p>返回值</p><ul><li>如果传入的参数是一个空的可迭代对象，则返回一个<strong>已完成（already resolved）</strong>状态的Promise</li><li>如果传入的参数不包含任何promise，则返回一个<strong>异步完成（asynchronously resolved）</strong> Promise。注意：Google Chrome 58 在这种情况下返回一个<strong>已完成（already resolved）</strong>状态的Promise。</li><li>其它情况下返回一个<strong>处理中（pending）</strong>的Promise。这个返回的promise之后会在所有的promise都完成或有一个promise失败时<strong>异步</strong>地变为完成或失败。 见下方关于“Promise.all 的异步或同步”示例。返回值将会按照参数内的promise顺序排列，而不是由调用promise的完成顺序决定。</li></ul><h4 id="3-8-与promise-all相反的是哪一个"><a href="#3-8-与promise-all相反的是哪一个" class="headerlink" title="3.8 与promise.all相反的是哪一个"></a>3.8 与promise.all相反的是哪一个</h4><p><strong>参考答案：</strong></p><p>Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><p><strong>扩展：</strong></p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Promise.race(iterable);</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><p>iterable</p><p>可迭代对象，类似Array</p></li></ul><p>返回值</p><p>一个<strong>待定的</strong> Promise]只要给定的迭代中的一个promise解决或拒绝，就采用第一个promise的值作为它的值， 从而<strong>异步</strong>地解析或拒绝（一旦堆栈为空）。</p><h4 id="3-9-promise实现文件读取"><a href="#3-9-promise实现文件读取" class="headerlink" title="3.9 promise实现文件读取"></a>3.9 promise实现文件读取</h4><p><strong>参考答案：</strong></p><p><strong>封装异步读取文件操作</strong></p><ul><li>fs.readFile()方法用于异步读取文件(node核心模块)</li><li>将Promise的实例对象作为函数的返回值返回</li><li>这样函数执行完毕后就得到一个Promise对象的实例,可以通过.then方法传入成功的回调和失败的回调</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncGetFileByPath</span>(<span class="params">p</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Promise对象里面的参数,会立即执行(前面说过)</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, p), <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncGetFileByPath</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="comment">// 成功的回调</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">// 失败的回调</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>**<img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646121881244/1B3A5FDCE74EDAD823C9F50C3DA78DF3" alt="img"><br>**</p><p><strong>解决回调地狱</strong></p><ul><li>前面已经成功的封装了一个读取文件的函数</li><li>下面用它来体验一下读取多个文件</li><li>我们在.then()方法中,第一个参数resolve()方法中,返回一个promise对象B.</li><li>那么在执行.then()的resolve()方法完毕后,此时的执行环境是这个Promise的实例b</li><li>可以通过b的.then()方法继续传入resolve取消回调地狱,让代码趋于扁平化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncGetFileByPath</span>(<span class="params">p</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Promise对象里面的参数,会立即执行(前面说过)</span></span><br><span class="line">        fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, p), <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncGetFileByPath</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="comment">// 成功的回调    &#x27;1.txt&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 打印出 1.txt 数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">asyncGetFileByPath</span>(<span class="string">&#x27;./files/2.txt&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">// 失败的回调</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">then</span>( <span class="comment">// 成功的回调  &#x27;2.txt&#x27;</span></span><br><span class="line">        <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 打印出 2.txt 中的数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">asyncGetFileByPath</span>(<span class="string">&#x27;./files/3.txt&#x27;</span>) <span class="comment">// 继续返回Promise对象的实例</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">data</span>) =&gt;</span> &#123; <span class="comment">// 成功的回调 &#x27;3.txt&#x27;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 打印出 3.txt 中的数据</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="3-10-用js实现sleep，用promise"><a href="#3-10-用js实现sleep，用promise" class="headerlink" title="3.10 用js实现sleep，用promise"></a>3.10 用js实现sleep，用promise</h4><p><strong>参考答案:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="title function_">sleep</span>(<span class="number">3000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> t2 = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t2 - t1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优点：这种方式实际上是用了 setTimeout，没有形成进程阻塞，不会造成性能和负载问题。</p><p>缺点：虽然不像 callback 套那么多层，但仍不怎么美观，而且当我们需要在某过程中需要停止执行（或者在中途返回了错误的值），还必须得层层判断后跳出，非常麻烦，而且这种异步并不是那么彻底，还是看起来别扭</p><h4 id="3-11-实现一个-Scheduler-类，完成对Promise的并发处理，最多同时执行2个任务"><a href="#3-11-实现一个-Scheduler-类，完成对Promise的并发处理，最多同时执行2个任务" class="headerlink" title="3.11 实现一个 Scheduler 类，完成对Promise的并发处理，最多同时执行2个任务"></a>3.11 实现一个 Scheduler 类，完成对Promise的并发处理，最多同时执行2个任务</h4><p><strong>参考答案：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span> = [], <span class="comment">// 待运行的任务</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">usingTask</span> = [] <span class="comment">// 正在运行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// promiseCreator 是一个异步函数，return Promise</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">promiseCreator</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            promiseCreator.<span class="property">resolve</span> = resolve</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">usingTask</span>.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">usingRun</span>(promiseCreator)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(promiseCreator)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">usingRun</span>(<span class="params">promiseCreator</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">usingTask</span>.<span class="title function_">push</span>(promiseCreator)</span><br><span class="line">        <span class="title function_">promiseCreator</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            promiseCreator.<span class="title function_">resolve</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">usingMove</span>(promiseCreator)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">usingRun</span>(<span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">shift</span>())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">usingMove</span>(<span class="params">promiseCreator</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">usingTask</span>.<span class="title function_">findIndex</span>(promiseCreator)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">usingTask</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">time</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTask</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">    scheduler.<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">timeout</span>(time)).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(order))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">400</span>, <span class="number">4</span>) </span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">200</span>, <span class="number">2</span>) </span><br><span class="line"><span class="title function_">addTask</span>(<span class="number">300</span>, <span class="number">3</span>) </span><br></pre></td></tr></table></figure><h4 id="3-12-循环i，setTimeout-中输出什么，如何解决（块级作用域，函数作用域）"><a href="#3-12-循环i，setTimeout-中输出什么，如何解决（块级作用域，函数作用域）" class="headerlink" title="3.12 循环i，setTimeout 中输出什么，如何解决（块级作用域，函数作用域）"></a>3.12 循环i，setTimeout 中输出什么，如何解决（块级作用域，函数作用域）</h4><p><strong>参考答案：</strong></p><p><strong>for循环setTimeout输出1-10解决方式问题来源</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">   &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>期望：输出1到10</p><p>为什么无法输出1到十</p><p>在上面的代码中，for循环是同步代码，setTimeout是异步代码。遇到这种既包含同步又包含异步的情况，JavaScript依旧按照从上到下的顺序执行同步代码，并将异步代码插入任务队列。setTimeout的第二个参数则是把执行代码（console.log(i)）添加到任务队列需等待的毫秒数，但等待的时间是相对主程序完毕的时间计算的，也就是说，在执行到setTimeout函数时会等待一段时间，再将当前任务插入任务队列。<br>最后，当执行完同步代码，js引擎就会去执行任务队列中的异步代码。这时候任务队列中就会有十个console.log(i)。我们知道，在每次循环中将setTimeout里面的代码“console.log(i)”放入任务队列时，i的值都是不一样的。但JavaScript引擎开始执行任务队列中的代码时，会开始在当前的作用域中开始找变量i，但是当前作用域中并没有对变量i进行定义。这个时候就会在创造该函数的作用域中寻找i。创建该函数的作用域就是全局作用域，这个时候就找到了for循环中的变量i，这时的i是全局变量，并且值已经确定：10。十个console.log“共享”i的值。这就是作用域链的问题。</p><p><strong>解决方法</strong></p><ul><li>方法一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">   &#125;, <span class="number">1000</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最精简解决方案</p></blockquote><ul><li>方法二</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i) </span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最优解决方案，利用let形成块级作用域</p></blockquote><ul><li>方法三</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  (<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>IIFE(立即执行函数)，类似于let生成了块级作用域。</p></blockquote><ul><li>方法四</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(i),<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接输出，没有延迟</p></blockquote><ul><li>方法五</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>((<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(i))(),<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同上</p></blockquote><ul><li>方法六</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> i</span><br><span class="line">      &#125;<span class="keyword">catch</span>(i)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><h4 id="3-13-js执行顺序的题目，涉及到settimeout、console、process-nextTick、promise-then"><a href="#3-13-js执行顺序的题目，涉及到settimeout、console、process-nextTick、promise-then" class="headerlink" title="3.13 js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.then"></a>3.13 js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.then</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p><strong>参考答案：</strong></p><p>综合的执行顺序就是：3——&gt;4——&gt;6——&gt;8——&gt;7——&gt;5——&gt;start: 7.009ms——&gt;1——&gt;2</p><p><strong>解析：</strong></p><p>本题目，考察的就是 node 事件循环 Event Loop 我们可以简单理解Event Loop如下：</p><ol><li>所有任务都在主线程上执行，形成一个执行栈(Execution Context Stack)</li><li>在主线程之外还存在一个任务队列(Task Queen),系统把异步任务放到任务队列中，然后主线程继续执行后续的任务</li><li>一旦执行栈中所有的任务执行完毕，系统就会读取任务队列。如果这时异步任务已结束等待状态，就会从任务队列进入执行栈，恢复执行</li><li>主线程不断重复上面的第三步</li></ol><p>在上述的例子中，我们明白首先执行主线程中的同步任务，因此依次输出3、4、6、8。当主线程任务执行完毕后，再从Event Loop中读取任务。</p><p>Event Loop读取任务的先后顺序，取决于任务队列（Job queue）中对于不同任务读取规则的限定。</p><p>在Job queue中的队列分为两种类型：</p><p>宏任务 Macrotask宏任务是指Event Loop在<strong>每个阶段</strong>执行的任务</p><p>微任务 Microtask微任务是指Event Loop在<strong>每个阶段之间</strong>执行的任务</p><p>我们举例来看执行顺序的规定，我们假设</p><p>宏任务队列包含任务: A1, A2 , A3</p><p>微任务队列包含任务: B1, B2 , B3</p><p>执行顺序为，首先执行宏任务队列开头的任务，也就是 A1 任务，执行完毕后，在执行微任务队列里的所有任务，也就是依次执行B1, B2 , B3，执行完后清空微任务队中的任务，接着执行宏任务中的第二个任务A2，依次循环。</p><p>了解完了宏任务 Macrotask和微任务 Microtask两种队列的执行顺序之后，我们接着来看，真实场景下这两种类型的队列里真正包含的任务（我们以node V8引擎为例），在node V8中，这两种类型的真实任务顺序如下所示：</p><p>宏任务 Macrotask队列真实包含任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(主程序代码),setTimeout, setInterval, setImmediate, I/O, UI rendering</span><br></pre></td></tr></table></figure><p>微任务 Microtask队列真实包含任务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick, Promises, Object.observe, MutationObserver</span><br></pre></td></tr></table></figure><p>由此我们得到的执行顺序应该为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I/O——&gt;UI rendering</span><br></pre></td></tr></table></figure><blockquote><p>在ES6中宏任务 Macrotask队列又称为ScriptJobs，而微任务 Microtask又称PromiseJobs</p></blockquote><p>我们的题目相对复杂，但是要注意，我们在定义promise的时候，promise构造部分是同步执行的</p><p>接下来我们分析我们的题目，首先分析Job queue的执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script(主程序代码)——&gt;process.nextTick——&gt;promise——&gt;setTimeout——&gt;setImmediate</span><br></pre></td></tr></table></figure><ul><li>主体部分： 定义promise的构造部分是同步的，因此先输出3、4 ，主体部分再输出6、8（同步情况下，就是严格按照定义的先后顺序）</li><li>process.nextTick: 输出7</li><li>promise： 这里的promise部分，严格的说其实是promise.then部分，输出的是5、以及 timeEnd(‘start’)</li><li>setImmediate：输出1，依据上面优先级，应该先setTimeout，但是注意，setTimeout 设置 10ms 延时</li><li>setTimeout ： 输出2</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;3-1-promise和-async-await-区别&quot;&gt;&lt;a href=&quot;#3-1-promise和-async-await-区别&quot; class=&quot;headerlink&quot; title=&quot;3.1 promise和 async await 区别&quot;&gt;&lt;/a&gt;3.1 p</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://dont-sleep-so-late.github.io/tags/JavaScript/"/>
    
    <category term="八股文" scheme="https://dont-sleep-so-late.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>HTML八股文</title>
    <link href="https://dont-sleep-so-late.github.io/2024/04/01/%E5%85%AB%E8%82%A1%E6%96%87/HTMl%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>https://dont-sleep-so-late.github.io/2024/04/01/%E5%85%AB%E8%82%A1%E6%96%87/HTMl%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2024-04-01T15:31:36.000Z</published>
    <updated>2024-04-03T03:46:40.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="1-1-html标签的类型（head，-body，！Doctype）-他们的作用是什么"><a href="#1-1-html标签的类型（head，-body，！Doctype）-他们的作用是什么" class="headerlink" title="1.1 html标签的类型（head， body，！Doctype） 他们的作用是什么"></a>1.1 html标签的类型（head， body，！Doctype） 他们的作用是什么</h2><p><strong>参考答案：</strong></p><p>!DOCTYPE 标签：</p><ul><li>它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令.</li></ul><p>head：</p><ul><li>是所有头部元素的容器, 绝大多数头部标签的内容不会显示给读者</li><li>该标签下所包含的部分可加入的标签有,,,,和</li></ul><p>body :</p><ul><li>用于定义文档的主体, 包含了文档的所有内容</li><li>该标签支持 html 的全局属性和事件属性.</li></ul><h2 id="1-2-h5新特性"><a href="#1-2-h5新特性" class="headerlink" title="1.2 h5新特性"></a>1.2 h5新特性</h2><p><strong>参考答案：</strong></p><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>离线应用 manifest</li><li>桌面通知 Notifications</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li><li>地理位置 Geolocation</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>Form Data 对象</li><li>绘画 canvas</li></ul><p>H5移除的元素：</p><ul><li>纯表现的元素：basefont、big、center、font、s、strike、tt、u</li><li>对可用性产生负面影响的元素：frame、frameset、noframes</li></ul><h2 id="1-3-伪类和伪元素"><a href="#1-3-伪类和伪元素" class="headerlink" title="1.3 伪类和伪元素"></a>1.3 伪类和伪元素</h2><p><strong>参考答案：</strong></p><p>伪类：用于已有元素处于某种状态时为其添加对应的样式，这个状态是根据用户行为而动态变化的。</p><p>例如：当用户悬停在指定元素时，可以通过:hover来描述这个元素的状态，虽然它和一般css相似，可以为 已有元素添加样式，但是它只有处于DOM树无法描述的状态下才能为元素添加样式，所以称为伪类。</p><p>伪元素：用于创建一些不在DOM树中的元素，并为其添加样式。</p><p>例如，我们可以通过:before来在一个元素之前添加一些文本，并为这些文本添加样式，虽然用户可以看见 这些文本，但是它实际上并不在DOM文档中。</p><h2 id="1-4-html5语义化"><a href="#1-4-html5语义化" class="headerlink" title="1.4 html5语义化"></a>1.4 html5语义化</h2><p><strong>参考答案：</strong></p><p>在HTML5出来之前，我们习惯于用div来表示页面的章节或者不同模块，但是div本身是没有语义的。但是现在，HTML5中加入了一些语义化标签，来更清晰的表达文档结构。</p><p>标签：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646121492395/44B73F2E744FF268279D16601DB2CBC8" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>      <span class="comment">&lt;!--：页面主体内容。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>         <span class="comment">&lt;!--：h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>         <span class="comment">&lt;!--：无序列表。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>         <span class="comment">&lt;!--：有序列表。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>     <span class="comment">&lt;!--：页眉通常包括网站标志、主导航、全站链接以及搜索框。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>         <span class="comment">&lt;!--：标记导航，仅对文档中重要的链接群使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>         <span class="comment">&lt;!--：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>    <span class="comment">&lt;!--：定义外部的内容，其中的内容独立于文档的其余部分。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>    <span class="comment">&lt;!--：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>         <span class="comment">&lt;!--：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>     <span class="comment">&lt;!--：页脚，只有当父级是body时，才是整个页面的页脚。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>      <span class="comment">&lt;!--：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>     <span class="comment">&lt;!--：和 em 标签一样，用于强调文本，但它强调的程度更强一些。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>         <span class="comment">&lt;!--：将其中的文本表示为强调的内容，表现为斜体。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>       <span class="comment">&lt;!--：使用黄色突出显示部分文本。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span>     <span class="comment">&lt;!--：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="comment">&lt;!--：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>       <span class="comment">&lt;!--：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquoto</span>&gt;</span><span class="comment">&lt;!--：定义块引用，块引用拥有它们自己的空间。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>          <span class="comment">&lt;!--：短的引述（跨浏览器问题，尽量避免使用）。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>       <span class="comment">&lt;!--：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>       <span class="comment">&lt;!--：简称或缩写。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>       <span class="comment">&lt;!--：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>    <span class="comment">&lt;!--：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>        <span class="comment">&lt;!--：移除的内容。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>        <span class="comment">&lt;!--：添加的内容。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>       <span class="comment">&lt;!--：标记代码。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span>&gt;</span>      <span class="comment">&lt;!--：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span>    <span class="comment">&lt;!--：定义运行中的进度（进程）。--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p>语义化优点：</p><ul><li>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li><li>方便屏幕阅读器解析，如盲人阅读器根据语义渲染网页</li><li>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</li></ul><h2 id="1-5-audio-标签的api"><a href="#1-5-audio-标签的api" class="headerlink" title="1.5 audio 标签的api"></a>1.5 audio 标签的api</h2><p><strong>参考答案：</strong></p><p>audio常用属性</p><table><thead><tr><th><strong>属性</strong></th><th><strong>属性值</strong></th><th><strong>注释</strong></th></tr></thead><tbody><tr><td>src</td><td>url</td><td>播放的音乐的url地址（火狐只支持ogg的音乐，而IE9只支持MP3格式的音乐。chrome貌似全支持）</td></tr><tr><td>preload</td><td>preload</td><td>预加载（在页面被加载时进行加载或者说缓冲音频），如果使用了autoplay的话那么该属性失效。</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>controls</td><td>controls</td><td>是否显示默认控制条（控制按钮）</td></tr><tr><td>autoplay</td><td>autoplay</td><td>自动播放</td></tr></tbody></table><p>audio音乐格式的支持</p><table><thead><tr><th><strong>音频格式</strong></th><th><strong>Chrome</strong></th><th><strong>Firefox</strong></th><th><strong>IE9</strong></th><th><strong>Opera</strong></th><th><strong>Safari</strong></th></tr></thead><tbody><tr><td>OGG</td><td>√</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>MP3</td><td>√</td><td>×</td><td>√</td><td>×</td><td>√</td></tr><tr><td>WAV</td><td>×</td><td>√</td><td>×</td><td>√</td><td>×</td></tr></tbody></table><p>audio属性</p><table><thead><tr><th>属性</th><th>注释</th></tr></thead><tbody><tr><td>duration</td><td>获取媒体文件的总时长，以s为单位，如果无法获取，返回NaN</td></tr><tr><td>paused</td><td>如果媒体文件被暂停，那么paused属性返回true，反之则返回false</td></tr><tr><td>ended</td><td>如果媒体文件播放完毕返回true</td></tr><tr><td>muted</td><td>用来获取或设置静音状态。值为boolean</td></tr><tr><td>volume</td><td>控制音量的属性值为0-1;0为音量最小，1为音量最大</td></tr><tr><td>startTime</td><td>返回起始播放时间</td></tr><tr><td>error</td><td>返回错误代码，为uull的时候为正常。否则可以通过Music.error.code来获取具体的错误代码： 1.用户终止 2.网络错误 3.解码错误 4.URL无效</td></tr><tr><td>currentTime</td><td>用来获取或控制当前播放的时间，单位为s。</td></tr><tr><td>currentSrc</td><td>以字符串形式返回正在播放或已加载的文件</td></tr></tbody></table><p>常用的控制用的函数：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>load()</td><td>加载音频、视频软件</td></tr><tr><td>play()</td><td>加载并播放音频、视频文件或重新播放暂停的的音频、视频</td></tr><tr><td>pause()</td><td>暂停出于播放状态的音频、视频文件</td></tr><tr><td>canPlayType(obj)</td><td>测试是否支持给定的Mini类型的文件</td></tr></tbody></table><p>常用audio的事件：</p><table><thead><tr><th>事件名称</th><th>事件作用</th></tr></thead><tbody><tr><td>loadstart</td><td>客户端开始请求数据</td></tr><tr><td>progress</td><td>客户端正在请求数据（或者说正在缓冲）</td></tr><tr><td>play</td><td>play()和autoplay播放时</td></tr><tr><td>pause</td><td>pause()方法促发时</td></tr><tr><td>ended</td><td>当前播放结束</td></tr><tr><td>timeupdate</td><td>当前播放时间发生改变的时候。播放中常用的时间处理哦</td></tr><tr><td>canplaythrough</td><td>歌曲已经载入完全完成</td></tr><tr><td>canplay</td><td>缓冲至目前可播放状态。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h1&gt;&lt;h2 id=&quot;1-1-html标签的类型（head，-body，！Doctype）-他们的作用是什么&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="HTML" scheme="https://dont-sleep-so-late.github.io/tags/HTML/"/>
    
    <category term="八股文" scheme="https://dont-sleep-so-late.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://dont-sleep-so-late.github.io/2024/04/01/%E5%85%AB%E8%82%A1%E6%96%87/%E6%89%93%E5%8C%85/"/>
    <id>https://dont-sleep-so-late.github.io/2024/04/01/%E5%85%AB%E8%82%A1%E6%96%87/%E6%89%93%E5%8C%85/</id>
    <published>2024-04-01T15:31:36.000Z</published>
    <updated>2024-04-03T03:51:01.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-1-打包，webpack和gulp的区别"><a href="#2-1-打包，webpack和gulp的区别" class="headerlink" title="2.1 打包，webpack和gulp的区别"></a>2.1 打包，webpack和gulp的区别</h4><p><strong>参考答案</strong>：</p><p><strong>Gulp：</strong></p><p>Gulp是一个自动化构建<strong>工具</strong>，强调的是前端开发的流程，通过配置一系列的task，定义task处理的事物，然后定义执行顺序，来让Gulp执行task，从而构建前端项目的流程，说白了就是用来打包项目。</p><p>不管做什么功能，都有一个统一的接口进行管理，必须去注册一个任务，然后去执行，这也是它的特点之一，即“任务化”。</p><p><strong>WebPack：</strong></p><p>WebPack是一个前端模块化<strong>方案</strong>，侧重模块打包，把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源，Gulp也可以配置seajs、requirejs甚至webpack的插件。</p><p>它会分析你的项目结构，找到JS模块以及那些浏览器不能够直接运行的扩展语言（如：TypeScript等），然后将其转换和打包为合适的格式供浏览器使用。<strong>它最大的优点就是“模块化”（万物皆模块）。</strong><br>相同点：</p><ul><li>都可以对文件进行合并与压缩（JS、CSS）。</li></ul><p>不同点：</p><ul><li>Gulp是构建工具，可以配合各种插件做css.压缩等，解放了双手，实现了自动化。</li><li>Gulp严格上讲，它旨在规范前端开发流程，不包括模块化功能。</li><li>WebPack是文件打包工具，可把各个项目的css.压缩文件等打包合并成一个或多个文件，主要就是应用于模块化操作。</li><li>WebPack更是明显强调模块化开发，而那些文件压缩合并、预处理等功能，只是他附带的功能。</li><li>WebPack整合了Gulp的优点，当我们想要一步一步来配置自己的环境时，那么gulp就可以满足我们的需要，但是如果我们想一下就配备大部分我们所需要的环境，那么此时可以选用WebPack，前提是写好package.json。</li><li>gulp与webpack上是互补的，还是可替换的，取决于你项目的需求，它们可不存在冲突的关系哈。</li><li>Gulp与WebPack可以组合起来使用，以便快速编译（依靠Gulp丰富的组件可以让JS与HTML实现联动，从而控制WebPack应用程序，达到高自动化）</li></ul><h4 id="2-2-webpack的打包流程"><a href="#2-2-webpack的打包流程" class="headerlink" title="2.2 webpack的打包流程"></a>2.2 webpack的打包流程</h4><p><strong>参考答案</strong>：</p><p>Webpack的运行流程是一个串行的过程，从启动到结束依次执行以下流程：</p><ol><li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。</li><li>编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。</li><li>输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。</li></ol><p>如果只执行一次构建，以上阶段将会按照顺序各执行一次。但在开启监听模式下，流程将变为如下：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646129282955/9B823AC99AF889118D34D0CB72E7A28E" alt="img"></p><p>下面具体介绍一下webpack的三个大阶段具体的小步。</p><p>初始化阶段</p><p>初始化阶段大致分为：</p><ul><li>合并shell和<strong>配置文件文件</strong>的参数并且<strong>实例化Complier对象</strong>。</li><li><strong>加载插件</strong></li><li><strong>处理入口</strong></li></ul><table><thead><tr><th>事件名</th><th>解释</th></tr></thead><tbody><tr><td>初始化参数</td><td>从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。 这个过程中还会执行配置文件中的插件实例化语句 new Plugin()。</td></tr><tr><td>实例化 Compiler</td><td>用上一步得到的参数初始化Compiler实例，Compiler负责文件监听和启动编译。Compiler实例中包含了完整的Webpack配置，全局只有一个Compiler实例。</td></tr><tr><td>加载插件</td><td>依次调用插件的apply方法，让插件可以监听后续的所有事件节点。同时给插件传入compiler实例的引用，以方便插件通过compiler调用Webpack提供的API。</td></tr><tr><td>environment</td><td>开始应用Node.js风格的文件系统到compiler对象，以方便后续的文件寻找和读取。</td></tr><tr><td>entry-option</td><td>读取配置的Entrys，为每个Entry实例化一个对应的EntryPlugin，为后面该Entry的递归解析工作做准备。</td></tr><tr><td>after-plugins</td><td>调用完所有内置的和配置的插件的apply方法。</td></tr><tr><td>after-resolvers</td><td>根据配置初始化完resolver，resolver负责在文件系统中寻找指定路径的文件。</td></tr></tbody></table><p>编译阶段</p><table><thead><tr><th>事件名</th><th>解释</th></tr></thead><tbody><tr><td>before-run</td><td>清除缓存</td></tr><tr><td>run</td><td>启动一次新的编译。</td></tr><tr><td>watch-run</td><td>和run类似，区别在于它是在监听模式下启动的编译，在这个事件中可以获取到是哪些文件发生了变化导致<strong>重新启动</strong>一次新的编译。</td></tr><tr><td>compile</td><td>该事件是为了告诉插件一次<strong>新的</strong>编译将要启动，同时会给插件带上compiler对象。</td></tr><tr><td>compilation</td><td>当Webpack以开发模式运行时，每当检测到文件变化，一次新的Compilation将被创建。一个Compilation对象包含了当前的模块资源、编译生成资源、变化的文件等。Compilation对象也提供了很多事件回调供插件做扩展。</td></tr><tr><td>make</td><td>一个新的Compilation创建完毕，即将从Entry开始读取文件，根据文件类型和配置的Loader对文件进行编译，编译完后再找出该文件依赖的文件，递归的编译和解析。</td></tr><tr><td>after-compile</td><td>一次Compilation执行完成。这里会根据编译结果 合并出我们最终生成的文件名和文件内容。</td></tr><tr><td>invalid</td><td>当遇到文件不存在、文件编译错误等异常时会触发该事件，该事件不会导致Webpack退出。</td></tr></tbody></table><p>这里主要最重要的就是compilation过程，compilation实际上就是调用相应的loader处理文件生成chunks并对这些chunks做优化的过程。几个关键的事件（Compilation对象this.hooks中）：</p><table><thead><tr><th>事件名</th><th>解释</th></tr></thead><tbody><tr><td>build-module</td><td>使用对应的Loader去转换一个模块。</td></tr><tr><td>normal-module-loader</td><td>在用Loader对一个模块转换完后，使用acorn解析转换后的内容，输出对应的抽象语法树（AST），以方便Webpack后面对代码的分析。</td></tr><tr><td>program</td><td>从配置的入口模块开始，分析其AST，当遇到require等导入其它模块语句时，便将其加入到<strong>依赖的模块列表</strong>，同时对新找出的<strong>依赖模块递归分析</strong>，最终搞清所有模块的<strong>依赖关系</strong>。</td></tr><tr><td>seal</td><td>所有模块及其<strong>依赖</strong>的模块都通过Loader转换完成后，根据依赖关系开始生成Chunk。</td></tr></tbody></table><p>输出阶段</p><table><thead><tr><th>事件名</th><th>解释</th></tr></thead><tbody><tr><td>should-emit</td><td>所有需要输出的文件已经生成好，询问插件哪些文件需要输出，哪些不需要。</td></tr><tr><td>emit</td><td>确定好要输出哪些文件后，执行文件输出，可以在这里获取和修改输出内容。</td></tr><tr><td>after-emit</td><td>文件输出完毕。</td></tr><tr><td>done</td><td>成功完成一次完成的编译和输出流程。</td></tr><tr><td>failed</td><td>如果在编译和输出流程中遇到异常导致Webpack退出时，就会直接跳转到本步骤，插件可以在本事件中获取到具体的错误原因。</td></tr></tbody></table><h4 id="2-3-webpack-有哪些阶段"><a href="#2-3-webpack-有哪些阶段" class="headerlink" title="2.3 webpack 有哪些阶段"></a>2.3 webpack 有哪些阶段</h4><p><strong>参考答案</strong>：</p><ol><li>webpack的准备阶段</li><li>modules和chunks的生成阶段</li><li>文件生成阶段</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;2-1-打包，webpack和gulp的区别&quot;&gt;&lt;a href=&quot;#2-1-打包，webpack和gulp的区别&quot; class=&quot;headerlink&quot; title=&quot;2.1 打包，webpack和gulp的区别&quot;&gt;&lt;/a&gt;2.1 打包，webpack和gulp的</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="八股文" scheme="https://dont-sleep-so-late.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    <category term="webpack" scheme="https://dont-sleep-so-late.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>ES5和ES6</title>
    <link href="https://dont-sleep-so-late.github.io/2024/04/01/%E5%85%AB%E8%82%A1%E6%96%87/ES5%E5%92%8CES6/"/>
    <id>https://dont-sleep-so-late.github.io/2024/04/01/%E5%85%AB%E8%82%A1%E6%96%87/ES5%E5%92%8CES6/</id>
    <published>2024-04-01T15:22:36.000Z</published>
    <updated>2024-04-03T03:49:42.146Z</updated>
    
    <content type="html"><![CDATA[<h4 id="6-1-es6中箭头函数"><a href="#6-1-es6中箭头函数" class="headerlink" title="6.1 es6中箭头函数"></a>6.1 es6中箭头函数</h4><p><strong>参考答案：</strong></p><ol><li><p>基本语法</p><p>ES6中允许使用箭头&#x3D;&gt;来定义箭头函数，具体语法，我们来看一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span> !`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> fun = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span> !`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看出，定义箭头函在数语法上要比普通函数简洁得多。箭头函数省去了function关键字，采用箭头&#x3D;&gt;来定义函数。函数的参数放在&#x3D;&gt;前面的括号中，函数体跟在&#x3D;&gt;后的花括号中。</p><p>关于箭头函数的参数：</p><p><strong>①</strong> 如果箭头函数没有参数，直接写一个空括号即可。</p><p><strong>②</strong> 如果箭头函数的参数只有一个，也可以省去包裹参数的括号。</p><p><strong>③</strong> 如果箭头函数有多个参数，将参数依次用逗号(,)分隔，包裹在括号中即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一个参数，可以省去参数括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span> = name =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span> !`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有多个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun3</span> = (<span class="params">val1, val2, val3</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [val1, val2, val3];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于箭头函数的函数体：</p><p><strong>①</strong> 如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = val =&gt; val;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span> (<span class="params">val</span>) &#123; <span class="keyword">return</span> val &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>②</strong> 如果箭头函数的函数体只有一句代码，就是返回一个对象，可以像下面这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用小括号包裹要返回的对象，不报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getTempItem</span> = id =&gt; (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但绝不能这样写，会报错。</span></span><br><span class="line"><span class="comment">// 因为对象的大括号会被解释为函数体的大括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getTempItem</span> = id =&gt; &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>③</strong> 如果箭头函数的函数体只有一条语句并且不需要返回值（最常见是调用一个函数），可以给这条语句前面加一个void关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="keyword">void</span> <span class="title function_">doesNotReturn</span>();</span><br></pre></td></tr></table></figure><p>箭头函数最常见的用处就是简化回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子一</span></span><br><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子二</span></span><br><span class="line"><span class="comment">// 正常函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>].<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数与普通函数的区别</p><p>2.1 语法更加简洁、清晰</p><p>从上面的基本语法示例中可以看出，箭头函数的定义要比普通函数定义简洁、清晰得多，很快捷。</p><p>2.2 箭头函数不会创建自己的this</p><p>箭头函数没有自己的this，它会捕获自己在<strong>定义时</strong>（注意，是定义时，不是调用时）所处的<strong>外层执行环境的this</strong>，并继承这个this值。所以，箭头函数中this的指向在它被定义的时候就已经确定了，之后永远不会改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout中使用普通函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout中使用箭头函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line"></span><br><span class="line">fun2.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Obj&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这个例子，函数fun1中的setTimeout中使用普通函数，2秒后函数执行时，这时函数其实是在全局作用域执行的，所以this指向Window对象，this.id就指向全局变量id，所以输出’Global’。 但是函数fun2中的setTimeout中使用的是箭头函数，这个箭头函数的this在定义时就确定了，它继承了它外层fun2的执行环境中的this，而fun2调用时this被call方法改变到了对象{id: ‘Obj’}中，所以输出’Obj’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;GLOBAL&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;OBJ&#x27;</span>,</span><br><span class="line">  <span class="attr">a</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">b</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">a</span>();    <span class="comment">// &#x27;OBJ&#x27;</span></span><br><span class="line">obj.<span class="title function_">b</span>();    <span class="comment">// &#x27;GLOBAL&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这个例子，对象obj的方法a使用普通函数定义的，<strong>普通函数作为对象的方法调用时，this指向它所属的对象</strong>。所以，this.id就是obj.id，所以输出’OBJ’。 但是方法b是使用箭头函数定义的，箭头函数中的this实际是继承的它定义时所处的全局执行环境中的this，所以指向Window对象，所以输出’GLOBAL’。（<strong>这里要注意，定义对象的大括号{}是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中！！</strong>）</p></li><li><p>箭头函数继承而来的this指向永远不变（重要！！深入理解！！）</p><p>上面的例子，就完全可以说明箭头函数继承而来的this指向永远不变。对象obj的方法b是使用箭头函数定义的，这个函数中的this就<strong>永远指向</strong>它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。</p></li><li><p>.call()&#x2F;.apply()&#x2F;.bind()无法改变箭头函数中this的指向</p><p>.call()&#x2F;.apply()&#x2F;.bind()方法可以用来动态修改函数执行时this的指向，但由于箭头函数的this定义时就已经确定且永远不会改变。所以使用这些方法永远也改变不了箭头函数this的指向，虽然这么做代码不会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"><span class="comment">// 箭头函数定义在全局作用域</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun1</span>();     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line"><span class="comment">// this的指向不会改变，永远指向Window对象</span></span><br><span class="line">fun1.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun1.<span class="title function_">apply</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);    <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun1.<span class="title function_">bind</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;)();   <span class="comment">// &#x27;Global&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数不能作为构造函数使用</p><p>我们先了解一下构造函数的new都做了些什么？简单来说，分为四步： ① JS内部首先会先生成一个对象； ② 再把函数中的this指向该对象； ③ 然后执行构造函数中的语句； ④ 最终返回该对象实例。</p><p>但是因为箭头函数没有自己的this，它的this其实是继承了外层执行环境中的this，且this指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用new调用时会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Fun</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Fun</span>(<span class="string">&#x27;cao&#x27;</span>, <span class="number">24</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数没有自己的arguments</p><p>箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层局部（函数）执行环境中的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子一</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val);   <span class="comment">// 111</span></span><br><span class="line">    <span class="comment">// 下面一行会报错</span></span><br><span class="line">    <span class="comment">// Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line">    <span class="comment">// 因为外层全局环境没有arguments对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); </span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params">val1, val2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> argOut = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(argOut);    <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> argIn = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(argIn);     <span class="comment">// ②</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(argOut === argIn);  <span class="comment">// ③</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>(<span class="number">111</span>, <span class="number">222</span>);</span><br></pre></td></tr></table></figure><p>上面例子二，①②③处的输出结果如下：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122153287/E7FCE80FDDB9FFE3A2590AE7A84AC3E1" alt="img"></p><p>很明显，普通函数outer内部的箭头函数fun中的arguments对象，其实是沿作用域链向上访问的外层outer函数的arguments对象。</p><p><strong>可以在箭头函数中使用rest参数代替arguments对象，来访问箭头函数的参数列表！！</strong></p></li><li><p>箭头函数没有原型prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">sayHi</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World !&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数不能用作Generator函数，不能使用yeild关键字</p></li></ol><h4 id="6-2-ES6新特性"><a href="#6-2-ES6新特性" class="headerlink" title="6.2 ES6新特性"></a>6.2 ES6新特性</h4><p><strong>参考答案：</strong></p><ol><li><p>变量和作用域</p><p>1.1 let 、const、 块级作用域和变量声明</p><p>let声明的变量<strong>只在所在块中生效</strong>；</p><p>let声明的变量可以解决var与for循环结合使用产生的无法取得最新变量值的问题（以往都需要通过闭包来解决这个问题）；</p><p>let声明的变量<strong>不存在变量提升</strong>（从undefined-&gt;ReferenceError，其实也是一种暂时性死区）、会造成<strong>变量暂时性死区</strong>(在声明let变量之前都不能用它)、也不允许重复声明；</p><p>const声明的变量行为与let类似，只是多了<strong>两点更强的约束：1.声明时必须赋值；2.声明的变量内存地址不可变，需要注意的是</strong>：对于用const声明基本类型，值就保存在内存地址之中，意味着变量不可重新赋值；对于用const声明的对象，对象内容还是可以更改的，只是不能改变其指向。（冻结对象应该用Object.freeze()）</p><p>1.2 解构赋值（按照一定的结构解析出来进行赋值）</p><p>解构赋值的使用场景：变量快捷赋值、提取数据、函数参数定义和默认值、遍历某结构</p></li><li><p>原生对象的方法扩展</p><p>2.1 String</p><p>加强了对unicode的支持、支持字符串遍历（后面有讲到实际上是部署了iterator接口）、repeat()等方法的支持、<strong>模板字符串</strong></p><p>2.2 RegExp</p><p>构造函数第一个参数是正则表达式，指定第二个参数不再报错、u修饰符、y修饰符、s修饰符</p><p>2.3 Number</p><p>二进制和八进制新写法、新方法parseInt()、Number.EPSILON极小常量、安全整数、Math新方法</p><p>2.4 Function</p><p><strong>函数参数默认值</strong>、rest参数、<strong>函数内部严格模式</strong>、函数的name属性、<strong>箭头函数</strong></p><p>2.5 Array</p><p><strong>扩展运算符…</strong></p><p>2.6 Object 和 Symbol</p><p>(1) Object对象</p><p>支持<strong>简写</strong>：同名属性K-V可以省略一个、函数声明可以省略function；支持<strong>属性名表达式</strong>、函数名表达 式。（注意：以上2个——表达式和简写不能同时使用）。</p><p>对象的方法的name属性返回方法名，但有几个例外情况要小心。新增了Object方法</p><p>Object.is()——用于解决&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的部分兼容问题</p><p>Object.assign()——将src的所有可枚举对象属性复制到dest对象上（浅复制）</p><p>Object.setPrototypeOf()、Object.getPrototypeOf() (Object.__proto属性)</p><p>Object.entries()、Object.keys()、Object.values()</p><p>ES6中5种遍历对象属性的方法</p><p><strong>for-in——自身和继承的可枚举属性（除Symbol）</strong></p><p><strong>Object.keys()——自身非继承的可枚举属性（除Symbol）</strong></p><p><strong>Object.getOwnPropertyNames()——自身所有属性键名（包括不可枚举、除Symbol）</strong></p><p><strong>Object.getOwnPropertySymbols()——自身的所有 Symbol 属性的键名</strong></p><p><strong>Reflect.ownKeys()——自身的所有键名</strong></p><p>（2）Symbol类型</p><p>ES5以前，对象属性都只能是字符串，容易造成重命名导致的冲突。Symbol提供了一种机制，可以保存 属性名是独一无二的。Symbol类型的使用注意：1）创建是调用函数，而不是new关键字 2）Symbol类 型的属性不会被for-*、Object.keys()、Object.getPropertyNames()返回，可以用后面两种方法遍历。</p></li><li><p>数据结构Set和Map</p><p>Set是一种类似数组的数据结构，区别在于其存储的成员都是不重复的，由此带来了它的一个应用就是：<strong>去重</strong>。Set通过new关键字实例化，入参可以是数组or类数组的对象。</p><p>值得注意的是：在Set中，只能存储一个NaN，<strong>这说明在Set数据结构中，NaN等于NaN</strong>。</p><p>Set实例的方法：操作方法add()、delete()、has()和clear()；遍历方法：keys()、values()、entries()和forEach();扩展运算符…、数组方法map()、filter()方法也可以用于Set结构。由此它可以很方便的实现数组的交、并、差集。</p><p>WeakSet类似于Set，<strong>主要区别在于1.成员只能是对象类型；2.对象都是弱引用</strong>（如果其他对象都不再引用该对象，垃圾回收机制会自动回收该对象所占的内存，不可预测何时会发生，故WeakSet不可被遍历）</p><p>JavaScript对象Object都是键值K-V对的集合，但K取值只能是字符串和Symbol，Map也是K-V的集合，然而其K可以取任意类型。如果需要键值对的集合，Map比Object更适合。Map通过new关键字实例化。</p><p>Map实例的方法：set()、get()、has()、delete()和clear();遍历方法同Set。</p><p>Map与其它数据结构的互相转换：Map &lt;—&gt; 数组| Map &lt;—&gt; 对象| Map &lt;—&gt; JSON。</p><p>WeakMap类似于Map，主要区别在于：<strong>1.只接受对象作为键名；2.键名所指向的对象不计入垃圾回收机制</strong>。</p></li><li><p>元编程相关Proxy和Reflect</p><p>4.1 Proxy</p><p>对目标对象加一层“拦截”（“代理”），外界对对象的访问、修改都必须先通过这层拦截层。因而它提供了 一个机制可以对外界的访问进行过滤和改写。</p><p>用法：var proxy &#x3D; new Proxy(p1,p2); p1是要被代理的目标对象，p2是配置对象。</p><p>值得注意的是：<strong>Proxy不是对目标对象透明的代理</strong>——即使不做任何拦截的情况下无法保证代理对象与目 标对象行为的完全一致。（主要原因在于代理时，目标对象内部的this会指向代理对象）</p><p>4.2 Reflect</p><p>与Proxy一样是ES6为<strong>语言层面的用于操作对象提供的新API</strong>，目前它所拥有的对象方法与Proxy对象一一对 应，<strong>引入目的</strong>：1.将Object对象上一些属于语言内部的方法放在Reflect上（目前都可以放）2.修改Object对 象上某些方法的返回值，使得更加合理化（健壮）3.让Object对象的操作从命令式完全转化为函数式</p></li><li><p>异步编程Promise、Generator和Async</p><p>在JavaScript的世界里，对于<strong>异步编程存在如下几种方案：1.回调函数；2.事件触发监听；3.发布订阅者模式；4.Promise</strong>。首先介绍Promise，然后介绍ES6提供的生成器函数，async函数。</p><p>Promise来源于社区，代表一个对象，它代表异步操作未来的一个结果（承诺）。它总共有<strong>三个状态</strong>，pending\fulfilled\rejected。另外，它的状态<strong>翻转路径只有两个</strong>：pending-&gt;fulfilled or pending-&gt;rejected，一旦状态翻转，就不可变了。它支持链式调用，支持错误传递，支持以同步代码的方式写异步操作。</p><p>Promise是一个对象，创建此对象实例的方法如下（可以理解resolve和reject是已返回的承诺对象未来回调函数的占位）</p><p>Generator函数是ES6提供的异步编程解决方案。对于Generator函数，可以将它<strong>理解为一个状态机，封装了多个内部状态；此外它还是一个遍历器生成函数</strong>，这个函数可以遍历出状态机的所有状态。</p><p>函数特征：关键字function与函数名之间有*，函数体内部yeild关键字。</p><p><strong>生成器函数与普通函数的区别</strong>：函数调用后不执行，而是返回一个指针对象（遍历器对象）。调用对象的next()方法，执行一段yield逻辑。故函数的分段执行的，<strong>yield是暂停执行的标志，next()可以恢复执行</strong>。</p><p><strong>yield与return的区别</strong>：yield有记忆功能，return没有；一个函数可以多次执行yeild，但只会return一次</p><p><strong>async函数</strong>是Generator函数的语法糖，它进行了<strong>改进：1.自带执行器；2.返回值是Promise;</strong></p><p>三家对比：<strong>使用Promise的异步代码存在大量自有API的调用，操作本身的语义夹杂其中，不是很清晰；Generator函数实现的异步代码语义比Promise清晰，但需要一个执行器；async函数的写法最简洁、符合语义，不需要执行器</strong>。</p></li><li><p>语言层面类、模块的支持</p><p>6.1 class</p><p>从 ES6 开始，JavaScript 提供了 class 关键字来定义类，尽管，这样的方案仍然是基于原型运行时系统的模拟，大部分功能ES5可以实现。</p><p>构造函数的prototype属性在 ES6 的“类”上面继续存在。事实上，类中所有方法都定义在类的prototype属性上面（因而也是不可枚举的）。</p><p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。（默认构造函数）；constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</p><p>注意区别：<strong>类必须使用</strong>new<strong>调用，否则会报错</strong>。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p><p>实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。</p><p>私有属性和方法如何实现？1.命名上加以区别 2.将私有方法移出模块，利用公有方法调用；3.Symbol属性上（都不完美）</p><p>6.2 module</p><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 模块的设计思想是尽量的静态化，使得<strong>编译时就能确定</strong>模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在<strong>运行时确定。</strong></p><p><strong>编译时加载VS运行时加载——对象VS代码</strong></p><p>模块命令：export和import；一个文件即为一个模块，除非导入否则外部无法读取模块属性；</p><p>export支持：变量、函数和类</p><p>export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下一节的import命令也是如此。</p><p>输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。</p><p>使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。</p><p>模块之间也可以继承。</p></li><li><p>JS中对象分类、及其它原生对象</p></li><li><p>Iterator</p><p>ES6之前在JS中只有Array和对象可以表示“集合”这种数据结构，ES6中增加了：Set和Map。由此，四种之间互相组合又可以定义新的数据结构。这些<strong>新定义的数据结构如何访问呢？遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制</strong>。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。遍历器对象本质上是一个指针对象。</p><p>只要为某个数据结构部署 了Iterator接口，则可以称此数据结构是可遍历的。iterator属性部署在Symbol上。如下对象默认部署了Iterator结口：Array Set Map String等。部署iterator结构的<strong>要点：1）在Symbol.iterator上部署；2）必须包含next()函数</strong>。默认调用iterator接口的场景：解构赋值、…扩展运算符、yeild* 。for-of循环内部调用的即是调用数据机构内部的Symbol.iterator方法。</p><p><strong>for-in和for-of循环</strong></p><p>for-in用于遍历对象属性，对象自身和继承的可枚举属性（不可遍历Symbol属性）</p><p>for-of循环是一种遍历所有数据机构的统一方法。实现原理是数据结构上部署的Symbol.iterator属性。</p></li></ol><h4 id="6-3-ES6-与-ES5-继承的区别"><a href="#6-3-ES6-与-ES5-继承的区别" class="headerlink" title="6.3 ES6 与 ES5 继承的区别"></a>6.3 ES6 与 ES5 继承的区别</h4><p><strong>参考答案：</strong></p><p>ES6 中有类 class 的概念，类 class 的继承是通过 extends 来实现的，ES5 中是通过设置构造函数的 prototype 属性，来实现继承的。</p><p>ES6 与 ES5 中的继承有 2 个区别，第一个是，ES6 中子类会继承父类的属性，第二个区别是，super() 与 A.call(this) 是不同的，在继承原生构造函数的情况下，体现得很明显，ES6 中的子类实例可以继承原生构造函数实例的内部属性，而在 ES5 中做不到。</p><p><strong>解析：</strong></p><p>下面通过 3 个 demo，来分析它们之间的区别。</p><ol><li>ES5 继承</li></ol><p>直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;</span><br><span class="line">  A.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">b</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(A.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">constructor</span>: &#123; <span class="attr">value</span>: B, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br></pre></td></tr></table></figure><p>代码中，构造函数 B 继承构造函数 A，首先让构造函数 B 的 prototype 对象中的 <strong>proto</strong> 属性指向构造函数 A 的 prototype 对象，并且将构造函数 B 的 prototype 对象的 constructor 属性赋值为构造函数 B，让构造函数 B 的实例继承构造函数 A 的原型对象上的属性，然后在构造函数 B 内部的首行写上 A.call(this)，让构造函数 B 的实例继承构造函数 A 的实例属性。在 ES5 中实现两个构造函数之间的继承，只需要做这两步即可。下面六幅图分别是，实例 b 的原型链及验证图，构造函数 B 的原型链及验证图，构造函数 A 的原型链及验证图。</p><p>实例 b 的原型链如下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122217808/5EFC2E2CCA7CF0C0ED3AF97C57C347E8" alt="img">实例 b 的原型链验证图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122220782/6C8BA735DC6D2FB3DA6EF1492C8C8AC9" alt="img">构造函数 B 的原型链图下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122228075/C639481859D093429EF31DB41F59479D" alt="img">构造函数 B 的原型链验证图图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122231723/E8833975C1CE1CF00A9497C875FC5D1C" alt="img">构造函数 A 的原型链图下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122234815/8F1CBB5E756E67FF00FA75B75E1198FD" alt="img">构造函数 B 的原型链验证图图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122238414/AC9C448D0E52381CD7FF458F89369FC3" alt="img">从上面 6 幅图可知，构造函数 B 的实例 b 继承了构造函数 A 的实例属性，继承了构造函数 A 的原型对象上的属性，继承了构造函数 Object 的原型对象上的属性。构造函数 B 是构造函数 Function 的实例，继承了构造函数 Function 的原型对象上的属性，继承了构造函数 Object 的原型对象上的属性。 构造函数 A 是构造函数 Function 的实例，继承了构造函数 Function 的原型对象上的属性，继承了构造函数 Object 的原型对象上的属性。可看出，构造函数 A 与 构造函数 B 并没有继承关系，即构造函数 B 没有继承构造函数 A 上面的属性，在 ES6 中，用 extends 实现两个类的继承，两个类之间是有继承关系的，即子类继承了父类的方法，这是 ES6 与 ES5 继承的第一点区别，下面通过 ES6 的继承来说明这一点。</p><ol><li>ES6 继承</li></ol><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br></pre></td></tr></table></figure><p>代码中，类 B 通过 extends 关键字继承类 A 的属性及其原型对象上的属性，通过在类 B 的 constructor 函数中执行 super() 函数，让类 B 的实例继承类 A 的实例属性，super() 的作用类似构造函数 B 中的 A.call(this)，但它们是有区别的，这是 ES6 与 ES5 继承的第二点区别，这个区别会在文章的最后说明。在 ES6 中，两个类之间的继承就是通过 extends 和 super 两个关键字实现的。下面四幅图分别是，实例 b 的原型链及验证图，类 B 的原型链及验证图。</p><p>实例 b 的原型链如下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122309797/9D874024A07AB6BF3720EBE76D8B1B5F" alt="img">实例 b 的原型链验证图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122312826/B0B23709AD1D39BCF215957AC3BE3D76" alt="img">类 B 的原型链图下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122317746/A439A948D436C4F8564F01CFC41DA1F6" alt="img">类 B 的原型链验证图图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122320015/0ABB20677FEF4799600D633AA631D9E1" alt="img">通过上面 4 幅图可知，在 ES6 与 ES5 中，类 B 的实例 b 的原型链与构造函数 B 的实例 b 的原型链是相同的，但是在 ES6 中类 B 继承了类 A 的属性，在 ES5 中，构造函数 B 没有继承构造函数 A 的属性，这是 ES6 与 ES5 继承的第一个区别。</p><ol><li>super() 与 A.call(this) 的区别</li></ol><p>在 ES5 中，构造函数 B 的实例继承构造函数 A 的实例属性是通过 A.call(this) 来实现的，在 ES6 中，类 B 的实例继承类 A 的实例属性，是通过 super() 实现的。在不是继承原生构造函数的情况下，A.call(this) 与 super() 在功能上是没有区别的，用 <a href="https://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=es2015,react,stage-2&targets=&browsers=&builtIns=false&debug=false&code=">babel 在线转换</a> 将类的继承转换成 ES5 语法，babel 也是通过 A.call(this) 来模拟实现 super() 的。但是在继承原生构造函数的情况下，A.call(this) 与 super() 在功能上是有区别的，ES5 中 A.call(this) 中的 this 是构造函数 B 的实例，也就是在实现实例属性继承上，ES5 是先创造构造函数 B 的实例，然后在让这个实例通过 A.call(this) 实现实例属性继承，在 ES6 中，是先新建父类的实例对象this，然后再用子类的构造函数修饰 this，使得父类的所有行为都可以继承。下面通过 2 段代码说明这个问题。</p><p>代码 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ArrFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ArrFun</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">constructor</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">ArrFun</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">ArrFun</span>();</span><br><span class="line">colors[<span class="number">0</span>] = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">colors.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>这段代码的思路就是，让构造函数 MyArray 继承原生构造函数 Array，然后验证 MyArray 的实例是否具有 Array 实例的特性。</p><p>代码 1 执行结果如下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122344778/E7ADAE3D4C812A6291404B1DD673DFB2" alt="img">从结果可以看出，MyArray 的实例并不具有 Array 实例的特性，之所以会发生这种情况，是因为 MyArray 的实例无法获得原生构造函数 Array 实例的内部属性，通过 Array.call(this) 也不行。</p><p>代码 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrFun</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">ArrFun</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line">arr.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><p>代码 2 执行结果如下图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646122353819/063DA15897F5D57767350A0B04B81839" alt="img"></p><p>从结果可以看出，通过 super()，MyArray 的实例具有 Array 实例的特性。</p><h4 id="6-4-哪些类型能被扩展操作符…扩展"><a href="#6-4-哪些类型能被扩展操作符…扩展" class="headerlink" title="6.4 哪些类型能被扩展操作符…扩展"></a>6.4 哪些类型能被扩展操作符…扩展</h4><p><strong>参考答案：</strong></p><p><strong>适用类型</strong>：数组、对象、字符串。</p><p>复杂数据类型都可以，当要转化为可迭代数据结构时可设置对象的迭代器对扩展运算符扩展出来的值进行操作。</p><p>基础数据只有string可以使用扩展运算符，number,boolean,null,undefined无效</p><h4 id="6-5-事件扩展符用过吗-…-，什么场景下"><a href="#6-5-事件扩展符用过吗-…-，什么场景下" class="headerlink" title="6.5 事件扩展符用过吗(…)，什么场景下"></a>6.5 事件扩展符用过吗(…)，什么场景下</h4><p><strong>参考答案：</strong></p><p><strong>扩展运算符的应用场景</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(...[<span class="number">4</span>, <span class="number">38</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">v, w, x, y, z</span>) &#123;  &#125;</span><br><span class="line"><span class="title function_">f</span>(-<span class="number">1</span>, ...[<span class="number">0</span>, <span class="number">1</span>], <span class="number">2</span>, ...[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 123456789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.往数组里push多个元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">//[0,1,2,3,4,5]</span></span><br><span class="line"><span class="comment">//123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.替代函数的apply方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y, z</span>) &#123;  &#125;  </span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, args); <span class="comment">//ES5 的写法</span></span><br><span class="line"><span class="title function_">f</span>(...args); <span class="comment">//ES6的写法</span></span><br><span class="line"><span class="comment">// 123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.求一个数组的最大数简化</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])  <span class="comment">//ES5 的写法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])  <span class="comment">//ES6 的写法，等同于Math.max(14, 3, 77)</span></span><br><span class="line"><span class="comment">//1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.扩展运算符后面可以放表达式</span></span><br><span class="line"><span class="keyword">const</span> arr = [...(<span class="number">5</span> &gt; <span class="number">0</span> ? [<span class="string">&#x27;a&#x27;</span>] : []),<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">//[&#x27;a&#x27;,&#x27;b&#x27;] </span></span><br><span class="line"><span class="comment">//1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.与解构赋值结合，用于生成数组</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];  <span class="comment">//写法1</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;  <span class="comment">//写法2</span></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first  <span class="comment">//1</span></span><br><span class="line">rest  <span class="comment">//[2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first  <span class="comment">//undefined</span></span><br><span class="line">rest  <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">&quot;foo&quot;</span>];</span><br><span class="line">first  <span class="comment">//&quot;foo&quot;</span></span><br><span class="line">rest   <span class="comment">//[]</span></span><br><span class="line"><span class="comment">//1234567891011121314151617</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]  <span class="comment">//[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//8.数组的克隆——————————————————————特别注意</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr1];</span><br><span class="line">arr1[<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[0, 1, 2]  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 乍一看，arr2与arr1不共用引用地址，arr2不随着arr1变化，接着往下看 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, [<span class="number">1</span>,<span class="number">11</span>,<span class="number">111</span>], <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr1];</span><br><span class="line">arr1[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">//[0, [100,11,111], 2]</span></span><br></pre></td></tr></table></figure><h4 id="6-6-让不同的浏览器兼容ES6的方法"><a href="#6-6-让不同的浏览器兼容ES6的方法" class="headerlink" title="6.6 让不同的浏览器兼容ES6的方法"></a>6.6 让不同的浏览器兼容ES6的方法</h4><p><strong>参考答案：</strong></p><p>针对 ES6 的兼容性问题，很多团队为此开发出了多种语法解析转换工具，把我们写的 ES6 语法转换成 ES5，相当于在 ES6 和浏览器之间做了一个翻译官。比较通用的工具方案有 babel，jsx，traceur，es6-shim 等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;6-1-es6中箭头函数&quot;&gt;&lt;a href=&quot;#6-1-es6中箭头函数&quot; class=&quot;headerlink&quot; title=&quot;6.1 es6中箭头函数&quot;&gt;&lt;/a&gt;6.1 es6中箭头函数&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://dont-sleep-so-late.github.io/tags/JavaScript/"/>
    
    <category term="八股文" scheme="https://dont-sleep-so-late.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="https://dont-sleep-so-late.github.io/2024/04/01/js/js%E5%9F%BA%E7%A1%80/"/>
    <id>https://dont-sleep-so-late.github.io/2024/04/01/js/js%E5%9F%BA%E7%A1%80/</id>
    <published>2024-04-01T03:31:15.000Z</published>
    <updated>2024-04-03T04:51:27.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p><strong>参考答案：</strong></p><h3 id="1-利用ES6-Set去重（ES6中最常用）"><a href="#1-利用ES6-Set去重（ES6中最常用）" class="headerlink" title="1. 利用ES6 Set去重（ES6中最常用）"></a><strong>1. 利用ES6 Set去重（ES6中最常用）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"> <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><p>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</p><h3 id="2-利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#2-利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="2. 利用for嵌套for，然后splice去重（ES5中最常用）"></a><strong>2. 利用for嵌套for，然后splice去重（ES5中最常用）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><p>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</p><h3 id="3-利用indexOf去重"><a href="#3-利用indexOf去重" class="headerlink" title="3. 利用indexOf去重"></a><strong>3. 利用indexOf去重</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">   <span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</p><h3 id="4-利用sort"><a href="#4-利用sort" class="headerlink" title="4. 利用sort()"></a><strong>4. 利用sort()</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</p><h3 id="5-利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"><a href="#5-利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）" class="headerlink" title="5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"></a><strong>5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">     <span class="keyword">var</span>  obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]    //两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h3 id="6-利用includes"><a href="#6-利用includes" class="headerlink" title="6. 利用includes"></a><strong>6. 利用includes</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">                    array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="7-利用hasOwnProperty"><a href="#7-利用hasOwnProperty" class="headerlink" title="7. 利用hasOwnProperty"></a><strong>7. 利用hasOwnProperty</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span></span><br></pre></td></tr></table></figure><p>利用hasOwnProperty 判断是否存在对象属性</p><h3 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8. 利用filter"></a><strong>8. 利用filter</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="9-利用递归去重"><a href="#9-利用递归去重" class="headerlink" title="9. 利用递归去重"></a><strong>9. 利用递归去重</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> array= arr;</span><br><span class="line">        <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>])&#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="10-利用Map数据结构去重"><a href="#10-利用Map数据结构去重" class="headerlink" title="10. 利用Map数据结构去重"></a><strong>10. 利用Map数据结构去重</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">      array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><p>创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</p><h3 id="11-利用reduce-includes"><a href="#11-利用reduce-includes" class="headerlink" title="11. 利用reduce+includes"></a><strong>11. 利用reduce+includes</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="12-…new-Set-arr"><a href="#12-…new-Set-arr" class="headerlink" title="12. […new Set(arr)]"></a><strong>12. […new Set(arr)]</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)] </span><br><span class="line"><span class="comment">//代码就是这么少----（其实，严格来说并不算是一种，相对于第一种方法来说只是简化了代码）</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组去重&quot;&gt;&lt;a href=&quot;#数组去重&quot; class=&quot;headerlink&quot; title=&quot;数组去重&quot;&gt;&lt;/a&gt;数组去重&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-利用ES6-Set去重（ES6中最常用）&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaSciprt" scheme="https://dont-sleep-so-late.github.io/tags/JavaSciprt/"/>
    
    <category term="Array" scheme="https://dont-sleep-so-late.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>图床</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/17/%E5%9B%BE%E5%BA%8A/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/17/%E5%9B%BE%E5%BA%8A/</id>
    <published>2024-03-16T18:20:03.000Z</published>
    <updated>2024-04-03T04:49:36.232Z</updated>
    
    <content type="html"><![CDATA[<p>1.路过图床</p><p>地址：<a href="https://imgse.com/">https://imgse.com/</a></p><p>介绍：国内比较知名的图床，用户使用较多的图床工具之一，免费，但是页面有少量广告。高速稳定的图片上传和外链服务，全球CDN加速，最大单张支持 10 MB，支持批量上传。不过在上传之后，展现的预览和编辑，需要二次确认之后才能上传进行使用，有点繁琐。</p><p><img src="https://pics2.baidu.com/feed/9f510fb30f2442a735ced61f1aa7be47d31302bc.jpeg@f_auto?token=7780c38bd968c07ca4f8c7aa03f0dc36" alt="img"></p><p>2.聚合图床</p><p>地址：<a href="https://www.superbed.cn/">https://www.superbed.cn/</a></p><p>介绍：聚合图床依托于七牛腾讯阿里云等，用户可以自己选择上传策略，上传图片：可选jpg&#x2F;png&#x2F;bmp&#x2F;webp等所有支持的图片格式，可批量上传。没有流量限制、速度也可以，关键是不需要各种设置，很适合不爱折腾的朋友使用，上手难度很低，是目前图床的新势力。</p><p><img src="https://pics6.baidu.com/feed/4d086e061d950a7b7e38b3a9c03571d5f3d3c9bb.jpeg@f_auto?token=81f7ca2de23cb3240befdbce8cc21c5e" alt="img"></p><p>3.遇见图床</p><p>地址：<a href="https://www.hualigs.cn/">https://www.hualigs.cn/</a></p><p>介绍：遇见图床是一款集合31款图床唯一个的多图床工具。支持用户自定义图片水印、自定义，Github 等第三方私人储存，上传支持文字水印等功能。</p><p><img src="https://pics5.baidu.com/feed/21a4462309f79052ecb79e57c617c4c67acbd524.jpeg@f_auto?token=0fe5a25ab42c26d05cac718dda689309" alt="img"></p><p>4.老王图床（又称鸡霸图床）</p><p>地址：<a href="https://img.gejiba.com/">https://img.gejiba.com/</a></p><p>介绍：无需注册，可以上传 JPG PNG BMP GIF WEBP 等格式，支是国内服务器和 CDN，图片加载速度教快。</p><p><img src="https://pics3.baidu.com/feed/b151f8198618367ac71b596be49798d8b11ce5e2.jpeg@f_auto?token=204a4bcf94d471233d1870832a7ea69b" alt="img"></p><p>5.小鸭图床</p><p>地址：<a href="http://image.kypeople.cn/">http://image.kypeople.cn/</a></p><p>介绍：依托于腾讯云储存与CDN加速，国内访问速度还可以，单个最大上传4M。</p><p><img src="https://pics0.baidu.com/feed/10dfa9ec8a1363271d01395d5a6bb3e00afac7e5.jpeg@f_auto?token=5a1de9f15638e0f547735c0f451464dd" alt="img"></p><p>6.TG图床</p><p>地址：<a href="https://imgtg.com/">https://imgtg.com/</a></p><p>介绍：多年老图床，有国内百度云cdn节点加速，在上传测试中，GIF上传速度约 2 秒。图片上传限制：每个图片最大5M。</p><p><img src="https://pics6.baidu.com/feed/4bed2e738bd4b31c965f813c493234739c2ff8c2.jpeg@f_auto?token=5246162d00e6402b2b61bf6008d3b94e" alt="img"></p><p>7.moeto图床</p><p>地址：<a href="https://moetu.org/">https://moetu.org/</a></p><p>介绍：免费，图片上传限制：每个图片最大20M。moetu图床除了连接稳定上传外，还支持图片分类、搜索等功能。亲测网站打开有一些缓慢，。</p><p><img src="https://pics6.baidu.com/feed/6d81800a19d8bc3e79803459496fb512aad3458d.jpeg@f_auto?token=896be0f0ca905f593b181ca64b73a841" alt="img"></p><p>8.七喜图床</p><p>地址：<a href="https://7up.pics/">https://7up.pics/</a></p><p>介绍：一个小众图床，使用体验还可以，速度较快，单个最大上传5M。</p><p><img src="https://pics2.baidu.com/feed/7e3e6709c93d70cf37f449bb3238c20cbba12b6e.jpeg@f_auto?token=89c4034fa268a42f8f0ac8ad3292220b" alt="img"></p><p>9.Z4A图床</p><p>地址：<a href="https://www.z4a.net/">https://www.z4a.net/</a></p><p>介绍：需要注册才能使用，速度较快，支持 JPG PNG BMP GIF WEBP 等格式，照片最大可上传64M。</p><p><img src="https://pics4.baidu.com/feed/b7fd5266d016092487d746ad1ae326f6e4cd3482.jpeg@f_auto?token=081aff668d129505619dbefe2af2de2e" alt="img"></p><p>10.图仓</p><p>地址：<a href="https://www.imagehub.cc/">https://www.imagehub.cc/</a></p><p>介绍：免费图片托管,专业图片外链,免费图床,公益图床,免费相册,支持相册加密,支持图片批量上传,原图保存,不限空间,不限流量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.路过图床&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&quot;https://imgse.com/&quot;&gt;https://imgse.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;介绍：国内比较知名的图床，用户使用较多的图床工具之一，免费，但是页面有少量广告。高速稳定的图片上传和外链服务，全球CDN加</summary>
      
    
    
    
    <category term="网站推荐" scheme="https://dont-sleep-so-late.github.io/categories/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站推荐" scheme="https://dont-sleep-so-late.github.io/tags/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue遇到的问题</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/10/Vue/vue%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/10/Vue/vue%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-03-10T01:17:15.000Z</published>
    <updated>2024-03-16T08:10:44.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-router-配置-component-报错-TypeError-Cannot-use-‘in’-operator-to-search-for-‘catch’-in-undefined"><a href="#vue-router-配置-component-报错-TypeError-Cannot-use-‘in’-operator-to-search-for-‘catch’-in-undefined" class="headerlink" title="vue router 配置 component 报错 TypeError: Cannot use ‘in’ operator to search for ‘catch’ in undefined"></a>vue router 配置 component 报错 TypeError: Cannot use ‘in’ operator to search for ‘catch’ in undefined</h1><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>在配置路由文件时，开始时component不小心写成下面的格式</p><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240316160919.png"></p><p>打开页面控制台报错如下<br><img src="https://img2024.cnblogs.com/blog/1857566/202401/1857566-20240125155259068-1305464985.png" alt="image"></p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>引入组件的箭头函数忘记写返回<br><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1857566-20240125155440938-641076154.png"><br>或者写成一行<br><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1857566-20240125155334913-156267822.png"></p><blockquote><p>相当低级的错误。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue-router-配置-component-报错-TypeError-Cannot-use-‘in’-operator-to-search-for-‘catch’-in-undefined&quot;&gt;&lt;a href=&quot;#vue-router-配置-component-</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="https://dont-sleep-so-late.github.io/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://dont-sleep-so-late.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vue3 封装一些有用的组合 API</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/09/Vue/%E4%BD%BF%E7%94%A8%20Vue3%20%E5%B0%81%E8%A3%85%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%84%E5%90%88%20API/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/09/Vue/%E4%BD%BF%E7%94%A8%20Vue3%20%E5%B0%81%E8%A3%85%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%84%E5%90%88%20API/</id>
    <published>2024-03-09T08:20:15.000Z</published>
    <updated>2024-03-10T06:02:57.482Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何使用Vue3来封装一些比较有用的组合API，主要包括背景、实现思路以及一些思考。</p><p>就我自己的感觉而言，<code>Hook</code>与<code>Composition API</code>概念是很类似的，事实上在React大部分可用的Hook都可以使用Vue3再实现一遍。</p><p>为了拼写方便，下文内容均使用Hook代替<code>Composition API</code>。</p><h2 id="useRequest"><a href="#useRequest" class="headerlink" title="useRequest"></a>useRequest</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>使用hook来封装一组数据的操作是很容易的，例如下面的<code>useBook</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref, onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useBook</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="title function_">ref</span>([])</span><br><span class="line">    <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetchBookList</span>(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;)</span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">        list.<span class="property">value</span> = data</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">getList</span>()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        list,</span><br><span class="line">        loading,</span><br><span class="line">        getList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中封装了获取资源、处理加载状态等逻辑，看起来貌似能满足我们的需求了</p><p>缺点在于对应另外一个资源而言，我们貌似还需要写类似的模板代码，因此可以将这一堆代码进行抽象，封装成<code>useApi</code>方法</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useApi</span>(<span class="params">api</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchResource</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">api</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 按照约定，api返回的结果直接复制给result</span></span><br><span class="line">            result.<span class="property">value</span> = data</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            error.<span class="property">value</span> = e</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        loading,</span><br><span class="line">        error,</span><br><span class="line">        result,</span><br><span class="line">        fetchResource</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改上面的<code>useBook</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useBook2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;loading, error, result, fetchResource,&#125; = <span class="title function_">useApi</span>(fetchBookList)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetchResource</span>(&#123;<span class="attr">page</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        loading,</span><br><span class="line">        error,</span><br><span class="line">        <span class="attr">list</span>: result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这是一个非常通用的方法，假设现在需求封装其他的请求，处理起来也是非常方便的，不需要再一遍遍地处理loading和error等标志量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUserList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> payload = &#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="attr">data</span>: [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>],</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">resolve</span>(payload)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;loading, error, result, fetchResource,&#125; = <span class="title function_">useApi</span>(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 封装请求返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetchUserList</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>处理网络请求是前端工作中十分常见的问题，处理上面列举到的加载、错误处理等，还可以包含去抖、节流、轮询等各种情况，还有离开页面时取消未完成的请求等，都是可以在<code>useRequest</code>中进一步封装的</p><h2 id="useEventBus"><a href="#useEventBus" class="headerlink" title="useEventBus"></a>useEventBus</h2><p>EventBus在多个组件之间进行事件通知的场景下还是比较有用的，通过监听事件和触发事件，可以在订阅者和发布者之间解耦，实现一个常规的eventBus也比较简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">eventMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">key, cb</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> handlers = <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">get</span>(key)</span><br><span class="line">        <span class="keyword">if</span> (!handlers) &#123;</span><br><span class="line">            handlers = []</span><br><span class="line">        &#125;</span><br><span class="line">        handlers.<span class="title function_">push</span>(cb)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">set</span>(key, handlers)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">key, cb</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">get</span>(key)</span><br><span class="line">        <span class="keyword">if</span> (!handlers) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">            <span class="keyword">const</span> idx = handlers.<span class="title function_">indexOf</span>(cb)</span><br><span class="line">            idx &gt; -<span class="number">1</span> &amp;&amp; handlers.<span class="title function_">splice</span>(idx, <span class="number">1</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">set</span>(key, handlers)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">delete</span>(key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">once</span>(<span class="params">key, cb</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handlers = [<span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">cb</span>(payload)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">off</span>(key)</span><br><span class="line">        &#125;]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">set</span>(key, handlers)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">key, payload</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">get</span>(key)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(handlers)) <span class="keyword">return</span></span><br><span class="line">        handlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">handler</span>(payload)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在组件初始化时监听事件，在交互时触发事件，这些是很容易理解的；但很容易被遗忘的是，我们还需要在组件卸载时取消事件注册，释放相关的资源。</p><p>因此可以封装一个<code>useEventBus</code>接口，统一处理这些逻辑</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>既然要在组件卸载时取消注册的相关事件，简单的实现思路是：只要在注册时(<code>on</code>和<code>once</code>)收集相关的事件和处理函数，然后在<code>onUnmounted</code>的时候取消(<code>off</code>)收集到的这些事件即可</p><p>因此我们可以劫持事件注册的方法，同时额外创建一个<code>eventMap</code>用于收集使用当前接口注册的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件总线，全局单例</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">EventBus</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useEventBus</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> instance = &#123;</span><br><span class="line">        <span class="attr">eventMap</span>: <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">        <span class="comment">// 复用eventBus事件收集相关逻辑</span></span><br><span class="line">        <span class="attr">on</span>: bus.<span class="property">on</span>,</span><br><span class="line">        <span class="attr">once</span>: bus.<span class="property">once</span>,</span><br><span class="line">        <span class="comment">// 清空eventMap</span></span><br><span class="line">        <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">list, key</span>) =&gt;</span> &#123;</span><br><span class="line">                list.<span class="title function_">forEach</span>(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">                    bus.<span class="title function_">off</span>(key, cb)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            eventMap.<span class="title function_">clear</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> eventMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="comment">// 劫持两个监听方法，收集当前组件对应的事件</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">on</span> = (<span class="params">key, cb</span>) =&gt; &#123;</span><br><span class="line">        instance.<span class="title function_">on</span>(key, cb)</span><br><span class="line">        bus.<span class="title function_">on</span>(key, cb)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">once</span> = (<span class="params">key, cb</span>) =&gt; &#123;</span><br><span class="line">        instance.<span class="title function_">once</span>(key, cb)</span><br><span class="line">        bus.<span class="title function_">once</span>(key, cb)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件卸载时取消相关的事件</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        instance.<span class="title function_">clear</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        on,</span><br><span class="line">        once,</span><br><span class="line">        <span class="attr">off</span>: bus.<span class="property">off</span>.<span class="title function_">bind</span>(bus),</span><br><span class="line">        <span class="attr">emit</span>: bus.<span class="property">emit</span>.<span class="title function_">bind</span>(bus)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当组价卸载时也会通过<code>instance.clear</code>移除该组件注册的相关事件，比起手动在每个组件<code>onUnmounted</code>时手动取消要方便很多。</p><h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><p>这个思路可以运用在很多需要在组件卸载时执行清理操作的逻辑，比如：</p><ul><li>DOM事件注册<code>addEventListener</code>和<code>removeEventListener</code></li><li>计时器<code>setTimeout</code>和<code>clearTimeout</code></li><li>网络请求<code>request</code>和<code>abort</code></li></ul><p>从这个封装也可以看见组合API一个非常明显的优势：尽可能地抽象公共逻辑，而无需关注每个组件具体的细节</p><h2 id="useModel"><a href="#useModel" class="headerlink" title="useModel"></a>useModel</h2><h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>当掌握了Hook（或者Composition API）之后，感觉万物皆可hook，总是想把数据和操作这堆数据的方法封装在一起，比如下面的计数器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        decrement,</span><br><span class="line">        increment</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>useCounter</code>暴露了获取当前数值count、增加数值decrement和减少数值increment等数据和方法，然后就可以在各个组件中愉快地实现计数器了</p><p>在某些场景下我们希望多个组件可以共享同一个计数器，而不是每个组件自己独立的计数器。</p><p>一种情况是使用诸如vuex等全局状态管理工具，然后修改<code>useCounter</code>的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">setCount</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">            state.<span class="property">count</span> = payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后重新实现<code>useCounter</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> store.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;setCount&#x27;</span>, count.<span class="property">value</span> + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;setCount&#x27;</span>, count.<span class="property">value</span> + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count,</span><br><span class="line">        decrement,</span><br><span class="line">        increment</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，现在的<code>useCounter2</code>仅仅只是store的<code>state</code>与<code>mutations</code>的封装，直接在组件中使用store也可以达到相同的效果，封装就变得意义不大；此外，如果单单只是为了这个功能就为项目增加了vuex依赖，显得十分笨重。</p><p>基于这些问题，我们可以使用一个<code>useModel</code>来实现复用某个钩子状态的需求</p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>整个思路也比较简单，使用一个Map来保存某个hook的状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useModel</span>(<span class="params">hook</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!map.<span class="title function_">get</span>(hook)) &#123;</span><br><span class="line">        <span class="keyword">let</span> ans = <span class="title function_">hook</span>()</span><br><span class="line">        map.<span class="title function_">set</span>(hook, ans)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(hook)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后包装一下<code>useCounter</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCounter3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useModel</span>(useCounter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在多个组件调用</span></span><br><span class="line"><span class="keyword">const</span> &#123;count, decrement, increment&#125; = <span class="title function_">useCounter3</span>()</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> &#123;count, decrement, increment&#125; = <span class="title function_">useCounter3</span>()</span><br></pre></td></tr></table></figure><p>这样，在每次调用<code>useCounter3</code>时，都返回的是同一个状态，也就实现了多个组件之间的hook状态共享。</p><h3 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h3><p><code>userModel</code>提供了一种除<code>vuex</code>和<code>provide()/inject()</code>之外共享数据状态的思路，并且可以很灵活的管理数据与操作数据的方案，而无需将所有state放在一起或者模块下面。</p><p>缺点在于，当不使用<code>useModel</code>包装时，<code>useCounter</code>就是一个普通的hook，后期维护而言，我们很难判断某个状态到底是全局共享的数据还是局部的数据。</p><p>因此在使用<code>useModel</code>处理hook的共享状态时，还要要慎重考虑一下到底合不合适。</p><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p>redux的思想可以简单概括为</p><ul><li>store维护全局的state数据状态，</li><li>各个组件可以按需使用state中的数据，并监听state的变化</li><li><code>reducer</code>接收action并返回新的state，组件可以通过<code>dispatch</code>传递action触发reducer</li><li>state更新后，通知相关依赖更新数据</li></ul><p>我们甚至可以将redux的使用hook化，类似于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">    <span class="comment">// 根据action进行处理</span></span><br><span class="line">    <span class="comment">// 返回新的state</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useReducer</span>(reducer, initialState);</span><br></pre></td></tr></table></figure><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>借助于Vue的数据响应系统，我们甚至不需要实现任何发布和订阅逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useReducer</span>(<span class="params">reducer, initialState = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">ref</span>(initialState)</span><br><span class="line">     <span class="comment">// 约定action格式为 &#123;type:string, payload: any&#125;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dispatch</span> = (<span class="params">action</span>) =&gt; &#123;</span><br><span class="line">        state.<span class="property">value</span> = <span class="title function_">reducer</span>(state.<span class="property">value</span>, action)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        state,</span><br><span class="line">        dispatch</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现一个<code>useRedux</code>负责传递<code>reducer</code>和<code>action</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useReducer <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;reset&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> initialState;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们希望是维护一个全局的store，因此可以使用上面的<code>useModel</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useRedux</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useModel</span>(useStore);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以在组件中使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;dispatch(&#123;type:&#x27;decrement&#x27;&#125;)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; state.count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;dispatch(&#123;type:&#x27;increment&#x27;&#125;)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;useReducer&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useStore</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      state,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      dispatch</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>看起来跟我们上面<code>useModel</code>的例子并没有什么区别，主要是暴露了通用的<code>dispatch</code>方法，在reducer处维护状态变化的逻辑，而不是在每个useCounter中自己维护修改数据的逻辑</p><h3 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h3><p>当然这个redux是非常简陋的，包括中间件、<code>combineReducers</code>、<code>connect</code>等方法均为实现，但也为我们展示了一个最基本的redux数据流转过程。</p><h2 id="useDebounce与useThrottle"><a href="#useDebounce与useThrottle" class="headerlink" title="useDebounce与useThrottle"></a>useDebounce与useThrottle</h2><h3 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h3><p>前端很多业务场景下都需要处理节流或去抖的场景，节流函数和去抖函数本身没有减少事件的触发次数，而是控制事件处理函数的执行来减少实际逻辑处理过程，从而提高浏览器性能。</p><p>一个去抖的场景是：在搜索框中根据用户输入的文本搜索关联的内容并下拉展示，由于input是一个触发频率很高的事件，一般需要等到用户停止输出文本一段时间后才开始请求接口查询数据。</p><p>先来实现最原始的业务逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref, watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">cb, delay = <span class="number">100</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>,</span><br><span class="line">            context = <span class="variable language_">this</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            cb.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useAssociateSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">search</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;search...&#x27;</span>, keyword.<span class="property">value</span>)</span><br><span class="line">        <span class="comment">// mock 请求接口获取数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// watch(keyword, search) // 原始逻辑，每次变化都请求</span></span><br><span class="line">    <span class="title function_">watch</span>(keyword, <span class="title function_">debounce</span>(search, <span class="number">1000</span>)) <span class="comment">// 去抖，停止操作1秒后再请求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        keyword</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在视图中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;useAssociateSearch&#125; <span class="keyword">from</span> <span class="string">&quot;../useDebounce&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;useDebounce&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123;keyword&#125; = <span class="title function_">useAssociateSearch</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      keyword</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与<code>useApi</code>同理，我们可以将这个debounce的逻辑抽象出来，，封装成一个通用的<code>useDebounce</code></p><h3 id="实现useDebounce"><a href="#实现useDebounce" class="headerlink" title="实现useDebounce"></a>实现useDebounce</h3><p>貌似不需要我们再额外编写任何代码，直接将<code>debounce</code>方法重命名为<code>useDebounce</code>即可，为了凑字数，我们还是改装一下，同时增加cancel方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useDebounce</span>(<span class="params">cb, delay = <span class="number">100</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> handler = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer.<span class="property">value</span>)</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>,</span><br><span class="line">            context = <span class="variable language_">this</span></span><br><span class="line">        timer.<span class="property">value</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            cb.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        handler,</span><br><span class="line">        cancel</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现useThrottle"><a href="#实现useThrottle" class="headerlink" title="实现useThrottle"></a>实现useThrottle</h3><p>节流与去抖的封装方式基本相同，只要知道<code>throttle</code>的实现就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useThrottle</span>(<span class="params">cb, duration = <span class="number">100</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span></span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        <span class="keyword">if</span> (now - start &gt;= duration) &#123;</span><br><span class="line">            cb.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            start = now</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h3><p>从去抖&#x2F;节流的形式可以看出，某些hook与我们之前的工具函数并没有十分明显的边界。是将所有代码统一hook化，还是保留原来引入工具函数的风格，这是一个需要思考和实践的问题</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文主要展示了几种Hook的封装思路和简单实现</p><ul><li><code>useRequest</code>用于统一管理网络请求相关状态，而无需在每次网络请求中重复处理loading、error等逻辑</li><li><code>useEventBus</code>实现了在组件卸载时自动取消当前组件监听的事件，无需重复编写<code>onUnmounted</code>代码，这个思路也可以用于DOM事件、定时器、网络请求等注册和取消</li><li><code>useModel</code>实现了在多个组件共享同一个hook状态，展示了一种除vuex、<code>provide/inject</code>函数之外跨组件共享数据的方案</li><li><code>useReducer</code>利用hook实现了一个简易版的<code>redux</code>，并且利用<code>useModel</code>实现了全局的store</li><li><code>useDebounce</code>与<code>useThrottle</code>，实现了去抖和节流，并思考了hook化的代码风格与常规的util代码风格，以及是否有必要将所有的东西都hook化</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将介绍如何使用Vue3来封装一些比较有用的组合API，主要包括背景、实现思路以及一些思考。&lt;/p&gt;
&lt;p&gt;就我自己的感觉而言，&lt;code&gt;Hook&lt;/code&gt;与&lt;code&gt;Composition API&lt;/code&gt;概念是很类似的，事实上在React大部分可用的Hoo</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="https://dont-sleep-so-late.github.io/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://dont-sleep-so-late.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript八股文</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/07/%E5%85%AB%E8%82%A1%E6%96%87/JavaScript%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/07/%E5%85%AB%E8%82%A1%E6%96%87/JavaScript%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2024-03-07T15:31:36.000Z</published>
    <updated>2024-04-03T03:48:22.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h1><h2 id="var、let、const-的差异？"><a href="#var、let、const-的差异？" class="headerlink" title="var、let、const 的差异？"></a>var、let、const 的差异？</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p><code>var</code>、<code>let</code>、<code>const</code> 三者都可以声明变量。变量可以看作盒子，变量名就是盒子名称，值是放在盒子里的东西。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 声明变量，初始值可选</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Lucy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 声明变量，初始值可选</span></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const 声明常量，必须要赋初始值</span></span><br><span class="line"><span class="keyword">const</span> city = <span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line"><span class="comment">// 如果给常量重新赋值会报错</span></span><br><span class="line"><span class="keyword">const</span> city = <span class="string">&quot;Shanghai&quot;</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;city&#x27; has alre ady been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果常量的值是对象（数组），不可以修改常量指向的引用，但是可以修改引用的值</span></span><br><span class="line"><span class="keyword">const</span> cities = [<span class="string">&quot;Beijing&quot;</span>];</span><br><span class="line">cities[<span class="number">0</span>] = [<span class="string">&quot;Shanghai&quot;</span>]; <span class="comment">// &quot;Shanghai&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p><code>var</code>、<code>let</code>、<code>const</code> 三者的差异：</p><table><thead><tr><th></th><th>定义</th><th>作用域</th><th>暂时性死区</th><th>重复声明变量</th><th>全局属性</th></tr></thead><tbody><tr><td>const</td><td>声明常量</td><td>块级作用域</td><td>✅</td><td>❎</td><td>❎</td></tr><tr><td>let</td><td>声明变量（ES6 新增）</td><td>块级作用域</td><td>✅</td><td>❎</td><td>❎</td></tr><tr><td>var</td><td>声明变量</td><td>函数作用域（函数内）</td><td>❎</td><td>✅</td><td>✅</td></tr></tbody></table><p>注：</p><p>暂时性死区：Temporal dead zone（TDZ）</p><p>全局属性：是否会被添加到 <code>window</code> 或 <code>globalThis</code> 等对象中</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>从一个代码块的开始直到代码执行到声明变量的行之前，<code>let</code> 或 <code>const</code> 声明的变量都处于“暂时性死区中。简单理解：<code>let</code> 或 <code>const</code> 只能先声明再访问。如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问 person 变量</span></span><br><span class="line"><span class="comment">// 变量 person 使用 let 声明，声明不会提升，因此此处访问会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);  <span class="comment">// ReferenceError: person is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 person </span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Lucy&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同理，使用 <code>const</code> 声明变量，如果在声明前使用，表现与 <code>let</code> 一致。<code>var</code> 声明的全局变量会进行变量提升：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Lucy&quot;</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><p><code>var</code> 声明的变量会被添加到全局对象中，可以使用 <code>window </code>和 <code>globalThis</code> 访问，<code>let</code> 和 <code>const</code> 声明的全局变量则不会添加到全局对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Lucy&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">// &quot;Lucy&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis.<span class="property">name</span>); <span class="comment">// &quot;Lucy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis.<span class="property">age</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gender = <span class="string">&quot;female&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">gender</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis.<span class="property">gender</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h3><p>以下代码输出结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">prop</span>: <span class="number">0</span> &#125;;</span><br><span class="line">obj.<span class="property">prop</span> = obj.<span class="property">prop</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">prop</span>); <span class="comment">// 1. 打印结果是什么？</span></span><br><span class="line">obj = &#123;&#125;; <span class="comment">// 2. 执行结果是什么？</span></span><br></pre></td></tr></table></figure><p>答案：1 处输出 1， 2 处报错： “Uncaught TypeError: Assignment to constant variable”。这与 <code>const</code> 的特性有关，<code>const</code> 仅仅意味着<strong>变量名和值的绑定是不可变的</strong>，但是它的值可以是可变的，如 1 处 的值 <code>&#123; prop: 0 &#125;</code> 就可以更改。因此，我们可以得出结论：1 处 <code>obj</code> 的值是对象，可以改变 <code>obj</code> 的属性，然而不能重新给 <code>obj</code> 赋新的值（2 处）。</p><hr><h2 id="谈谈作用域"><a href="#谈谈作用域" class="headerlink" title="谈谈作用域?"></a>谈谈作用域?</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>作用域是当前的执行上下文，值和表达式在其中“可见”或可被访问。</p></blockquote><h3 id="静态作用域和动态作用域"><a href="#静态作用域和动态作用域" class="headerlink" title="静态作用域和动态作用域"></a>静态作用域和动态作用域</h3><p>作用域分为静态作用域（又称为词法作用域）和动态作用域：</p><ul><li>静态意味着它与代码的位置有关，与执行代码时的环境无关。JavaScript 采用的是静态作用域。</li><li>动态即运行时，代码执行时确定的。</li></ul><h3 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h3><p>JavaScript 的作用域可以分为以下四种：</p><ul><li><p>全局作用域：脚本模式运行所有代码的默认作用域</p></li><li><p>函数作用域：由函数创建的作用域</p></li><li><p>块级作用域：用一对花括号（一个代码块）创建出来的作用域</p></li><li><p>模块作用域：模块模式中运行代码的作用域</p></li></ul><p>接下来，我们分析一下各种作用域的特点。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>JavaScript 变量作用域是嵌套的，它们形成树：</p><ul><li><p>最外面的作用域是树的根部，也叫全局作用域。</p></li><li><p>被最外层作用域包含的作用域是根的子孙，如各种嵌套的代码块形成的作用域。</p></li></ul><p>全局作用域中的变量称为<strong>全局变量</strong>，可以在任何作用域内访问。有两种全局变量：</p><ul><li><p><strong>全局声明变量</strong>（declarative variables）是普通变量，在最顶级由 <code>const</code>、<code>let</code> 和 <code>class</code> 声明的变量。</p></li><li><p><strong>全局对象</strong>（object variables）是存储在全局对象中的属性：</p><ul><li>在最顶级由 <code>var</code> 和 <code>function</code> 声明后创建的变量</li><li>全局对象可以通过 <code>globalThis</code> 和 <code>window</code> 访问，它可以对全局对象变量进行增删改查</li></ul></li></ul><p>全局属性 <code>globalThis</code> 包含全局的 <code>this</code> 值，类似于全局对象。<code>globalThis</code> 提供了一个标准的方式来获取不同环境下的全局 <code>this</code> 对象（也就是全局对象自身），它可以在任何环境下使用。</p><p>下面的代码可以帮助我们更好理解 <code>globalThis</code> 和两种全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">const</span> declarativeVariable = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> objectVariable = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 所有脚本共享同样的顶级作用域</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(declarativeVariable); <span class="comment">// &#x27;d&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectVariable); <span class="comment">// &#x27;o&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 不是所有变量都会创建为全局对象的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 此处最顶层 const 创建的是全局声明变量，不是全局对象，因此 window 对象下访问为 undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">declarativeVariable</span>); <span class="comment">// undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">objectVariable</span>); <span class="comment">// &#x27;o&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// globalThis 同 window 表现一致</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis.<span class="property">declarativeVariable</span>); <span class="comment">// undefined  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis.<span class="property">objectVariable</span>); <span class="comment">// &#x27;o&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>观察以上的代码，就能明白为什么最顶层 <code>const</code> 创建的变量，使用 <code>window</code> 访问依然是 <code>undefined</code>。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数内声明的变量，只能在函数作用域范围内访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">scope</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> address = <span class="string">&quot;Beijing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(address); <span class="comment">// Uncaught ReferenceError: address is not defined </span></span><br></pre></td></tr></table></figure><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>作用域对变量来说，可以简单理解为程序能够访问到变量的范围，超过作用域的就无法访问。</p><h4 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a><code>let</code> 和 <code>const</code></h4><p><code>let</code>、<code>const</code> 支持块级作用域。如果在代码块 <code>&#123;...&#125;</code> 中使用 <code>let</code> 或 <code>const</code> 声明一个变量，那么这个变量只在该代码块中可见。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="comment">// 作用域 A，可以访问变量 x</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="number">0</span>; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 作用域 B，可以访问 x、y</span></span><br><span class="line">        <span class="keyword">const</span> y  = <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 0</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作用域 A 外，不能访问 x、y</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 报错：Uncaught ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p>我们分析一下上面的代码：</p><ul><li>作用域 A 是变量 <code>x</code> 的作用域</li><li>作用域 B 是作用域 A 的内部作用域</li><li>作用域 A 是作用域 B 外部作用域</li></ul><p>每个变量可访问的范围是它所在的作用域以及该作用域所嵌套的外部作用域。<code>let</code> 和 <code>const</code> 声明的变量是块级的，因此它们作用域始终在块中。同一作用域内，不允许声明同名变量。如下示例代码用 <code>const</code> 声明同名变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="number">2</span>; <span class="comment">// 报错：Uncaught SyntaxError: Identifier &#x27;x&#x27; has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同作用域下可以使用同名变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> x = <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="class"><a href="#class" class="headerlink" title="class"></a><code>class</code></h4><p><code>class</code> 声明的类也支持块级作用域。如下面代码，在全局作用域中声明了 <code>Animal</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>); <span class="comment">// class Animal &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>如果在代码块 <code>&#123;...&#125;</code> 中创建 <code>Animal</code>，此时在代码块外部就无法访问 <code>Animal</code>了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">class Animal &#123;&#125;</span><br><span class="line">console.log(Animal) // class Animal &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Animal); // Uncaught ReferenceError: Animal is not defined </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h3><p>每个 ECMAScript 模块（ES6 Modules）都有自己的作用域，因此，在顶级模块中声明的变量不是全局的。如下图所示：</p><p><img src="https://pic.leetcode.cn/1675243681-ITEQCA-image.png#id=Usa3j&originHeight=485&originWidth=815&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>作用域是值或者表达式的可访问范围。分为静态作用域（词法作用域）和动态作用域，JavaScript 采用的是静态作用域。其中，分为四种不同的作用域：全局作用域、函数作用域、块级作用域以及模块作用域。</p><p>除此之外，文中还提到了各种声明与作用域的关系，下面总结一下各种声明的异同。我们从以下四个方面来看各种声明的异同：</p><ul><li>作用域</li><li>暂时性死区：变量何时可以访问？一些变量在进入作用域后可尽快被访问，但有的必须等到代码执行到它们声明时才可以访问。通俗说法是，这个变量是否可以先访问再声明。暂时性死区（TDZ， Temporal Dead Zone） 就是变量在进入作用域和执行声明前的一段时间。在这段时间内，访问变量会报错。</li><li>重复：变量是否可以重复声明（同级作用域下）</li><li>全局属性：声明的变量是否会被添加到全局对象中</li></ul><table><thead><tr><th></th><th>定义</th><th>作用域</th><th>暂时性死区</th><th>重复声明变量</th><th>全局属性</th></tr></thead><tbody><tr><td>const</td><td>声明常量</td><td>块级作用域</td><td>✅</td><td>❎</td><td>❎</td></tr><tr><td>let</td><td>声明变量（ES6 新增）</td><td>块级作用域</td><td>✅</td><td>❎</td><td>❎</td></tr><tr><td>function</td><td>声明常量</td><td>块级作用域</td><td>❎</td><td>✅</td><td>✅</td></tr><tr><td>class</td><td></td><td>块级作用域</td><td>✅</td><td>❎</td><td>❎</td></tr><tr><td>var</td><td>声明变量</td><td>函数作用域（函数内）</td><td>❎</td><td>✅</td><td>✅</td></tr></tbody></table><hr><h2 id="什么是变量提升？"><a href="#什么是变量提升？" class="headerlink" title="什么是变量提升？"></a>什么是变量提升？</h2><p>变量提升和上文提到触发时间有关。我们知道，<code>var</code> 和 <code>function</code> 声明的变量可以在声明前访问，这就是因为变量提升的缘故。</p><p>当 JavaScript 引擎执行代码时，创建了全局执行上下文，它有两个阶段：</p><ul><li>创建（准备工作）</li><li>执行</li></ul><p>在创建阶段，JavaScript 引擎将 <code>var</code> 和 <code>function</code> 声明移到了顶层，这就是 JavaScript 的变量提升。</p><h3 id="var-关键字"><a href="#var-关键字" class="headerlink" title="var 关键字"></a><code>var</code> 关键字</h3><p>我们先看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在这段代码中，我们在声明前访问 <code>counter</code> 变量，并未报错。这是变量提升的缘故。</p><h3 id="function-提升"><a href="#function-提升" class="headerlink" title="function 提升"></a><code>function</code> 提升</h3><p>和 <code>var</code> 一样，函数声明也会提升：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>,</span><br><span class="line">y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(x, y);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，<code>let</code> 关键字、函数表达式、箭头函数等均不会变量提升。</p><h3 id="处理相同的变量名或者函数名"><a href="#处理相同的变量名或者函数名" class="headerlink" title="处理相同的变量名或者函数名"></a>处理相同的变量名或者函数名</h3><p>代码中出现相同的变量或者函数怎么办？我们知道 <code>var</code> 声明的同名变量，后者会覆盖前者，如果是函数呢？先看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>,</span><br><span class="line">y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(x, y);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result &quot;</span> + result); <span class="comment">// &quot;result 60&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">add</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result1 &quot;</span> + result); <span class="comment">// &quot;result1 60&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上面的结果可以看到，两个同名函数 <code>add</code>，定义在后面的函数覆盖了前面的函数，因此 <code>result</code> 和 <code>result1</code> 的结果都是执行后面的函数后返回的结果。</p><p>因此，代码中出现同名的变量名或者函数名，都是后者覆盖前者。</p><h3 id="小练习-1"><a href="#小练习-1" class="headerlink" title="小练习"></a>小练习</h3><p>下面的代码输出的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">20</span>,</span><br><span class="line">y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result1 &quot;</span> + result); <span class="comment">// &quot;result1 60&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + <span class="number">40</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里考察的是同名变量和函数的提升，后面的会覆盖前面的，因此执行的是最后一个函数 <code>add</code>。</p><hr><h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><h2 id="JavaScript-数据类型有哪些？"><a href="#JavaScript-数据类型有哪些？" class="headerlink" title="JavaScript 数据类型有哪些？"></a>JavaScript 数据类型有哪些？</h2><p>面试高频指数：★★★★★</p><p>JavaScript 中有八种基本的数据类型（前七种为基本数据类型，也称为原始数据类型，后一种 <code>Object</code> 为复杂数据类型，也称为非原始数据类型或引用类型）。</p><ul><li>其中原始数据类型：<ul><li><code>number</code> 用于任何类型的数字：整数或浮点数，在 <code>±(2(^53)-1)</code> 范围内的整数。</li><li><code>bigint</code> 用于任意长度的整数。</li><li><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的字符类型。</li><li><code>boolean</code> 用于 <code>true</code> 和 <code>false</code>。</li><li><code>null</code> 用于未知的值 —— 只有一个 <code>null</code> 值的独立类型。</li><li><code>undefined</code> 用于未定义的值 —— 只有一个 <code>undefined</code> 值的独立类型。</li><li><code>symbol</code> 用于唯一的标识符。</li></ul></li><li>以及一种非原始数据类型：<ul><li><code>Object</code> 用于更复杂的数据结构。以下类型都是对象：<ul><li><code>Function</code>（函数）</li><li><code>Array</code>（数组）</li><li><code>Date</code>（日期）</li><li><code>RegExp</code>（正则表达式）</li></ul></li></ul></li></ul><h2 id="原始数据类型和引用数据类型的区别？"><a href="#原始数据类型和引用数据类型的区别？" class="headerlink" title="原始数据类型和引用数据类型的区别？"></a>原始数据类型和引用数据类型的区别？</h2><p>面试高频指数：★★★★☆</p><p>JavaScript 包含两种不同类型的值：</p><ul><li><p>原始数据类型（Primitive values）</p></li><li><p>引用数据类型（Reference values）</p></li></ul><h3 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h3><p>当定义一个变量的时候，JavaScript 引擎会为变量分配两种内存：栈内存和堆内存。</p><p>静态值在编译阶段有固定的大小，静态值有：</p><ul><li>原始值：<code>Null</code>、<code>Undefined</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code>、<code>BigInt</code></li><li>引用值：是对象的引用。</li></ul><p>静态值有固定的大小，不能改变。JavaScript 引擎为它们分配一片固定的内存，并存储在栈上。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>因为 <code>name</code> 和 <code>age</code> 都是原始值类型，JavaScript 引擎将它们存储在栈上，如下图所示：</p><p><img src="https://pic.leetcode.cn/1675246723-ulSguk-image.png"></p><p>JavaScript 将对象（<code>Object</code>) 存储在堆（heap）上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内存如下图：</p><p><img src="https://pic.leetcode.cn/1675246788-HjXqny-image.png"></p><p>JavaScript 引擎在堆内存上创建了一个新的对象，同时它和栈内存上的 <code>person</code> 变量连接。因此，我们说 <code>person</code> 变量是对象的引用。</p><h3 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性"></a>动态属性</h3><p>一个引用值允许我们添加、修改和删除属性，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加属性 ssn </span></span><br><span class="line">person.<span class="property">ssn</span> = <span class="string">&quot;123-45&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 name</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;John Doe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除属性 age </span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">age</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123;name: &#x27;John Doe&#x27;, ssn: &#x27;123-45&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>JavaScript 也允许在原始值上添加属性，但这个属性不会起作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">name.<span class="property">alias</span> = <span class="string">&quot;Knight&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">alias</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a>复制值</h3><h4 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h4><p><strong>对于原始值来说，JavaScript 引擎创建一个值的副本，并将值赋给新的变量。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> newAge = age; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age, newAge); <span class="comment">// 25 25</span></span><br></pre></td></tr></table></figure><p>过程如下：</p><ul><li><p>首先，声明一个变量 <code>age</code>，并将 25 赋值给它。</p></li><li><p>其次，声明另一个新的变量 <code>newAge</code>，将 <code>age</code> 赋值给 <code>newAge</code>，JavaScript 引擎将 25 复制了一份，给了新变量。</p></li></ul><p>如下图：</p><p><img src="https://pic.leetcode.cn/1675247356-DMFMSb-image.png"></p><p>因此，对两个变量的操作不会互相影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> newAge = age;</span><br><span class="line"></span><br><span class="line">newAge = newAge + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age, newAge); <span class="comment">// 25 26</span></span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://pic.leetcode.cn/1675247413-GScWMN-image.png"></p><h3 id="引用值"><a href="#引用值" class="headerlink" title="引用值"></a>引用值</h3><p><strong>对于引用值来说，复制的值指向的是同一个对象，因此操作的是也是同一个对象。</strong></p><p>当我们将一个引用值从一个变量赋值给另一个变量，JavaScript 引擎创建一个引用，因此两个变量都是指向堆内存中的同一个对象。意味着，你修改其中一个，另一个也会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> member = person;</span><br><span class="line">member.<span class="property">age</span> = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123;name: &#x27;John&#x27;, age: 26&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member); <span class="comment">// &#123;name: &#x27;John&#x27;, age: 26&#125;</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p>修改前：</p><p><img src="https://pic.leetcode.cn/1675247510-JurGlA-image.png"></p><p>修改后：</p><p><img src="https://pic.leetcode.cn/1675247526-qFUHsM-image.png" alt="image.png"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><p>JavaScript 有两种类型的值：原始值和引用值</p></li><li><p>引用类型的值可以对它的属性做增删改查，原始值不行</p></li><li><p>从一个变量复制原始值到另一个变量，会创建一个独立的值的备份，意味着修改一个变量不会影响到另一个变量</p></li><li><p>从一个变量复制引用值到另一个变量，两个变量会指向同一个对象，意味着通过一个变量修改对象将会影响到另一个对象。</p></li></ul><h3 id="小练习-2"><a href="#小练习-2" class="headerlink" title="小练习"></a>小练习</h3><p>下面代码的输出结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increaseAge</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    obj.<span class="property">age</span> += <span class="number">1</span>;</span><br><span class="line">    obj = &#123;<span class="attr">name</span>: <span class="string">&quot;Jame&quot;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increaseAge</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>答案：1 处是：<code>&#123; name: &quot;Jame&quot;, age: 22 &#125;</code>， 2 处是 <code>&#123; name: &#39;John&#39;, age: 26 &#125;</code>。两个变量的内存示意图如下：</p><p><img src="https://pic.leetcode.cn/1675247879-Inlzhw-image.png" alt="image.png"></p><p>实际上，<code>obj = &#123;name: &quot;Jame&quot;, age: 22&#125;</code> 使得 <code>obj</code> 重新指向了一个新的引用的，对象在堆内存中重新分配一块内存，并让 <code>obj</code> 指向它。 因此 <code>console.log(person)</code> 的结果是 <code>&#123; name: &quot;Jame&quot;, age: 22 &#125;</code>。</p><p>原始类型和引用类型在内存中的分配与函数参数传递有联系。函数传参都是值传递，只不过根据值的类型不同有所区别。</p><p>由上可知：</p><ul><li>JavaScript 实参都是传值</li><li>函数实参会在函数中创建新的局部变量。</li></ul><hr><h2 id="为什么-0-1-0-2-0-3"><a href="#为什么-0-1-0-2-0-3" class="headerlink" title="为什么 0.1 + 0.2 !&#x3D;&#x3D; 0.3 ?"></a>为什么 0.1 + 0.2 !&#x3D;&#x3D; 0.3 ?</h2><p>面试高频指数：★★★★☆</p><p>这是一道经典的面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这里涉及到 JavaScript 中的数字类型。下面是 <code>Number</code> 的定义：</p><p>MDN 中对 <code>Number</code> 的定义如下：</p><blockquote><p>根据语言规范，JavaScript 采用“遵循 IEEE 754 标准的双精度 64 位格式”（”double-precision 64-bit format IEEE 754 values”）表示数字。</p></blockquote><h3 id="为什么会这样？"><a href="#为什么会这样？" class="headerlink" title="为什么会这样？"></a>为什么会这样？</h3><p>简单地说，0.1 和 0.2 的二进制表示形式是不准确的，所以它们相加时，结果不是精确的 0.3， 而是非常接近的值：0.30000000000000004。</p><p>这是和 JavaScript 采用“遵循 IEEE 754 标准的双精度 64 位格式”有关。</p><ul><li>sign bit（符号）： 用来表示正负号</li><li>exponent（指数）： 用来表示次方数</li><li>mantissa（尾数）：用来表示精确度</li></ul><p><img src="https://pic.leetcode.cn/1675248285-kMFmze-image.png" alt="image.png"></p><p>在这个标准下：</p><ul><li><p>1 位存储符号（Sign），0 表示正数， 1 表示负数。</p></li><li><p>用 11 位存储指数，指数必须是“有符号”的值，这里使用了偏差指数，即存储 E + bias 的值。对于 11 位来说，bias 的值是 2^(11-1) - 1，也就是 1023。11 位无符号整数的值的范围是 0 到 2^11（2047），由于全 0 和 全 1 的指数值是为特殊数字保留的，所以可用的指数是从 1 到 2046。减去指数偏差值 1023， 就能得到指数的实际范围，即从 -1022 到 +1023。</p></li><li><pre><code class="js">1 - 1023 = -10222046 - 1023 = +1023<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 用 52 位存储 Fraction。</span><br><span class="line"></span><br><span class="line">此时，我们再来看 0.1 + 0.2 的转换过程，举个例子，拿 0.1 来看：</span><br><span class="line">0.1 对应的二进制是 1 * 2^-4 * 1.1001100110011……</span><br><span class="line">符号位：0</span><br><span class="line">E + bais： -4 + 1023 = 1019</span><br><span class="line">Fraction： 1001100110011……</span><br><span class="line">对应的 64 位完整表示如下图：</span><br><span class="line"></span><br><span class="line">![image.png](https://pic.leetcode.cn/1675248450-nFKGop-image.png)</span><br><span class="line"></span><br><span class="line">同理，0.2 的完整表示是：</span><br><span class="line"></span><br><span class="line">![image.png](https://pic.leetcode.cn/1675248480-DpROri-image.png)</span><br><span class="line"></span><br><span class="line">所以，**当 0.1 存下来的时候，就发生了精度丢失，当我们用浮点数进行运算的时候，使用的其实是精度丢失后的数。**</span><br><span class="line"></span><br><span class="line">当我们对两个数字求和时，它们的“精度损失”会叠加起来。这就是为什么 0.1 + 0.2 不等于 0.3。</span><br><span class="line"></span><br><span class="line">### 如何解决？</span><br><span class="line"></span><br><span class="line">**方法一：`toFixed(n)`**</span><br><span class="line"></span><br><span class="line">我们可以借助方法 `toFixed(n)` 对结果进行舍入。</span><br><span class="line"></span><br></pre></td></tr></table></figure>let sum = 0.1 + 0.2;alert(sum.toFixed(2)); // 0.30<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意：`toFixed `总是返回一个字符串。我们可以使用一元加号将其强制转换为一个数字：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">let sum = 0.1 + 0.2;</span><br><span class="line">alert( +sum.toFixed(2) ); // &quot;0.30&quot;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><strong>方法二：将数字临时乘以 100（或更大的数字），将其转换为整数，进行数学运算，然后再除回。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert( (0.1 * 100 + 0.2 * 100) / 100 ); // 0.3</span><br></pre></td></tr></table></figure><p><strong>方法三：使用 Number.EPSILON。如果两个数的精度损失在允许范围内，则可以认为两个数是相等的。</strong></p><p><code>Number.EPSILON</code> 属性表示 1 与 <code>Number</code> 可表示的大于 1 的最小的浮点数之间的差值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">numbersCloseEnoughToEqual</span>(<span class="params">n1, n2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(n1 - n2) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">numbersCloseEnoughToEqual</span>(a, b); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">numbersCloseEnoughToEqual</span>(<span class="number">0.0000001</span>, <span class="number">0.0000002</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="小练习-3"><a href="#小练习-3" class="headerlink" title="小练习"></a>小练习</h3><p>下面代码的打印结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9999999999999999</span>); <span class="comment">// 16位</span></span><br></pre></td></tr></table></figure><p>答案：输出结果 10000000000000000（17位）。</p><p>这也是因为精度损失。有 64 位来表示该数字，其中 52 位可用于存储数字，但这还不够。所以最不重要的数字就消失了。</p><p>JavaScript 不会在此类事件中触发 error。它会尽最大努力使数字符合所需的格式，但不幸的是，这种格式不够大到满足需求。</p><blockquote><p>【参考资料】<br><a href="https://leetcode.cn/link/?target=https://zh.m.wikipedia.org/zh-cn/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8">双精度浮点数</a><br><a href="https://leetcode.cn/link/?target=https://www.binaryconvert.com/result_double.html?decimal=048046049">Double (IEEE754 Double precision 64-bit)</a><br><a href="https://leetcode.cn/link/?target=https://zh.javascript.info/number">数字类型</a></p></blockquote><hr><h2 id="谈谈-undefined-和-null-？"><a href="#谈谈-undefined-和-null-？" class="headerlink" title="谈谈 undefined 和 null ？"></a>谈谈 undefined 和 null ？</h2><p>面试高频指数：★★★★☆</p><p><code>undefined</code> 和 <code>null</code> 都是基本数据类型。它们的定义是：</p><ul><li><p><code>undefined</code> 意味着变量已经声明了但是没有赋值。</p></li><li><p><code>null</code> 是空值，可以作为对象的初始值。</p></li></ul><h3 id="undefined-不是-undeclared"><a href="#undefined-不是-undeclared" class="headerlink" title="undefined 不是 undeclared"></a>undefined 不是 undeclared</h3><ul><li><p><code>undeclared</code> 是指变量从未在代码中出现.使用未声明的变量就会报错：”ReferenceError: cat is not defined“。</p></li><li><p><code>undefined</code> 则是声明了但是值是 <code>undefined</code> 或者值并不存在。</p></li></ul><h3 id="如何获取安全的-undefined-值？"><a href="#如何获取安全的-undefined-值？" class="headerlink" title="如何获取安全的 undefined 值？"></a>如何获取安全的 undefined 值？</h3><p>因为 <code>undefined</code> 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 <code>undefined</code> 的正常判断。</p><p>可以使用 <code>void 0</code> 获得安全的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(void 0); // undefined</span><br></pre></td></tr></table></figure><h3 id="和"><a href="#和" class="headerlink" title="?? 和 ??="></a><code>??</code> 和 <code>??=</code></h3><h3 id="空值合并运算符（-）"><a href="#空值合并运算符（-）" class="headerlink" title="空值合并运算符（??）"></a>空值合并运算符（<code>??</code>）</h3><p>空值合并运算符（<code>??</code>）是一个逻辑运算符，判断左边的值是否是 <code>null</code> 或 <code>undefined</code>。如代码 <code>a ?? b</code>，如果 <code>a</code> 是 <code>null</code> 或 <code>undefined</code>，返回 <code>b</code>， 反之，返回 <code>a</code>。</p><p><code>a ?? b</code> 可以理解为: <code>a !== undefined &amp;&amp; a !== null ? a : b</code></p><p>我们可以给值为 <code>null</code> 或 <code>undefined</code> 的变量一个默认值。如下面的代码所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="literal">null</span>, lastName = <span class="string">&#x27;Sun&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> fullName = firstName ?? lastName</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// Sun</span></span><br></pre></td></tr></table></figure><h3 id="vs"><a href="#vs" class="headerlink" title="?? vs ||"></a><code>??</code> vs <code>||</code></h3><p><code>??</code> 和 <code>||</code> 的相同点：都可以为值为 <code>null</code> 或 <code>undefined</code> 的变量赋默认值。如下面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="literal">null</span>, lastName = <span class="string">&#x27;Sun&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> fullName = firstName ?? lastName</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// Sun</span></span><br><span class="line"></span><br><span class="line">fullName = firstName || lastName;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// Sun</span></span><br></pre></td></tr></table></figure><p>不同点在于：</p><ul><li><p><code>??</code> 只判断值 <code>null</code> 和 <code>undefined</code></p></li><li><p><code>||</code> 是任何假值（<code>0</code>， <code>&#39;&#39;</code>， <code>NaN</code>， <code>null</code>， <code>undefined</code>）都不会被返回。这导致如果你使用 <code>0</code>，<code>&#39;&#39;</code> 或 <code>NaN</code> 作为有效值，就会出现不可预料的后果。</p></li></ul><p>如下面代码，判断值是 <code>&#39;&#39;</code> 时两者的不同表现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;&#x27;</span>, lastName = <span class="string">&#x27;Sun&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> fullName = firstName ?? lastName</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">fullName = firstName || lastName;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName); <span class="comment">// Sun</span></span><br></pre></td></tr></table></figure><h3 id="逻辑空赋值运算符"><a href="#逻辑空赋值运算符" class="headerlink" title="逻辑空赋值运算符 ??="></a>逻辑空赋值运算符 <code>??=</code></h3><p>逻辑空赋值运算符（<code>x ??= y</code>）仅在 <code>x</code> 是空值（<code>null</code> 或 <code>undefined</code>）时对其赋值。</p><p><code>a ??= b</code> 可以理解为: <code>a ?? (a = b) </code>。</p><p>如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="literal">null</span>;</span><br><span class="line">firstName ??= <span class="string">&#x27;yangyang&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName); <span class="comment">// &#x27;yangyang&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>【参考资料】<br><a href="https://leetcode.cn/link/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing">空值合并运算符（??） - JavaScript | MDN</a><br><a href="https://leetcode.cn/link/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment">逻辑空赋值（??&#x3D;） - JavaScript | MDN</a></p></blockquote><h2 id="typeof-null-的结果是什么？"><a href="#typeof-null-的结果是什么？" class="headerlink" title="typeof null 的结果是什么？"></a>typeof null 的结果是什么？</h2><p>面试高频指数：★★★★☆</p><p>JavaScript 中，<code>typeof null</code> 是 <code>object</code>，这是不对的，因为 <code>null</code> 是基本数据类型，不是对象。这是个 bug，但是因为修复这个 bug 会影响现存的代码，所以就一直没改。</p><p>这个 bug 是 JavaScript 第一版的遗留物，这个版本中，值都是 32 位存储单元，由类型标签（1-3位）和实际的值组成。类型标签存在单元的低位里，有下面五种：</p><ul><li>000： 对象，数据是对象类型</li><li>1：整数，存储的数据是一个 31 位的有符号整数。</li><li>010：浮点数，存的数据是双精度浮点数</li><li>100： 字符串，存的数据是字符串</li><li>110：布尔，存的数据是布尔</li></ul><p>低位如果是 1 位，类型标签就是 1 位长度（如整数类型），如果是 0，类型标签是 3 位长度，提供两个额外的位，如其余的四个类型。</p><h3 id="小练习-4"><a href="#小练习-4" class="headerlink" title="小练习"></a>小练习</h3><p><code>typeof NaN</code> 返回什么？</p><p>答案：<code>typeof NaN</code> 返回 <code>&#39;number&#39;</code>。<code>NaN</code> 表示不是一个数字，它是 <code>Number</code> 的特殊值。</p><blockquote><p>【参考资料】<br><a href="https://leetcode.cn/link/?target=https://2ality.com/2013/10/typeof-null.html">The history of “typeof null”</a></p></blockquote><h2 id="2-js基础"><a href="#2-js基础" class="headerlink" title="2. js基础"></a>2. js基础</h2><h4 id="2-1-let-const-var-相关"><a href="#2-1-let-const-var-相关" class="headerlink" title="2.1 let const var 相关"></a>2.1 let const var 相关</h4><p><strong>参考答案：</strong></p><p>var ——ES5 变量声明方式</p><ol><li>在变量未赋值时，变量undefined（为使用声明变量时也为undefined）</li><li>作用域——var的作用域为方法作用域；只要在方法内定义了，整个方法内的定义变量后的代码都可以使用</li></ol><p>let——ES6变量声明方式</p><ol><li>在变量为声明前直接使用会报错</li><li>作用域——let为块作用域——通常let比var 范围要小</li><li>let禁止重复声明变量，否则会报错；var可以重复声明</li></ol><p>const——ES6变量声明方式</p><p>\1. const为常量声明方式；声明变量时必须初始化，在后面出现的代码中不能再修改该常量的值</p><p>\2. const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动</p><h4 id="2-2-js数据类型，区别"><a href="#2-2-js数据类型，区别" class="headerlink" title="2.2 js数据类型，区别"></a>2.2 js数据类型，区别</h4><p><strong>参考答案：</strong></p><p>基本数据类型：</p><p>Number，String，Boolean，null，undefined，symbol，bigint（后两个为ES6新增）</p><p>引用数据类型：</p><p>object，function（<strong>proto</strong> Function.prototype）</p><p>object：普通对象，数组对象，正则对象，日期对象，Math数学函数对象。</p><p>两种数据存储方式：</p><p>基本数据类型是直接存储在栈中的简单数据段，占据空间小、大小固定，属于被频繁使用的数据。栈是存储基 本类型值和执行代码的空间。</p><p>引用数据类型是存储在堆内存中，占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆 中该实体的起始地址，当解释器寻找引用值时，会检索其在栈中的地址，取得地址后从堆中获得实体。</p><p>两种数据类型的区别：</p><ol><li>堆比栈空间大，栈比堆运行速度快。</li><li>堆内存是无序存储，可以根据引用直接获取。</li><li>基础数据类型比较稳定，而且相对来说占用的内存小。</li><li>引用数据类型大小是动态的，而且是无限的。</li></ol><h4 id="2-3-Object-assign的理解"><a href="#2-3-Object-assign的理解" class="headerlink" title="2.3 Object.assign的理解"></a>2.3 Object.assign的理解</h4><p><strong>参考答案：</strong></p><p>作用：Object.assign可以实现对象的合并。</p><p>语法：Object.assign(target, …sources)</p><p><strong>解析</strong>：</p><ol><li>Object.assign会将source里面的可枚举属性复制到target，如果和target的已有属性重名，则会覆盖。</li><li>后续的source会覆盖前面的source的同名属性。</li><li>Object.assign复制的是属性值，如果属性值是一个引用类型，那么复制的其实是引用地址，就会存在引用共享的问题。</li></ol><h4 id="2-4-constructor的理解"><a href="#2-4-constructor的理解" class="headerlink" title="2.4 constructor的理解"></a>2.4 constructor的理解</h4><p><strong>参考答案：</strong></p><p>创建的每个函数都有一个prototype（原型）对象，这个属性是一个指针，指向一个对象。在默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性是一个指向prototype属性所在函数的指针。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（继承自构造函数的prototype），指向构造函数的原型对象。注意当将构造函数的prototype设置为等于一个以对象字面量形式创建的新对象时，constructor属性不再指向该构造函数。</p><h4 id="2-5-map-和-forEach-的区别"><a href="#2-5-map-和-forEach-的区别" class="headerlink" title="2.5 map 和 forEach 的区别"></a>2.5 map 和 forEach 的区别</h4><p><strong>参考答案：</strong></p><p>相同点：</p><ol><li>都是循环遍历数组中的每一项</li><li>每次执行匿名函数都支持三个参数，参数分别为item（当前每一项），index（索引值），arr（原数组）</li><li>匿名函数中的this都是指向window</li><li>只能遍历数组</li></ol><p>不同点：</p><ol><li>map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</li><li>forEach()允许callback更改原始数组的元素。map()返回新的数组。</li></ol><h4 id="2-6-for-of-可以遍历哪些对象"><a href="#2-6-for-of-可以遍历哪些对象" class="headerlink" title="2.6 for of 可以遍历哪些对象"></a>2.6 for of 可以遍历哪些对象</h4><p><strong>参考答案：</strong></p><p>for..of..: 它是es6新增的一个遍历方法，但<strong>只限于迭代器(iterator)</strong>, 所以普通的对象用for..of遍历<br>是会报错的。</p><p>可迭代的对象：包括Array, Map, Set, String, TypedArray, arguments对象等等</p><h4 id="2-7-js静态类型检查"><a href="#2-7-js静态类型检查" class="headerlink" title="2.7 js静态类型检查"></a>2.7 js静态类型检查</h4><p><strong>参考答案：</strong></p><p><strong>js是动态类型语言</strong></p><p>静态类型语言 &amp; 动态类型语言</p><p>静态类型语言：类型检查发生在编译阶段，因此除非修复错误，否则会一直编译失败</p><p>动态类型语言：只有在程序运行了一次的时候错误才会被发现，也就是在运行时，因此即使代码中包含了会 在运行时阻止脚本正常运行的错误类型，这段代码也可以通过编译</p><p><strong>js静态类型检查的方法</strong></p><p><strong>Flow</strong>是Facebook开发和发布的一个开源的静态类型检查库，它允许你逐渐地向JavaScript代码中添加类型。</p><p><strong>TypeScript</strong>是一个会编译为JavaScript的超集（尽管它看起来几乎像一种新的静态类型语言）</p><p><strong>使用静态类型的优势</strong></p><ul><li>可以尽早发现bug和错误</li><li>减少了复杂的错误处理</li><li>将数据和行为分离</li><li>减少单元测试的数量</li><li>提供了领域建模（domain modeling）工具</li><li>帮助我们消除了一整类bug</li><li>重构时更有信心</li></ul><p><strong>使用静态类型的劣势</strong></p><ul><li>代码冗长</li><li>需要花时间去掌握类型</li></ul><h4 id="2-8-indexof"><a href="#2-8-indexof" class="headerlink" title="2.8 indexof"></a>2.8 indexof</h4><p><strong>参考答案：</strong></p><p>语法：str.indexOf(searchValue [, fromIndex])</p><p>参数：searchValue：要被查找的字符串值。</p><p>如果没有提供确切地提供字符串，[searchValue 会被强制设置为”undefined”]， 然后在当前字符串中查 找这个值。</p><p>举个例子：’undefined’.indexOf()将会返回0，因为undefined在位置0处被找到，但是’undefine’.indexOf()将会返回 -1 ，因为字符串’undefined’未被找到</p><p>fromIndex：可选</p><p>数字表示开始查找的位置。可以是任意整数，默认值为0。</p><p>如果fromIndex的值小于0，或者大于str.length，那么查找分别从0和str.length开始。（译者 注：fromIndex的值小于0，等同于为空情况；fromIndex的值大于或等于str.length，那么结果 会直接返回-1。）</p><p>举个例子，’hello world’.indexOf(‘o’, -5)返回4，因为它是从位置0处开始查找，然后o在位置4处被找到。另一方面，’hello world’.indexOf(‘o’, 11)（或fromIndex填入任何大于11的值） 将会返回-1，因为开始查找的位置11处，已经是这个字符串的结尾了。</p><p>返回值：</p><p>查找的字符串searchValue的<strong>第一次</strong>出现的索引，如果没有找到，则返回-1。</p><p>若被查找的字符串searchValue是一个空字符串，则返回fromIndex。如果fromIndex值为空，或者fromIndex值小于被查找的字符串的长度，返回值和以下的fromIndex值一样。</p><p>如果fromIndex值大于等于字符串的长度，将会直接返回字符串的长度（str.length）</p><p>特点：</p><p>\1. 严格区分大小写</p><p>\2. 在使用indexOf检索数组时，用‘&#x3D;&#x3D;&#x3D;’去匹配，意味着会检查数据类型</p><h4 id="2-9-iframe有什么优点、缺点"><a href="#2-9-iframe有什么优点、缺点" class="headerlink" title="2.9 iframe有什么优点、缺点"></a>2.9 iframe有什么优点、缺点</h4><p><strong>参考答案：</strong></p><p>优点：</p><ol><li>iframe能够原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。</li></ol><p>缺点：</p><ol><li>iframe会阻塞主页面的onload事件；</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。会产生很多页面，不容易管理。</li><li>iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。</li><li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理iframe中的内容，所以使用iframe会不利于搜索引擎优化（SEO）。</li><li>很多的移动设备无法完全显示框架，设备兼容性差。</li><li>iframe框架页面会增加服务器的http请求，对于大型网站是不可取的。</li></ol><h4 id="2-10-webComponents"><a href="#2-10-webComponents" class="headerlink" title="2.10 webComponents"></a>2.10 webComponents</h4><p><strong>参考答案：</strong></p><p><strong>Web Components</strong> 总的来说是提供一整套完善的封装机制来把 Web 组件化这个东西标准化，每个框架实现 的组件都统一标准地进行输入输出，这样可以更好推动组件的复用</p><p>包含四个部分</p><p>\1. Custom Elements</p><p>\2. HTML Imports</p><p>\3. HTML Templates</p><p>\4. Shadow DOM</p><p><strong>Custom Elements</strong></p><p>提供一种方式让开发者可以自定义 HTML 元素，包括特定的组成，样式和行为。支持 Web Components 标准的浏览器会提供一系列 API 给开发者用于创建自定义的元素，或者扩展现有元素。</p><p><strong>HTML Imports</strong></p><p>一种在 HTMLs 中引用以及复用其他的 HTML 文档的方式。这个 Import 很漂亮，可以简单理解为我们常见 的模板中的include之类的作用</p><p><strong>HTML Templates</strong></p><p>模板</p><p><strong>Shadow DOM</strong></p><p>提供一种更好地组织页面元素的方式，来为日趋复杂的页面应用提供强大支持，避免代码间的相互影响</p><h4 id="2-11-dva的数据流流向是怎么样的"><a href="#2-11-dva的数据流流向是怎么样的" class="headerlink" title="2.11 dva的数据流流向是怎么样的"></a>2.11 dva的数据流流向是怎么样的</h4><p><strong>参考答案：</strong></p><p>数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据 的时候可以通过dispatch发起一个 action，如果是同步行为会直接通过Reducers改变State，如果是 异步行为（副作用）会先触发Effects然后流向Reducers最终改变State，所以在 dva 中，数据流向非 常清晰简明，并且思路基本跟开源社区保持一致。</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646121613938/80A2D6E5BA845BDC932EF25370C0DB0D" alt="img"></p><h4 id="2-12-变量提升"><a href="#2-12-变量提升" class="headerlink" title="2.12 变量提升"></a>2.12 变量提升</h4><p><strong>参考答案：</strong></p><p>JavaScript是单线程语言，所以执行肯定是按顺序执行。但是并不是逐行的分析和执行，而是一段一段地分析执行，会先进行编译阶段然后才是执行阶段。在编译阶段阶段，代码真正执行前的几毫秒，会检测到所有的变量和函数声明，所有这些函数和变量声明都被添加到名为Lexical Environment的JavaScript数据结构内的内存中。所以这些变量和函数能在它们真正被声明之前使用。</p><h4 id="2-13-作用域"><a href="#2-13-作用域" class="headerlink" title="2.13 作用域"></a>2.13 作用域</h4><p><strong>参考答案：</strong></p><p><strong>概念：</strong>作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><p><strong>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域</strong>。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。</p><p><strong>扩展：</strong></p><p>var ——ES5 变量声明方式</p><ol><li>在变量未赋值时，变量undefined（为使用声明变量时也为undefined）</li><li>作用域——var的作用域为方法作用域；只要在方法内定义了，整个方法内的定义变量后的代码都可以使用</li></ol><p>let——ES6变量声明方式</p><ol><li>在变量为声明前直接使用会报错</li><li>作用域——let为块作用域——通常let比var 范围要小</li><li>let禁止重复声明变量，否则会报错；var可以重复声明</li></ol><p>const——ES6变量声明方式</p><p>const为常量声明方式；声明变量时必须初始化，在后面出现的代码中不能再修改该常量的值</p><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动</p><h4 id="2-14-HashMap-和-Array-有什么区别？"><a href="#2-14-HashMap-和-Array-有什么区别？" class="headerlink" title="2.14 HashMap 和 Array 有什么区别？"></a>2.14 HashMap 和 Array 有什么区别？</h4><p><strong>参考答案：</strong></p><ol><li>查找效率<br>HashMap因为其根据hashcode的值直接算出index,所以其查找效率是随着数组长度增大而增加的。<br>ArrayMap使用的是二分法查找，所以当数组长度每增加一倍时，就需要多进行一次判断，效率下降</li><li>扩容数量<br>HashMap初始值16个长度，每次扩容的时候，直接申请双倍的数组空间。<br>ArrayMap每次扩容的时候，如果size长度大于8时申请size*1.5个长度，大于4小于8时申请8个，小于4时申 请4个。这样比较ArrayMap其实是申请了更少的内存空间，但是扩容的频率会更高。因此，如果数据量比较大的时候，还是使用HashMap更合适，因为其扩容的次数要比ArrayMap少很多。</li><li>扩容效率<br>HashMap每次扩容的时候重新计算每个数组成员的位置，然后放到新的位置。<br>ArrayMap则是直接使用System.arraycopy，所以效率上肯定是ArrayMap更占优势。</li><li>内存消耗<br>以ArrayMap采用了一种独特的方式，能够重复的利用因为数据扩容而遗留下来的数组空间，方便下一个ArrayMap的使用。而HashMap没有这种设计。 由于ArrayMap之缓存了长度是4和8的时候，所以如果频繁的使用到Map，而且数据量都比较小的时候，ArrayMap无疑是相当的是节省内存的。</li></ol><p>总结<br>综上所述，数据量比较小，并且需要频繁的使用Map存储数据的时候，推荐使用ArrayMap。 而数据量比较大的 时候，则推荐使用HashMap。</p><h4 id="2-15-HashMap和Object"><a href="#2-15-HashMap和Object" class="headerlink" title="2.15 HashMap和Object"></a>2.15 HashMap和Object</h4><p><strong>参考答案：</strong></p><p>Objects和Maps类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成Maps使用。不过Maps和Objects有一些重要的区别，在下列情况里使用Map会是更好的选择：</p><table><thead><tr><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>意外的键</td><td>Map默认情况不包含任何键。只包含显式插入的键。</td><td>一个Object有一个原型, 原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。<strong>注意:</strong> 虽然 ES5 开始可以用Object.create(null)来创建一个没有原型的对象，但是这种用法不太常见。</td></tr><tr><td>键的类型</td><td>一个Map的键可以是<strong>任意值</strong>，包括函数、对象或任意基本类型。</td><td>一个Object的键必须是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String">String</a> 或是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>。</td></tr><tr><td>键的顺序</td><td>Map中的 key 是有序的。因此，当迭代的时候，一个Map对象以插入的顺序返回键值。</td><td>一个Object的键是无序的注意：自ECMAScript 2015规范以来，对象<em>确实</em>保留了字符串和Symbol键的创建顺序； 因此，在只有字符串键的对象上进行迭代将按插入顺序产生键。</td></tr><tr><td>Size</td><td>Map的键值对个数可以轻易地通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size">size</a> 属性获取</td><td>Object的键值对个数只能手动计算</td></tr><tr><td>迭代</td><td>Map是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable">iterable</a> 的，所以可以直接被迭代。</td><td>迭代一个Object需要以某种方式获取它的键然后才能迭代。</td></tr><tr><td>性能</td><td>在频繁增删键值对的场景下表现更好。</td><td>在频繁添加和删除键值对的场景下未作出优化。</td></tr></tbody></table><h4 id="2-16-javascript中arguments相关的问题"><a href="#2-16-javascript中arguments相关的问题" class="headerlink" title="2.16 javascript中arguments相关的问题"></a>2.16 javascript中arguments相关的问题</h4><p><strong>参考答案：</strong></p><p><strong>arguments</strong></p><p>在js中，我们在调用有参数的函数时，当往这个调用的有参函数传参时，js会把所传的参数全部存到一个叫arguments的对象里面。它是一个<strong>类数组数据</strong></p><p><strong>由来</strong></p><p>Javascrip中每个函数都会有一个Arguments对象实例arguments，引用着函数的实参。它是寄生在js函数当中的，不能显式创建，arguments对象只有函数开始时才可用</p><p><strong>作用</strong></p><p>有了arguments这个对象之后，我们可以不用给函数预先设定形参了，可以动态地通过arguments为函数加入参数</p><h4 id="2-17-instanceOf-原理，手动实现-function-isInstanceOf-child-Parent"><a href="#2-17-instanceOf-原理，手动实现-function-isInstanceOf-child-Parent" class="headerlink" title="2.17 instanceOf 原理，手动实现 function isInstanceOf (child, Parent)"></a>2.17 instanceOf 原理，手动实现 function isInstanceOf (child, Parent)</h4><p><strong>参考答案</strong>：</p><p>instanceof主要作用就是判断一个实例是否属于某种类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> no = <span class="keyword">new</span> <span class="title function_">person</span>()</span><br><span class="line">no <span class="keyword">instanceof</span> person<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>instanceOf 原理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">new_instance_of</span>(<span class="params">leftVaule, rightVaule</span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> rightProto = rightVaule.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">    leftVaule = leftVaule.<span class="property">__proto__</span>; <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftVaule === rightProto) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;    </span><br><span class="line">        &#125; </span><br><span class="line">        leftVaule = leftVaule.<span class="property">__proto__</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实 instanceof 主要的实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false，告诉我们左边变量并非是右边变量的实例。</p><p>同时还要了解js的原型继承原理</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646121650388/2B869BED138922220E1DC0C5C1B898EE" alt="img"></p><p>我们知道每个 JavaScript 对象均有一个隐式的 proto 原型属性，而显式的原型属性是 prototype，只有 Object.prototype.proto 属性在未修改的情况下为 null 值</p><p>手动实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instance_of</span>(<span class="params">L, R</span>) &#123;<span class="comment">//L 表示左表达式，R 表示右表达式</span></span><br><span class="line">    <span class="keyword">var</span> O = R.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    L = L.<span class="property">__proto__</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (L === <span class="literal">null</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">if</span> (O === L) <span class="comment">// 这里重点：当 O 严格等于 L 时，返回true </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        L = L.<span class="property">__proto__</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始测试</span></span><br><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">child</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">father</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">child.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">father</span>() </span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title function_">child</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(a, <span class="title class_">Array</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(b, <span class="title class_">Object</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(b, <span class="title class_">Array</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(a, <span class="title class_">Object</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(c, <span class="title class_">Foo</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(d, child)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instance_of</span>(d, father)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2-18-数组去重"><a href="#2-18-数组去重" class="headerlink" title="2.18 数组去重"></a>2.18 数组去重</h4><p><strong>参考答案：</strong></p><p><strong>1. 利用ES6 Set去重（ES6中最常用）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"> <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure><p>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</p><p><strong>2. 利用for嵌套for，然后splice去重（ES5中最常用）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><p>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</p><p><strong>3. 利用indexOf去重</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">   <span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</p><p><strong>4. 利用sort()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</p><p><strong>5. 利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">     <span class="keyword">var</span>  obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]    //两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><p><strong>6. 利用includes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">                    array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p><strong>7. 利用hasOwnProperty</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span></span><br></pre></td></tr></table></figure><p>利用hasOwnProperty 判断是否存在对象属性</p><p><strong>8. 利用filter</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>9. 利用递归去重</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> array= arr;</span><br><span class="line">        <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>])&#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><p><strong>10. 利用Map数据结构去重</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">      array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><p>创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</p><p><strong>11. 利用reduce+includes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><p><strong>12. […new Set(arr)]</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)] </span><br><span class="line"><span class="comment">//代码就是这么少----（其实，严格来说并不算是一种，相对于第一种方法来说只是简化了代码）</span></span><br></pre></td></tr></table></figure><h4 id="2-19-编码和字符集的区别"><a href="#2-19-编码和字符集的区别" class="headerlink" title="2.19 编码和字符集的区别"></a>2.19 编码和字符集的区别</h4><p><strong>参考答案：</strong></p><p>字符集是书写系统字母与符号的集合，而字符编码则是将字符映射为一特定的字节或字节序列，是一种规则。通常特定的字符集采用特定的编码方式（即一种字符集对应一种字符编码（例如：ASCII、IOS-8859-1、GB2312、GBK，都是即表示了字符集又表示了对应的字符编码，但Unicode不是，它采用现代的模型））</p><p><strong>扩展：</strong></p><p>字符：在计算机和电信技术中，一个字符是一个单位的字形、类字形单位或符号的基本信息。即一个字符可以是一个中文汉字、一个英文字母、一个阿拉伯数字、一个标点符号等。</p><p>字符集：多个字符的集合。例如GB2312是中国国家标准的简体中文字符集，GB2312收录简化汉字（6763个）及一般符号、序号、数字、拉丁字母、日文假名、希腊字母、俄文字母、汉语拼音符号、汉语注音字母，共 7445 个图形字符。</p><p>字符编码：把字符集中的字符编码为（映射）指定集合中的某一对象（例如：比特模式、自然数序列、电脉冲），以便文本在计算机中存储和通过通信网络的传递。</p><h4 id="2-20-null-和-undefined-的区别，如何让一个属性变为null"><a href="#2-20-null-和-undefined-的区别，如何让一个属性变为null" class="headerlink" title="2.20 null 和 undefined 的区别，如何让一个属性变为null"></a>2.20 null 和 undefined 的区别，如何让一个属性变为null</h4><p><strong>参考答案：</strong></p><p>undefined 表示一个变量自然的、最原始的状态值，而 null 则表示一个变量被人为的设置为空对象，而不是原始状态。所以，在实际使用过程中，为了保证变量所代表的语义，不要对一个变量显式的赋值 undefined，当需要释放一个对象时，直接赋值为 null 即可。</p><p><strong>解析：</strong></p><p><strong>undefined</strong> 的字面意思就是：未定义的值 。这个值的语义是，希望<strong>表示一个变量最原始的状态，而非人为操作的结果 。</strong> 这种原始状态会在以下 4 种场景中出现：</p><ol><li>声明了一个变量，但没有赋值</li><li>访问对象上不存在的属性</li><li>函数定义了形参，但没有传递实参</li><li>使用 void 对表达式求值</li></ol><p>因此，undefined 一般都来自于某个表达式最原始的状态值，不是人为操作的结果。当然，你也可以手动给一个变量赋值 undefined，但这样做没有意义，因为一个变量不赋值就是 undefined 。</p><p><strong>null</strong> 的字面意思是：空值 。这个值的语义是，希望<strong>表示 一个对象被人为的重置为空对象，而非一个变量最原始的状态 。</strong> 在内存里的表示就是，栈中的变量没有指向堆中的内存对象</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646121680358/0B3EF648CF963F2F1CFB70DE3D6350F4" alt="img"></p><p>null 有属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，<strong>二进制的前三位为 0 会被 typeof 判断为对象类型</strong>，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。</p><h4 id="2-21-数组和伪数组的区别"><a href="#2-21-数组和伪数组的区别" class="headerlink" title="2.21 数组和伪数组的区别"></a>2.21 数组和伪数组的区别</h4><p><strong>参考答案</strong>：</p><ol><li>定义</li></ol><ul><li>数组是一个特殊对象,与常规对象的区别：<ul><li>当由新元素添加到列表中时，自动更新length属性</li><li>设置length属性，可以截断数组</li><li>从Array.protoype中继承了方法</li><li>属性为’Array’</li></ul></li><li>类数组是一个拥有length属性，并且他属性为非负整数的普通对象，类数组不能直接调用数组方法。</li></ul><ol><li>区别<br>本质：类数组是简单对象，它的原型关系与数组不同。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型关系和原始值转换</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="title function_">toString</span>()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike.<span class="title function_">valueOf</span>()); <span class="comment">// &#123;length: 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">toString</span>()); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">valueOf</span>()); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><ol><li>类数组转换为数组</li></ol><ul><li>转换方法<ul><li>使用Array.from()</li><li>使用Array.prototype.slice.call()</li><li>使用Array.prototype.forEach()进行属性遍历并组成新的数组</li></ul></li><li>转换须知<ul><li>转换后的数组长度由length属性决定。索引不连续时转换结果是连续的，会自动补位。</li><li>代码示例</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> al1 = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(al1)) <span class="comment">// [0, 1, undefined, 3]</span></span><br></pre></td></tr></table></figure><ul><li>②仅考虑 0或正整数 的索引</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="keyword">let</span> al2 = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;-1&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(al2)); <span class="comment">// [0, 1, undefined, undefined]</span></span><br></pre></td></tr></table></figure><ul><li>③使用slice转换产生稀疏数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="keyword">let</span> al2 = &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;-1&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(al2)); <span class="comment">//[0, 1, empty × 2]</span></span><br></pre></td></tr></table></figure><ol><li>使用数组方法操作类数组注意地方</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike2 = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">push</span>: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push 操作的是索引值为 length 的位置</span></span><br><span class="line">arrayLike2.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike2); <span class="comment">// &#123;2: 1, 3: 4, length: 3, push: ƒ&#125;</span></span><br><span class="line">arrayLike2.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayLike2); <span class="comment">// &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-22-手写一个发布订阅"><a href="#2-22-手写一个发布订阅" class="headerlink" title="2.22 手写一个发布订阅"></a>2.22 手写一个发布订阅</h4><p><strong>参考答案</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布订阅中心, on-订阅, off取消订阅, emit发布, 内部需要一个单独事件中心caches进行存储;</span></span><br><span class="line">interface <span class="title class_">CacheProps</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: string]: <span class="title class_">Array</span>&lt;(<span class="function">(<span class="params">data?: unknown</span>) =&gt;</span> <span class="keyword">void</span>)&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  private <span class="attr">caches</span>: <span class="title class_">CacheProps</span> = &#123;&#125;; <span class="comment">// 事件中心</span></span><br><span class="line">  on (<span class="attr">eventName</span>: string, <span class="attr">fn</span>: <span class="function">(<span class="params">data?: unknown</span>) =&gt;</span> <span class="keyword">void</span>)&#123; <span class="comment">// eventName事件名-独一无二, fn订阅后执行的自定义行为</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">caches</span>[eventName] = <span class="variable language_">this</span>.<span class="property">caches</span>[eventName] || [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">caches</span>[eventName].<span class="title function_">push</span>(fn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit (<span class="attr">eventName</span>: string, data?: unknown) &#123; <span class="comment">// 发布 =&gt; 将订阅的事件进行统一执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">caches</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">caches</span>[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn: (data?: unknown) =&gt; <span class="keyword">void</span></span>) =&gt;</span> <span class="title function_">fn</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off (<span class="attr">eventName</span>: string, fn?: <span class="function">(<span class="params">data?: unknown</span>) =&gt;</span> <span class="keyword">void</span>) &#123; <span class="comment">// 取消订阅 =&gt; 若fn不传, 直接取消该事件所有订阅信息</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">caches</span>[eventName]) &#123;</span><br><span class="line">      <span class="keyword">const</span> newCaches = fn ? <span class="variable language_">this</span>.<span class="property">caches</span>[eventName].<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> e !== fn) : [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">caches</span>[eventName] = newCaches;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-23-手写数组转树"><a href="#2-23-手写数组转树" class="headerlink" title="2.23 手写数组转树"></a>2.23 手写数组转树</h4><p><strong>参考答案</strong>：</p><p><strong>问题：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如将 input 转成output的形式</span></span><br><span class="line"><span class="keyword">let</span> input = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">val</span>: <span class="string">&#x27;学校&#x27;</span>, <span class="attr">parentId</span>: <span class="literal">null</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">val</span>: <span class="string">&#x27;班级1&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">val</span>: <span class="string">&#x27;班级2&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">val</span>: <span class="string">&#x27;学生1&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">val</span>: <span class="string">&#x27;学生2&#x27;</span>, <span class="attr">parentId</span>: <span class="number">2</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">val</span>: <span class="string">&#x27;学生3&#x27;</span>, <span class="attr">parentId</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">val</span>: <span class="string">&#x27;学校&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&#x27;班级1&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">val</span>: <span class="string">&#x27;学生1&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: []</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">val</span>: <span class="string">&#x27;学生2&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&#x27;班级2&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">val</span>: <span class="string">&#x27;学生3&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: []</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>答案</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayToTree</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> root = array[<span class="number">0</span>]</span><br><span class="line">    array.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">let</span> tree = &#123;</span><br><span class="line">        <span class="attr">id</span>: root.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">val</span>: root.<span class="property">val</span>,</span><br><span class="line">        <span class="attr">children</span>: array.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="title function_">toTree</span>(root.<span class="property">id</span>, array) : []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toTree</span>(<span class="params">parenId, array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> children = []</span><br><span class="line">    <span class="keyword">let</span> len = array.<span class="property">length</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = array[i]</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">parentId</span> === parenId) &#123;</span><br><span class="line">            children.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">id</span>: node.<span class="property">id</span>,</span><br><span class="line">                <span class="attr">val</span>: node.<span class="property">val</span>,</span><br><span class="line">                <span class="attr">children</span>: <span class="title function_">toTree</span>(node.<span class="property">id</span>, array)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> children</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrayToTree</span>(input))</span><br></pre></td></tr></table></figure><h4 id="2-24-介绍下-Set、Map、WeakSet-和-WeakMap-的区别？"><a href="#2-24-介绍下-Set、Map、WeakSet-和-WeakMap-的区别？" class="headerlink" title="2.24 介绍下 Set、Map、WeakSet 和 WeakMap 的区别？"></a>2.24 介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h4><p><strong>参考答案</strong>：</p><p><strong>Set</strong></p><ol><li>成员不能重复；</li><li>只有键值，没有键名，有点类似数组；</li><li>可以遍历，方法有add、delete、has</li></ol><p><strong>WeakSet</strong></p><ol><li>成员都是对象（引用）；</li><li>成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不容易造成内存泄露；</li><li>不能遍历，方法有add、delete、has；</li></ol><p><strong>Map</strong></p><ol><li>本质上是键值对的集合，类似集合；</li><li>可以遍历，方法很多，可以跟各种数据格式转换；</li></ol><p><strong>WeakMap</strong></p><ol><li>只接收对象为键名（null 除外），不接受其他类型的值作为键名；</li><li>键名指向的对象，不计入垃圾回收机制；</li><li>不能遍历，方法同get、set、has、delete；</li></ol><h4 id="2-25-简单说说-js-中有哪几种内存泄露的情况"><a href="#2-25-简单说说-js-中有哪几种内存泄露的情况" class="headerlink" title="2.25 简单说说 js 中有哪几种内存泄露的情况"></a>2.25 简单说说 js 中有哪几种内存泄露的情况</h4><p><strong>参考答案</strong>：</p><ol><li>意外的全局变量；</li><li>闭包；</li><li>未被清空的定时器；</li><li>未被销毁的事件监听；</li><li>DOM 引用；</li></ol><h4 id="2-26-异步笔试题"><a href="#2-26-异步笔试题" class="headerlink" title="2.26 异步笔试题"></a>2.26 异步笔试题</h4><p>请写出下面代码的运行结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 今日头条面试题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;settimeout&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><p>题目的本质，就是考察setTimeout、promise、async await的实现及执行顺序，以及 JS 的事件循环的相关问题。</p><p>答案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">settimeout</span><br></pre></td></tr></table></figure><h4 id="2-27-json和xml数据的区别"><a href="#2-27-json和xml数据的区别" class="headerlink" title="2.27 json和xml数据的区别"></a>2.27 json和xml数据的区别</h4><p><strong>参考答案</strong>：</p><ol><li>数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。</li><li>数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。</li><li>数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互</li><li>数据描述方面：json对数据的描述性比xml较差</li><li>xml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。</li></ol><h4 id="2-28-JavaScript有几种方法判断变量的类型"><a href="#2-28-JavaScript有几种方法判断变量的类型" class="headerlink" title="2.28 JavaScript有几种方法判断变量的类型?"></a>2.28 JavaScript有几种方法判断变量的类型?</h4><p><strong>参考答案</strong>：</p><ol><li>使用typeof检测当需要判断变量是否是number, string, boolean, function, undefined等类型时，可以使用typeof进行判断。</li><li>使用instanceof检测instanceof运算符与typeof运算符相似，用于识别正在处理的对象的类型。与typeof方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。</li><li>使用constructor检测constructor本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。</li></ol><h4 id="2-29-代码解释题"><a href="#2-29-代码解释题" class="headerlink" title="2.29 代码解释题"></a>2.29 代码解释题</h4><p><strong>参考答案</strong>：</p><p>题目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>();</span><br><span class="line">max = <span class="title class_">Math</span>.<span class="title function_">max</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min &lt; max);</span><br><span class="line"><span class="comment">// 写出执行结果，并解释原因</span></span><br></pre></td></tr></table></figure><p><strong>答案</strong><br>false</p><p><strong>解析</strong></p><ul><li>按常规的思路，这段代码应该输出 true，毕竟最小值小于最大值。但是却输出 false</li><li>MDN 相关文档是这样解释的<ul><li>Math.min 的参数是 0 个或者多个，如果多个参数很容易理解，返回参数中最小的。如果没有参数，则返回 Infinity，无穷大。</li><li>而 Math.max 没有传递参数时返回的是-Infinity.所以输出 false</li></ul></li></ul><h4 id="2-30-代码解析题"><a href="#2-30-代码解析题" class="headerlink" title="2.30 代码解析题"></a>2.30 代码解析题</h4><p><strong>参考答案</strong>：</p><p><strong>题目</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> company = &#123;</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;beijing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> yideng = <span class="title class_">Object</span>.<span class="title function_">create</span>(company);</span><br><span class="line"><span class="keyword">delete</span> yideng.<span class="property">address</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yideng.<span class="property">address</span>);</span><br><span class="line"><span class="comment">// 写出执行结果，并解释原因</span></span><br></pre></td></tr></table></figure><p><strong>答案</strong><br>beijing</p><p><strong>解析</strong><br>这里的 yideng 通过 prototype 继承了 company的 address。yideng自己并没有address属性。所以delete操作符的作用是无效的。</p><p><strong>扩展</strong><br>1.delete使用原则：delete 操作符用来删除一个对象的属性。<br>2.delete在删除一个不可配置的属性时在严格模式和非严格模式下的区别:<br>（1）在严格模式中，如果属性是一个不可配置（non-configurable）属性，删除时会抛出异常;<br>（2）非严格模式下返回 false。<br>3.delete能删除隐式声明的全局变量：这个全局变量其实是global对象(window)的属性<br>4.delete能删除的：<br>（1）可配置对象的属性（2）隐式声明的全局变量 （3）用户定义的属性 （4）在ECMAScript 6中，通过 const 或 let 声明指定的 “temporal dead zone” (TDZ) 对 delete 操作符也会起作用<br>delete不能删除的：<br>（2）显式声明的全局变量 （2）内置对象的内置属性 （3）一个对象从原型继承而来的属性<br>5.delete删除数组元素：<br>（1）当你删除一个数组元素时，数组的 length 属性并不会变小，数组元素变成undefined<br>（2）当用 delete 操作符删除一个数组元素时，被删除的元素已经完全不属于该数组。<br>（3）如果你想让一个数组元素的值变为 undefined 而不是删除它，可以使用 undefined 给其赋值而不是使用 delete 操作符。此时数组元素是在数组中的<br>6.delete 操作符与直接释放内存（只能通过解除引用来间接释放）没有关系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-变量&quot;&gt;&lt;a href=&quot;#JavaScript-变量&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 变量&quot;&gt;&lt;/a&gt;JavaScript 变量&lt;/h1&gt;&lt;h2 id=&quot;var、let、const-的差异？&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://dont-sleep-so-late.github.io/tags/JavaScript/"/>
    
    <category term="八股文" scheme="https://dont-sleep-so-late.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Vue八股文</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/07/%E5%85%AB%E8%82%A1%E6%96%87/Vue%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/07/%E5%85%AB%E8%82%A1%E6%96%87/Vue%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2024-03-07T15:31:36.000Z</published>
    <updated>2024-04-03T04:55:57.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-的设计模式"><a href="#Vue-的设计模式" class="headerlink" title="Vue 的设计模式"></a>Vue 的设计模式</h2><h3 id="介绍一下-MVVM-模式，和-MVC-模式有什么区别？"><a href="#介绍一下-MVVM-模式，和-MVC-模式有什么区别？" class="headerlink" title="介绍一下 MVVM 模式，和 MVC 模式有什么区别？"></a>介绍一下 MVVM 模式，和 MVC 模式有什么区别？</h3><p>MVVM 即 Model-View-ViewModel 的简写，即模型-视图-视图模型。模型（Model）指的是后端传递的数据。视图（View）指的是所看到的页面。视图模型（ViewModel）是 MVVM 模式的核心，它是连接 View 和 Model 的桥梁。<br>视图模型有两个方向的作用：<br>1.将模型（Model）转化成视图（View），即将后端传递的数据转化成所看到的页面，实现的方式是：数据绑定。<br>2.将视图（View）转化成模型（Model），即将所看到的页面转化成后端的数据，实现的方式是：DOM 事件监听。当这两个方向的数据转换都实现时，我们称之为数据的双向绑定。</p><p><strong>MVVM模型图解：</strong></p><p><img src="https://pic.leetcode.cn/1677830973-gNoWGQ-image.png"></p><p>MVC 是 Model-View-Controller 的简写，即模型-视图-控制器。M 和 V 指的意思和 MVVM 中的 M 和 V 意思一样。C 即 Controller 指的是页面业务逻辑。使用 MVC 的目的就是将 M 和 V 的代码分离。MVC 是单向通信，也就是 View 跟 Model ，必须通过 Controller 来承上启下。</p><p><strong>MVC模型图解：</strong></p><p><img src="https://pic.leetcode.cn/1677830876-FXzrYJ-image.png"></p><p>MVVM 与 MVC 最大的区别就是：MVVM 实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（双向绑定）。</p><hr><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="Vue2-的生命周期有哪些"><a href="#Vue2-的生命周期有哪些" class="headerlink" title="Vue2 的生命周期有哪些"></a>Vue2 的生命周期有哪些</h3><p>生命周期可以理解为三部分，第一部分为初始化 Vue 实例的过程，第二部分为数据渲染，更新 Dom 的过程，第三部分为销毁实例的过程，每一个部分都有对应的钩子函数来完成对应的部分过程。</p><p>初始化阶段的钩子函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>()<span class="comment">//实例创建前：模板和数据均未获取到</span></span><br><span class="line"><span class="title function_">created</span>()<span class="comment">//实例创建后：最早可以获得data数据，但模板还未获取到</span></span><br><span class="line"><span class="title function_">beforfeMount</span>()<span class="comment">//数据挂载前：模板已经获取到，但是数据未挂载到模板上</span></span><br><span class="line"><span class="title function_">mounted</span>()<span class="comment">//数据挂载后：数据已挂载到模板中</span></span><br></pre></td></tr></table></figure><p>更新阶段的钩子函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beforeUpdate()//模板更新前：data改变后，更新数据模板前调用 </span><br><span class="line">updated()//模板更新后：将data渲染到数据模板中</span><br></pre></td></tr></table></figure><p>销毁阶段的钩子函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeDestroy</span>() <span class="comment">//实例销毁前 </span></span><br><span class="line"><span class="title function_">destroyed</span>() <span class="comment">//实例销毁后</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240307234024.png"></p><h3 id="keep-alive-中的生命周期有哪些"><a href="#keep-alive-中的生命周期有哪些" class="headerlink" title="keep-alive 中的生命周期有哪些"></a>keep-alive 中的生命周期有哪些</h3><p>keep-alive 是 Vue 提供的一个内置组件，用来对组件进行缓存，在组件切换过程中将状态保留在内存中，防止重复渲染 DOM。 如果为一个组件包裹了 keep-alive，那么它会多出两个生命周期：deactivated、activated。同时，beforeDestroy 和 destroyed 就不会再被触发了，因为组件不会被真正销毁。 当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期； 当组件被切回来时，再去缓存里找这个组件、触发 activated 钩子函数。</p><h3 id="父子组件生命周期执行顺序"><a href="#父子组件生命周期执行顺序" class="headerlink" title="父子组件生命周期执行顺序"></a>父子组件生命周期执行顺序</h3><h4 id="1-挂载阶段"><a href="#1-挂载阶段" class="headerlink" title="1.挂载阶段"></a>1.挂载阶段</h4><p>该过程主要涉及 beforeCreate、created、beforeMount、mounted 4 个钩子函数。执行顺序为：<br>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p><p>一定得等子组件挂载完毕后，父组件才能挂在完毕，所以父组件的 mounted 在最后。</p><h4 id="2-更新阶段"><a href="#2-更新阶段" class="headerlink" title="2.更新阶段"></a>2.更新阶段</h4><p>该过程主要涉及 beforeUpdate、updated 2 个钩子函数。注意，当父子组件有数据传递时，才有这个更新阶段执行顺序的比较。执行顺序为：</p><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p><h4 id="3-销毁阶段"><a href="#3-销毁阶段" class="headerlink" title="3.销毁阶段"></a>3.销毁阶段</h4><p>该过程主要涉及beforeDestroy、destroyed 2 个钩子函数。执行顺序为：<br>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1.当父组件执行完 beforeMount 挂载开始后，会依次执行子组件中的钩子，直到全部子组件 mounted 挂载到实例上，父组件才会进入 mounted 钩子</p><p>2.子级触发事件，会先触发父级 beforeUpdate 钩子，再去触发子级 beforeUpdate 钩子，下面又是先执行子级 updated 钩子，后执行父级 updated 钩子</p><h3 id="平时发送异步请求在哪个生命周期，并解释原因"><a href="#平时发送异步请求在哪个生命周期，并解释原因" class="headerlink" title="平时发送异步请求在哪个生命周期，并解释原因"></a>平时发送异步请求在哪个生命周期，并解释原因</h3><p>我们可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：能更快获取到服务端数据，减少页面加载时间，用户体验更好；SSR 不支持 beforeMount 、mounted 钩子函数，放在 created 中有助于一致性。</p><h4 id="【延伸问答】created-和-mouted-区别"><a href="#【延伸问答】created-和-mouted-区别" class="headerlink" title="【延伸问答】created 和 mouted 区别"></a>【延伸问答】created 和 mouted 区别</h4><p>created 生命周期钩子函数会在组件实例被创建之后立即调用，但是此时组件的模板还没有被渲染成 HTML，因此在这个时候不能访问组件中的 DOM 元素。</p><p>mounted 生命周期钩子函数则会在组件的模板被渲染成 HTML 之后调用，这个时候可以访问组件中的 DOM 元素。通常在这个钩子函数中进行异步请求数据、初始化插件、订阅事件等操作。</p><p>总之，created 钩子函数适用于组件初始化时需要进行一些操作，而 mounted 钩子函数适用于需要操作组件的 DOM 元素时。</p><h2 id="1-Vue面试题"><a href="#1-Vue面试题" class="headerlink" title="1. Vue面试题"></a>1. Vue面试题</h2><h4 id="1-1-v-model-作用？"><a href="#1-1-v-model-作用？" class="headerlink" title="1.1 v-model 作用？"></a>1.1 v-model 作用？</h4><p><strong>参考答案：</strong></p><p>v-model本质上不过是语法糖，可以用 v-model 指令在<strong>表单</strong>及<strong>元素</strong>上创建双向数据绑定。</p><ol><li>它会根据控件类型自动选取正确的方法来更新元素</li><li>它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理</li><li>v-model会忽略所有表单元素的value、checked、selected特性的初始值,而总是将 Vue 实例的数据作为数据来源，因此我们应该通过 JavaScript 在组件的data选项中声明初始值</li></ol><p><strong>扩展：</strong></p><p>v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ol><li>text 和 textarea 元素使用value属性和input事件；</li><li>checkbox 和 radio 使用checked属性和change事件；</li><li>select 字段将value作为 prop 并将change作为事件。</li></ol><h4 id="1-2-v-model-实现原理？"><a href="#1-2-v-model-实现原理？" class="headerlink" title="1.2 v-model 实现原理？"></a>1.2 v-model 实现原理？</h4><p><strong>参考答案：</strong></p><p>v-model只不过是一个语法糖而已,真正的实现靠的还是</p><ol><li>v-bind:绑定响应式数据</li><li>触发oninput 事件并传递数据</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;sth&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;sth&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;sth = $event.target.value&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自html5开始,input每次输入都会触发oninput事件，所以输入时input的内容会绑定到sth中，于是sth的值就被改变--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$event 指代当前触发的事件对象;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$event.target 指代当前触发的事件对象的dom;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$event.target.value 就是当前dom的value值;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在@input方法中，value =&gt; sth;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在:value中,sth =&gt; value;--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-Vue2-0-双向绑定的缺陷？"><a href="#1-3-Vue2-0-双向绑定的缺陷？" class="headerlink" title="1.3 Vue2.0 双向绑定的缺陷？"></a>1.3 Vue2.0 双向绑定的缺陷？</h4><p><strong>参考答案：</strong></p><p>Vue2.0的数据响应是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty () 来劫持各个属性的setter、getter，但是它并不算是实现数据的响应式的完美方案，某些情况下需要对其进行修补或者hack这也是它的缺陷，主要表现在两个方面：</p><ol><li>vue 实例创建后，无法检测到对象属性的新增或删除，只能追踪到数据是否被修改<ol><li>不能监听数组的变化</li></ol></li></ol><p><strong>解析：</strong></p><ol><li><p>vue 实例创建后，无法检测到对象属性的新增或删除，只能追踪到数据是否被修改(Object.defineProperty只能劫持对象的属性)。</p><p>当创建一个Vue实例时，将遍历所有DOM对象，并为每个数据属性添加了get和set。get和set 允许Vue观察数据的更改并触发更新。但是，如果你在Vue实例化后添加（或删除）一个属性，这个属性不会被vue处理，改变get和set。</p><p>解决方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(obj, propertName/index, value)</span><br><span class="line"><span class="comment">// 响应式对象的子对象新增属性，可以给子响应式对象重新赋值</span></span><br><span class="line">data.<span class="property">location</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">data.<span class="property">location</span> = &#123;...data, <span class="attr">z</span>: <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能监听数组的变化</p><p>vue在实现数组的响应式时，它使用了一些hack，把无法监听数组的情况通过重写数组的部分方法来实现响应式，这也只限制在数组的push&#x2F;pop&#x2F;shift&#x2F;unshift&#x2F;splice&#x2F;sort&#x2F;reverse七个方法，其他数组方法及数组的使用则无法检测到，例如如下两种使用方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vm.<span class="property">items</span>[index] = newValue;</span><br><span class="line">vm.<span class="property">items</span>.<span class="property">length</span></span><br></pre></td></tr></table></figure><p>vue实现数组响应式的方法</p><p>通过重写数组的Array.prototype对应的方法，具体来说就是重新指定要操作数组的prototype，并重新该prototype中对应上面的7个数组方法，通过下面代码简单了解下实现原理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = [<span class="string">&#x27;pop&#x27;</span>,<span class="string">&#x27;shift&#x27;</span>,<span class="string">&#x27;unshift&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;reverse&#x27;</span>,<span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;push&#x27;</span>];</span><br><span class="line"><span class="comment">// 复制Array.prototype，并将其prototype指向Array.prototype</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">methods.<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    proto[method] = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 重写proto中的数组方法</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[method].<span class="title function_">call</span>(<span class="variable language_">this</span>, ...<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="title function_">viewRender</span>() <span class="comment">// 视图更新</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)) &#123; <span class="comment">// 数组实现响应式</span></span><br><span class="line">                obj.<span class="property">__proto__</span> = proto; <span class="comment">// 改变传入数组的prototype</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                ... <span class="comment">// 对象的响应式实现</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-4-Vue3-0-实现数据双向绑定的方法"><a href="#1-4-Vue3-0-实现数据双向绑定的方法" class="headerlink" title="1.4 Vue3.0 实现数据双向绑定的方法"></a>1.4 Vue3.0 实现数据双向绑定的方法</h4><p><strong>参考答案:</strong></p><p>vue3.0 实现数据双向绑定是通过<strong>Proxy</strong></p><p><strong>Proxy</strong>是 ES6 中新增的一个特性，翻译过来意思是”代理”，用在这里表示由它来“代理”某些操作。 Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><p>使用 Proxy 的核心优点是可以交由它来处理一些非核心逻辑（如：读取或设置对象的某些属性前记录日志；设置对象的某些属性值前，需要验证；某些属性的访问控制等）。 从而可以让对象只需关注于核心逻辑，达到关注点分离，降低对象复杂度等目的。</p><p><strong>扩展：</strong></p><p>使用proxy实现，双向数据绑定，相比2.0的Object.defineProperty ()优势：</p><ol><li>可以劫持整个对象，并返回一个新对象</li><li>有13种劫持操作</li></ol><h4 id="1-5-Vuex是什么，每个属性是干嘛的，如何使用"><a href="#1-5-Vuex是什么，每个属性是干嘛的，如何使用" class="headerlink" title="1.5 Vuex是什么，每个属性是干嘛的，如何使用"></a>1.5 Vuex是什么，每个属性是干嘛的，如何使用</h4><p><strong>参考答案：</strong></p><p>Vuex是什么？</p><p>Vuex是专门为Vuejs应用程序设计的<strong>状态管理工具</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</p><p>具体工作：vuex是一种状态管理机制，将全局组件的共享状态抽取出来为一个store，以一个单例模式存在，应用任何一个组件中都可以使用，vuex更改state的唯一途径是通过mutation，mutation需要commit触发, action实际触发是mutation，其中mutation处理同步任务，action处理异步任务。</p><p>Vuex每个属性是干嘛的？</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128565972/EB5115B586566907B3B642BA58A4482A" alt="img"></p><p>Vuex的属性包含以下6个：</p><p>1）state</p><p>state是存储的单一状态，是存储的基本数据。</p><p>2）Getters</p><p>getters是store的计算属性，对state的加工，是派生出来的数据。就像computed计算属性一样，getter返回的值会根据它的依赖被缓存起来，且只有当它的依赖值发生改变才会被重新计算。</p><p>3）Mutations</p><p>mutations提交更改数据，使用store.commit方法更改state存储的状态。（mutations同步函数）</p><p>4）Actions</p><p>actions像一个装饰器，提交mutation，而不是直接变更状态。（actions可以包含任何异步操作）</p><p>5）Module</p><p>Module是store分割的模块，每个模块拥有自己的state、getters、mutations、actions。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>6）辅助函数</p><p>Vuex提供了mapState、MapGetters、MapActions、mapMutations等辅助函数给开发在vm中处理store。</p><p>Vuex的使用方法？</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128588464/5ACC9FABB642EADBED3478A9397CEF15" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>); <span class="comment">// 1. vue的插件机制，安装vuex</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123; <span class="comment">// 2.实例化store，调用install方法</span></span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    modules,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    plugins</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="comment">// 3.注入store, 挂载vue实例</span></span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(app)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-6-Vuex实现原理"><a href="#1-6-Vuex实现原理" class="headerlink" title="1.6 Vuex实现原理"></a>1.6 Vuex实现原理</h4><p><strong>参考答案：</strong></p><p>通过以下三个方面来阐述vuex的实现原理：</p><ul><li>store是怎么注册的?</li><li>mutation，commit 是怎么实现的?</li><li>辅助函数是怎么实现的?</li></ul><ol><li><p>store是怎么注册的?</p><p>我们看到Vuex在vue 的生命周期中的初始化钩子前插入一段 Vuex 初始化代码。给 Vue 的实例注入一个</p><p>$store的属性，这也就是为什么我们在 Vue 的组件中可以通过this.$store.xxx, 访问到 Vuex 的各种数据和状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取当前 Vue 的版本</span></span><br><span class="line">  <span class="keyword">const</span> version = <span class="title class_">Number</span>(<span class="title class_">Vue</span>.<span class="property">version</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 2.x 通过 hook 的方式注入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 兼容 1.x</span></span><br><span class="line">    <span class="comment">// 使用自定义的 _init 方法并替换 Vue 对象原型的_init方法，实现注入</span></span><br><span class="line">    <span class="keyword">const</span> _init = <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">      options.<span class="property">init</span> = options.<span class="property">init</span></span><br><span class="line">        ? [vuexInit].<span class="title function_">concat</span>(options.<span class="property">init</span>)</span><br><span class="line">        : vuexInit</span><br><span class="line">      _init.<span class="title function_">call</span>(<span class="variable language_">this</span>, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">vuexInit</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span></span><br><span class="line">    <span class="comment">// store 注入</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">store</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span> = <span class="keyword">typeof</span> options.<span class="property">store</span> === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">        ? options.<span class="title function_">store</span>()</span><br><span class="line">        : options.<span class="property">store</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">parent</span> &amp;&amp; options.<span class="property">parent</span>.<span class="property">$store</span>) &#123;</span><br><span class="line">      <span class="comment">// 子组件从其父组件引用 $store 属性</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span> = options.<span class="property">parent</span>.<span class="property">$store</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mutations，commit 是怎么实现的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">registerMutation</span> (store, type, handler, local) &#123;</span><br><span class="line">  <span class="comment">// 获取 type(module.mutations 的 key) 对应的 mutations, 没有就创建一个空数组</span></span><br><span class="line">  <span class="keyword">const</span> entry = store.<span class="property">_mutations</span>[type] || (store.<span class="property">_mutations</span>[type] = [])</span><br><span class="line">  <span class="comment">// push 处理过的 mutation handler</span></span><br><span class="line">  entry.<span class="title function_">push</span>(<span class="keyword">function</span> <span class="title function_">wrappedMutationHandler</span> (payload) &#123;</span><br><span class="line">    <span class="comment">// 调用用户定义的 hanler, 并传入 state 和 payload 参数</span></span><br><span class="line">    handler.<span class="title function_">call</span>(store, local.<span class="property">state</span>, payload)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>registerMutation 是对 store 的 mutation 的初始化，它接受 4 个参数，store为当前 Store 实例，type为 mutation 的 key，handler 为 mutation 执行的回调函数，path 为当前模块的路径。</p><p>mutation 的作用就是同步修改当前模块的 state ，函数首先通过 type 拿到对应的 mutation 对象数组， 然后把一个 mutation 的包装函数 push 到这个数组中，这个函数接收一个参数 payload，这个就是我们在定义 mutation 的时候接收的额外参数。这个函数执行的时候会调用 mutation 的回调函数，并通过 getNestedState(store.state, path) 方法得到当前模块的 state，和 playload 一起作为回调函数的参数。</p><p>我们知道mutation是通过commit来触发的，这里我们也来看一下commit的定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">commit (_type, _payload, _options) &#123;</span><br><span class="line">    <span class="comment">// 解析参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      type,</span><br><span class="line">      payload,</span><br><span class="line">      options</span><br><span class="line">    &#125; = <span class="title function_">unifyObjectStyle</span>(_type, _payload, _options)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 type 获取所有对应的处理过的 mutation 函数集合</span></span><br><span class="line">    <span class="keyword">const</span> mutation = &#123; type, payload &#125;</span><br><span class="line">    <span class="keyword">const</span> entry = <span class="variable language_">this</span>.<span class="property">_mutations</span>[type]</span><br><span class="line">    <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[vuex] unknown mutation type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行 mutation 函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_withCommit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      entry.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">commitIterator</span> (handler) &#123;</span><br><span class="line">        <span class="title function_">handler</span>(payload)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行所有的订阅者函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_subscribers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> <span class="title function_">sub</span>(mutation, <span class="variable language_">this</span>.<span class="property">state</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">      options &amp;&amp; options.<span class="property">silent</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">    <span class="string">`[vuex] mutation type: <span class="subst">$&#123;type&#125;</span>. Silent option has been removed. `</span> +</span><br><span class="line">        <span class="string">&#x27;Use the filter functionality in the vue-devtools&#x27;</span></span><br><span class="line">  )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>commit 支持 3 个参数，type 表示 mutation 的类型，payload 表示额外的参数,根据 type 去查找对应的 mutation，如果找不到，则输出一条错误信息，否则遍历这个 type 对应的 mutation 对象数组，执行 handler(payload) 方法，这个方法就是之前定义的 wrappedMutationHandler(handler)，执行它就相当于执行了 registerMutation 注册的回调函数。</p></li><li><p>辅助函数</p><p>辅助函数的实现都差不太多，在这里了解一下mapState</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mapGetters = <span class="title function_">normalizeNamespace</span>(<span class="function">(<span class="params">namespace, getters</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历规范化参数后的对象</span></span><br><span class="line">  <span class="comment">// getters 就是传递给 mapGetters 的 map 对象或者数组</span></span><br><span class="line">  <span class="title function_">normalizeMap</span>(getters).<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    val = namespace + val</span><br><span class="line">    res[key] = <span class="keyword">function</span> <span class="title function_">mappedGetter</span> () &#123;</span><br><span class="line">      <span class="comment">// 一般不会传入 namespace 参数</span></span><br><span class="line">      <span class="keyword">if</span> (namespace &amp;&amp; !<span class="title function_">getModuleByNamespace</span>(<span class="variable language_">this</span>.<span class="property">$store</span>, <span class="string">&#x27;mapGetters&#x27;</span>, namespace)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果 getter 不存在则报错</span></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !(val <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[vuex] unknown getter: <span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 返回 getter 值, store.getters 可见上文 resetStoreVM 的分析</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[val]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// mark vuex getter for devtools</span></span><br><span class="line">    res[key].<span class="property">vuex</span> = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>mapState在调用了 normalizeMap 函数后，把传入的 states 转换成由 {key, val} 对象构成的数组，接着调用 forEach 方法遍历这个数组，构造一个新的对象，这个新对象每个元素都返回一个新的函数 mappedState，函数对 val 的类型判断，如果 val 是一个函数，则直接调用这个 val 函数，把当前 store 上的 state 和 getters 作为参数，返回值作为 mappedState 的返回值；否则直接把 this.$store.state[val]作为 mappedState 的返回值。为了更直观的理解，我们看下最终mapState的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: <span class="title function_">mapState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">name</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-7-mutation和action有什么区别？"><a href="#1-7-mutation和action有什么区别？" class="headerlink" title="1.7 mutation和action有什么区别？"></a>1.7 mutation和action有什么区别？</h4><p><strong>参考答案：</strong></p><p><strong>mutation</strong>：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于件： 每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进 行状态更改的地方，并且它会接受 state 作为第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Action:</strong> Action 类似于 mutation，不同在于：</p><ol><li><p>Action 提交的是 mutation，而不是直接变更状态。</p></li><li><p>Action 可以包含任意异步操作。</p><p>让我们来注册一个简单的 action：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong>事实上在 vuex 里面 actions 只是一个架构性的概念，并不是必须的，说到底只是一个函数，你在里面想干嘛都可以，只要最后触发 mutation 就行。异步竞态怎么处理那是用户自己的事情。</p><p>vuex 真正限制你的只有 mutation 必须是同步的这一点（在 redux 里面就好像 reducer 必须同步返回下一个状态一样）。同步的意义在于这样每一个 mutation 执行完成后都可以对应到一个新的状态（和 reducer 一样），这样 devtools 就可以打个 snapshot 存下来，然后就可以随便 time-travel 了。如果你开着 devtool 调用一个异步的 action，你可以清楚地看到它所调用的 mutation 是何时被记录下来的，并且可以立刻查看它们对应的状态。</p><h4 id="1-8-修改ElementUI-样式的几种方式"><a href="#1-8-修改ElementUI-样式的几种方式" class="headerlink" title="1.8 修改ElementUI 样式的几种方式?"></a>1.8 修改ElementUI 样式的几种方式?</h4><p><strong>参考答案：</strong></p><p>修改ElementUI 样式的方式有四种：</p><ol><li><p>新建全局样式表</p><p>新建 global.css 文件，并在 main.js 中引入。 global.css 文件一般都放在 src-&gt;assets 静态资源文件夹下的 style 文件夹下，在 main.js 的引用写法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./assets/style/global.css&quot;</span></span><br></pre></td></tr></table></figure><p>在 global.css 文件中写的样式，无论在哪一个 vue 单页面都会覆盖 ElementUI 默认的样式。</p></li><li><p>在当前-vue-单页面中添加一个新的style标签</p><p>在当前的vue单页面的style标签后，添加一对新的style标签，新的style标签中不要添加scoped属性。在有写scoped的style标签中书写的样式不会覆盖 ElementUI 默认的样式。</p></li><li><p>使用&#x2F;deep&#x2F;深度修改标签样式</p><p>找到需要修改的 ElementUI 标签的类名，然后在类名前加上&#x2F;deep&#x2F;，可以强制修改默认样式。这种方式可以直接用到有scoped属性的 style 标签中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 修改级联选择框的默认宽度</span><br><span class="line">/deep/ <span class="selector-class">.el-cascader</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过内联样式 或者 绑定类样式覆盖默认样式</p><p>通过内联样式 style ，绑定类样式的方式，可以在<strong>某些标签</strong>中可以直接覆盖默认样式，不是很通用。具体实例如下：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:style</span>=<span class="string">&quot;selfstyle&quot;</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">selfstyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&quot;white&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">marginTop</span>: <span class="string">&quot;10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">width</span>: <span class="string">&quot;100px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">backgroundColor</span>: <span class="string">&quot;cadetblue&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过绑定修改样式方式修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:class</span>=<span class="string">&quot;[selfbutton]&quot;</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">selfbutton</span>: <span class="string">&quot;self-button&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/stylus&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.self-button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-Color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>扩展：</strong></p><p>第一种全局引入css文件的方式，适合于对elementUI整体的修改，比如整体配色的修改；<br>第二种添加一个style标签的形式，也能够实现修改默认样式的效果，但实际上因为是修改了全局的样式，因此 在不同的vue组件中修改同一个样式有可能会有冲突。<br>第三种方式通过 &#x2F;deep&#x2F; 的方式可以很方便的在vue组件中修改默认样式，也不会于其他页面有冲突。<br>第四种方式局限性比较大，可以使用，但不推荐使用。</p><h4 id="1-9-elementui-有什么用"><a href="#1-9-elementui-有什么用" class="headerlink" title="1.9 elementui 有什么用?"></a>1.9 elementui 有什么用?</h4><p><strong>参考答案：</strong></p><p><strong>Element-UI</strong>：是一套采用 Vue 2.0 作为基础框架实现的组件库，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库，提供了配套设计资源，帮助网站快速成型</p><p><strong>扩展：</strong></p><p>Element-UI特点：</p><p>一致性 Consistency</p><ul><li>与现实生活一致：与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；</li><li>在界面中一致：所有的元素和结构需保持一致，比如：设计样式、图标和文本、元素的位置等。</li></ul><p>反馈 Feedback</p><ul><li>控制反馈：通过界面样式和交互动效让用户可以清晰的感知自己的操作；</li><li>页面反馈：操作后，通过页面元素的变化清晰地展现当前状态。</li></ul><p>效率 Efficiency</p><ul><li>简化流程：设计简洁直观的操作流程；</li><li>清晰明确：语言表达清晰且表意明确，让用户快速理解进而作出决策；</li><li>帮助用户识别：界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。</li></ul><p>可控 Controllability</p><ul><li>用户决策：根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；</li><li>结果可控：用户可以自由的进行操作，包括撤销、回退和终止当前操作等。</li></ul><h4 id="1-10-导航守卫"><a href="#1-10-导航守卫" class="headerlink" title="1.10 导航守卫"></a>1.10 导航守卫</h4><p><strong>参考答案：</strong></p><p>导航守卫主要用来<strong>通过跳转或取消的方式守卫导航</strong>。</p><p>简单的说，导航守卫就是路由跳转过程中的一些钩子函数。路由跳转是一个大的过程，这个大的过程分为跳转前中后等等细小的过程，在每一个过程中都有一函数，这个函数能让你操作一些其他的事儿的时机，这就是导航守卫。</p><p><strong>解析：</strong></p><p>路由守卫的具体方法：</p><ol><li><p>全局前置守卫</p><p>你可以使用 router.beforeEach 注册一个全局前置守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; ... &#125;)</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当一个导航开始时，全局前置守卫按照注册顺序调用。守卫是异步链式调用的，导航在最后的一层当中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;第一个全局前置守卫&#x27;</span>)</span><br><span class="line">&#125;.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;第二个全局前置守卫&#x27;</span></span><br><span class="line">&#125;.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;导航终于开始了&#x27;</span>) <span class="comment">// 导航在最后一层中</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>每个守卫方法接收三个参数（往后的守卫都大同小异）：</p><p>\1. to: Route: 即将要进入的目标 路由对象</p><p>\2. from: Route: 当前导航正要离开的路由</p><p>\3. next: Function: 一定要调用该方法将控制权交给下一个守卫，执行效果依赖 next 方法的参数。</p><p>next(): 进入下一个守卫。如果全部守卫执行完了。则导航的状态就是 confirmed (确认的)。</p><p>next(false): 中断当前的导航（把小明腿打断了）。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器 后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</p><p>next(‘&#x2F;‘) 或者 next({ path: ‘&#x2F;‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航（小 明被打断腿并且送回家了）。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。</p><p>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递router.</p><p>onError() 注册过的回调。</p><p>注意：永远不要使用两次next，这会产生一些误会。</p><ol><li><p>全局解析守卫</p><p>这和 router.beforeEach 类似，但他总是被放在最后一个执行。</p></li><li><p>全局后置钩子</p><p>导航已经确认了的，小明已经到了外婆家了，你打断他的腿他也是在外婆家了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 你并不能调用next</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路由独享的守卫</p><p>在路由内写的守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件内的守卫</p><p>5.1 beforeRouteEnter</p><p>5.2 beforeRouteUpdate (2.2 新增)</p><p>5.3 beforeRouteLeave</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 组件还未渲染出来，不能获取组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`，一般用来数据获取。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>扩展：</strong></p><p>导航全过程</p><ul><li>导航被触发。</li><li>在准备离开的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。（如果你的组件是重用的）</li><li>在路由配置里调用 beforeEnter。</li><li>解析即将抵达的组件。</li><li>在即将抵达的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</li></ul><h4 id="1-11-路由守卫进行判断登录"><a href="#1-11-路由守卫进行判断登录" class="headerlink" title="1.11 路由守卫进行判断登录"></a>1.11 路由守卫进行判断登录</h4><p><strong>参考答案：</strong></p><p>在vue项目中，切换路由时肯定会碰到需要登录的路由，其原理就是在切换路径之前进行判断，你不可能进入页面再去判断有无登录重新定向到login，那样的话会导致页面已经渲染以及它的各种请求已经发出。</p><ol><li><p>如需要登录的路由可在main.js中统一处理（全局前置守卫）</p><p>我们可以在入口文件man.js里面进行配置，使用router.beforeEach方法，不懂得可以打印to，from的参数就ok，requireAuth可以随意换名的，只要man.js里面跟配置路由的routes里面的字段保持一致：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="title function_">some</span>(<span class="function"><span class="params">record</span> =&gt;</span> record.<span class="property">meta</span>.<span class="property">requireAuth</span>))&#123;  <span class="comment">// 判断该路由是否需要登录权限</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>) &amp;&amp; !<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>))&#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">query</span>: &#123;<span class="attr">redirect</span>: to.<span class="property">fullPath</span>&#125;  <span class="comment">// 将跳转的路由path作为参数，登录成功后跳转到该路由</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">              <span class="attr">requireAuth</span>: <span class="literal">true</span>,  <span class="comment">// 添加该字段，表示进入这个路由是需要登录的</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/register&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;register&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Register</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>全局后置守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>单独路由独享守卫（与全局一致，可单独对某个路由进行配置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件内部路由守卫（可写在与生命周期同级位置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;,</span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-12-vue-router-实现懒加载"><a href="#1-12-vue-router-实现懒加载" class="headerlink" title="1.12 vue-router 实现懒加载"></a>1.12 vue-router 实现懒加载</h4><p><strong>参考答案：</strong></p><p>懒加载：当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><p>实现：结合 Vue 的<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">异步组件</a>和 Webpack 的<a href="https://doc.webpack-china.org/guides/code-splitting-async/#require-ensure-/">代码分割功能</a>，可以实现路由组件的懒加载</p><ol><li><p>首先，可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123; <span class="comment">/* 组件定义对象 */</span> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>在 Webpack 2 中，我们可以使用<a href="https://github.com/tc39/proposal-dynamic-import">动态 import</a>语法来定义代码分块点 (split point)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>) <span class="comment">// 返回 Promise</span></span><br></pre></td></tr></table></figure><p>结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Foo</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在路由配置中什么都不需要改变，只需要像往常一样使用Foo：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Foo</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-13-js是如何监听HistoryRouter的变化的"><a href="#1-13-js是如何监听HistoryRouter的变化的" class="headerlink" title="1.13 js是如何监听HistoryRouter的变化的"></a>1.13 js是如何监听HistoryRouter的变化的</h4><p><strong>参考答案：</strong></p><p>通过浏览器的地址栏来改变切换页面，前端实现主要有两种方式：</p><ol><li><p>通过hash改变，利用window.onhashchange 监听。</p></li><li><p><strong>HistoryRouter：</strong>通过history的改变，进行js操作加载页面，然而history并不像hash那样简单，因为history的改变，除了浏览器的几个前进后退（使用 history.back(), history.forward()和 history.go() 方法来完成在用户历史记录中向后和向前的跳转。）等操作会主动触发popstate 事件，pushState，replaceState 并不会触发popstate事件，要解决history监听的问题，方法是：</p><p>首先完成一个订阅-发布模式，然后重写history.pushState, history.replaceState,并添加消息通知，这样一来只要history的无法实现监听函数就被我们加上了事件通知，只不过这里用的不是浏览器原生事件，而是通过我们创建的event-bus 来实现通知，然后触发事件订阅函数的执行。</p></li></ol><p>具体操作如下：</p><ol><li>订阅-发布模式示例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;                  <span class="comment">// 订阅池</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = <span class="keyword">new</span> <span class="title class_">Date</span>() <span class="comment">//这里简单的运用时间戳做订阅池的ID</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span> = []       <span class="comment">//该事件下被订阅对象的集合</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">defined</span>(<span class="params"></span>)&#123;              <span class="comment">// 添加订阅者</span></span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">watch</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>) &#123;              <span class="comment">//通知订阅者有变化</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> e.<span class="property">update</span> === <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                   e.<span class="property">update</span>.<span class="title function_">apply</span>(e)  <span class="comment">//触发订阅者更新函数</span></span><br><span class="line">                &#125; <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">warr</span>(err)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dep</span>.<span class="property">watch</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watch</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, fn</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;       <span class="comment">//订阅消息的名称</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();   <span class="comment">//这里简单的运用时间戳做订阅者的ID</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callBack</span> = fn;     <span class="comment">//订阅消息发送改变时-&gt;订阅者执行的回调函数     </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">dep</span>) &#123;                  <span class="comment">//将订阅者放入dep订阅池</span></span><br><span class="line">       dep.<span class="property">subs</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;                  <span class="comment">//将订阅者更新方法</span></span><br><span class="line">        <span class="keyword">var</span> cb = <span class="variable language_">this</span>.<span class="property">callBack</span>; <span class="comment">//赋值为了不改变函数内调用的this</span></span><br><span class="line">        <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">name</span>);         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>重写history方法，并添加window.addHistoryListener事件机制。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addHistoryMethod = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> historyDep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name === <span class="string">&#x27;historychange&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name, fn</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">Watch</span>(name, fn)</span><br><span class="line">                    <span class="title class_">Dep</span>.<span class="property">watch</span> = event;</span><br><span class="line">                    historyDep.<span class="title function_">defined</span>();</span><br><span class="line">                    <span class="title class_">Dep</span>.<span class="property">watch</span> = <span class="literal">null</span>;       <span class="comment">//置空供下一个订阅者使用</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(name === <span class="string">&#x27;pushState&#x27;</span> || name === <span class="string">&#x27;replaceState&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> method = history[name];</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    method.<span class="title function_">apply</span>(history, <span class="variable language_">arguments</span>);</span><br><span class="line">                    historyDep.<span class="title function_">notify</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">addHistoryListener</span> = <span class="title function_">addHistoryMethod</span>(<span class="string">&#x27;historychange&#x27;</span>);</span><br><span class="line">history.<span class="property">pushState</span> =  <span class="title function_">addHistoryMethod</span>(<span class="string">&#x27;pushState&#x27;</span>);</span><br><span class="line">history.<span class="property">replaceState</span> =  <span class="title function_">addHistoryMethod</span>(<span class="string">&#x27;replaceState&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-14-HashRouter-和-HistoryRouter的区别和原理"><a href="#1-14-HashRouter-和-HistoryRouter的区别和原理" class="headerlink" title="1.14 HashRouter 和 HistoryRouter的区别和原理"></a>1.14 HashRouter 和 HistoryRouter的区别和原理</h4><p><strong>参考答案：</strong></p><p><strong>vue-router</strong>是Vue官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。vue-router默认 hash 模式，还有一种是history模式。</p><p>原理：</p><ol><li><p>hash路由：hash模式的工作原理是hashchange事件，可以在window监听hash的变化。我们在url后面随便添加一个#xx触发这个事件。vue-router默认的是hash模式—使用URL的hash来模拟一个完整的URL,于是当URL改变的时候,页面不会重新加载,也就是单页应用了,当#后面的hash发生变化,不会导致浏览器向服务器发出请求,浏览器不发出请求就不会刷新页面,并且会触发hasChange这个事件,通过监听hash值的变化来实现更新页面部分内容的操作</p><p>对于hash模式会创建hashHistory对象,在访问不同的路由的时候,会发生两件事:<br>HashHistory.push()将新的路由添加到浏览器访问的历史的栈顶,和HasHistory.replace()替换到当前栈顶的路由</p></li><li><p>history路由：</p><p>主要使用HTML5的pushState()和replaceState()这两个api结合window.popstate事件（监听浏览器前进后退）来实现的,pushState()可以改变url地址且不会发送请求,replaceState()可以读取历史记录栈,还可以对浏览器记录进行修改</p></li></ol><p>区别：</p><ol><li>hash模式较丑，history模式较优雅</li><li>pushState设置的新URL可以是与当前URL同源的任意URL；而hash只可修改#后面的部分，故只可设置与当前同文档的URL</li><li>pushState设置的新URL可以与当前URL一模一样，这样也会把记录添加到栈中；而hash设置的新值必须与原来不一样才会触发记录添加到栈中</li><li>pushState通过stateObject可以添加任意类型的数据到记录中；而hash只可添加短字符串</li><li>pushState可额外设置title属性供后续使用</li><li>hash兼容IE8以上，history兼容IE10以上</li><li>history模式需要后端配合将所有访问都指向index.html，否则用户刷新页面，会导致404错误</li></ol><p>使用方法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// hash路由原理***************************</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监听hashchange方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// history路由原理************************</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 利用html5的history的pushState方法结合window.popstate事件（监听浏览器前进后退）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">routerChange</span> (pathname)&#123;</span></span><br><span class="line"><span class="language-javascript">            history.<span class="title function_">pushState</span>(<span class="literal">null</span>,<span class="literal">null</span>,pathname)</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = location.<span class="property">pathname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = location.<span class="property">pathname</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-15-Vue-router-原理-哪个模式不会请求服务器"><a href="#1-15-Vue-router-原理-哪个模式不会请求服务器" class="headerlink" title="1.15 Vue router 原理, 哪个模式不会请求服务器"></a>1.15 Vue router 原理, 哪个模式不会请求服务器</h4><p><strong>参考答案：</strong></p><p>Vue router 的两种方法，hash模式不会请求服务器</p><p><strong>解析：</strong></p><ol><li>url的hash，就是通常所说的锚点#，javascript通过hashChange事件来监听url的变化，IE7以下需要轮询。比如这个 URL：<a href="http://www.abc.com/#/hello%EF%BC%8Chash">http://www.abc.com/#/hello，hash</a> 的值为#&#x2F;hello。它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此<strong>改变 hash 不会重新加载页面</strong>。</li><li>HTML5的History模式，它使url看起来像普通网站那样，以“&#x2F;”分割，没有#，单页面并没有跳转。不过使用这种模式需要服务端支持，服务端在接收到所有请求后，都只想同一个html文件，不然会出现404。因此单页面应用只有一个html，整个网站的内容都在这一个html里，通过js来处理。</li></ol><h4 id="1-16-组件通信的方式"><a href="#1-16-组件通信的方式" class="headerlink" title="1.16 组件通信的方式"></a>1.16 组件通信的方式</h4><p><strong>参考答案：</strong></p><p>组件通信的方式的方式有以下8种方法：</p><ol><li><p>props和$emit</p><p>这是最最常用的父子组件通信方式，父组件向子组件传递数据是通过prop传递的，子组件传递数据给父组件是通过$emit触发事件来做到的</p></li><li><p><img src="https://www.nowcoder.com/equation?tex=attrs%E5%92%8C&preview=true" alt="img">listeners</p><p>第一种方式处理父子组件之间的数据传输有一个问题：如果多层嵌套，父组件A下面有子组件B，组件B下面有组件C,这时如果组件A想传递数据给组件C怎么办呢?</p><p>如果采用第一种方法，我们必须让组件A通过prop传递消息给组件B，组件B在通过prop传递消息给组件C;要是组件A和组件C之间有更多的组件，那采用这种方式就很复杂了。从Vue 2.4开始，提供了<img src="https://www.nowcoder.com/equation?tex=attrs%E5%92%8C&preview=true" alt="img">listeners来解决这个问题，能够让组件A之间传递消息给组件C。</p></li><li><p>v-model</p><p>父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input’,val)自动修改v-model绑定的值</p></li><li><p>provide和inject</p><p>父组件中通过provider来提供变量，然后在子组件中通过inject来注入变量。不论子组件有多深，只要调用了inject那么就可以注入provider中的数据。而不是局限于只能从当前父组件的prop属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。</p></li><li><p>中央事件总线</p><p>上面方式都是处理的父子组件之间的数据传递，那如果两个组件不是父子关系呢?也就是兄弟组件如何通信?</p><p>这种情况下可以使用中央事件总线的方式。新建一个Vue事件bus对象，然后通过bus.<img src="https://www.nowcoder.com/equation?tex=emit%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6%EF%BC%8Cbus.&preview=true" alt="img">on监听触发的事件。</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128629803/500809B9BD071EA8067678D9EC046261" alt="img"></p></li><li><p>parent和children</p></li><li><p>boradcast和dispatch</p><p>vue1.0中提供了这种方式，但vue2.0中没有，但很多开源软件都自己封装了这种方式，比如min ui、element ui和iview等。 比如如下代码，一般都作为一个mixins去使用, broadcast是向特定的父组件，触发事件，dispatch是向特定的子组件触发事件，本质上这种方式还是on和on和emit的封装，但在一些基础组件中却很实用</p></li><li><p>vuex处理组件之间的数据交互</p><p>如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候才有上面这一些方法可能不利于项目的维护，vuex的做法就是将这一些公共的数据抽离出来，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的</p></li></ol><h4 id="1-17-vue组件间传值，-attrs和listeners-了解过吗？"><a href="#1-17-vue组件间传值，-attrs和listeners-了解过吗？" class="headerlink" title="1.17 vue组件间传值， attrs和listeners 了解过吗？"></a>1.17 vue组件间传值， attrs和listeners 了解过吗？</h4><p><strong>参考答案：</strong></p><p><img src="https://www.nowcoder.com/equation?tex=attrs%E5%92%8C&preview=true" alt="img">listeners的作用：解决多层嵌套情况下，父组件A下面有子组件B，组件B下面有组件C，组件A传递数据给组件B的问题，这个方法是在Vue 2.4提出的。</p><p><img src="https://www.nowcoder.com/equation?tex=attrs%E5%92%8C&preview=true" alt="img">listeners解决问题的过程：</p><p>C组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;C&#x27;</span>,&#123; </span><br><span class="line">     <span class="attr">template</span>:<span class="string">` </span></span><br><span class="line"><span class="string">     &lt;div&gt; </span></span><br><span class="line"><span class="string">     &lt;input type=&quot;text&quot; v-model=&quot;$attrs.messageC&quot; @input=&quot;passCData($attrs.messageC)&quot;&gt; </span></span><br><span class="line"><span class="string">     &lt;/div&gt; </span></span><br><span class="line"><span class="string">     `</span>, </span><br><span class="line">     <span class="attr">methods</span>:&#123; </span><br><span class="line">         <span class="title function_">passCData</span>(<span class="params">val</span>)&#123; </span><br><span class="line">             <span class="comment">//触发父组件A中的事件 </span></span><br><span class="line">             <span class="variable language_">this</span>.$emit(<span class="string">&#x27;getCData&#x27;</span>,val) </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>B组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;B&#x27;</span>,&#123; </span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>)&#123; </span><br><span class="line">     <span class="keyword">return</span> &#123; </span><br><span class="line">         <span class="attr">myMessage</span>:<span class="variable language_">this</span>.<span class="property">message</span> </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="attr">template</span>:<span class="string">` </span></span><br><span class="line"><span class="string"> &lt;div&gt; </span></span><br><span class="line"><span class="string"> &lt;input type=&quot;text&quot; v-model=&quot;myMessage&quot; @input=&quot;passData(myMessage)&quot;&gt; </span></span><br><span class="line"><span class="string"> &lt;C v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/C&gt; </span></span><br><span class="line"><span class="string"> &lt;/div&gt; </span></span><br><span class="line"><span class="string"> `</span>, </span><br><span class="line"> <span class="comment">//得到父组件传递过来的数据 </span></span><br><span class="line"> <span class="attr">props</span>:[<span class="string">&#x27;message&#x27;</span>], </span><br><span class="line"> <span class="attr">methods</span>:&#123; </span><br><span class="line">     <span class="title function_">passData</span>(<span class="params">val</span>)&#123; </span><br><span class="line">         <span class="comment">//触发父组件中的事件 </span></span><br><span class="line">         <span class="variable language_">this</span>.$emit(<span class="string">&#x27;getChildData&#x27;</span>,val) </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>A组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;A&#x27;</span>,&#123; </span><br><span class="line"> <span class="attr">template</span>:<span class="string">` </span></span><br><span class="line"><span class="string"> &lt;div&gt; </span></span><br><span class="line"><span class="string"> &lt;p&gt;this is parent compoent!&lt;/p&gt; </span></span><br><span class="line"><span class="string"> &lt;B  </span></span><br><span class="line"><span class="string"> :messageC=&quot;messageC&quot;  </span></span><br><span class="line"><span class="string"> :message=&quot;message&quot;  </span></span><br><span class="line"><span class="string"> v-on:getCData=&quot;getCData&quot;  </span></span><br><span class="line"><span class="string"> v-on:getChildData=&quot;getChildData(message)&quot;&gt; </span></span><br><span class="line"><span class="string"> &lt;/B&gt; </span></span><br><span class="line"><span class="string"> &lt;/div&gt; </span></span><br><span class="line"><span class="string"> `</span>, </span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>)&#123; </span><br><span class="line">     <span class="keyword">return</span> &#123; </span><br><span class="line">         <span class="attr">message</span>:<span class="string">&#x27;Hello&#x27;</span>, </span><br><span class="line">         <span class="attr">messageC</span>:<span class="string">&#x27;Hello c&#x27;</span> </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="attr">methods</span>:&#123; </span><br><span class="line">     <span class="title function_">getChildData</span>(<span class="params">val</span>)&#123; </span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是来自B组件的数据&#x27;</span>) </span><br><span class="line">     &#125;, </span><br><span class="line">     <span class="comment">//执行C子组件触发的事件 </span></span><br><span class="line">     <span class="title function_">getCData</span>(<span class="params">val</span>)&#123; </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是来自C组件的数据：&quot;</span>+val) </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="keyword">var</span> app=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span><br><span class="line"> <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>, </span><br><span class="line"> <span class="attr">template</span>:<span class="string">` </span></span><br><span class="line"><span class="string"> &lt;div&gt; </span></span><br><span class="line"><span class="string"> &lt;A&gt;&lt;/A&gt; </span></span><br><span class="line"><span class="string"> &lt;/div&gt; </span></span><br><span class="line"><span class="string"> `</span> </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p><strong>解析：</strong></p><ul><li>C组件中能直接触发getCData的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性</li><li>通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props(除了B组件中props声明的)</li></ul><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128655053/F98E288D764804F2354ED35EC26D637C" alt="img"></p><h4 id="1-18-组建传值，事件总线是怎么用的"><a href="#1-18-组建传值，事件总线是怎么用的" class="headerlink" title="1.18 组建传值，事件总线是怎么用的"></a>1.18 组建传值，事件总线是怎么用的</h4><p><strong>参考答案：</strong></p><p><strong>中央事件总线</strong>主要用来解决兄弟组件通信的问题。</p><p>实现方式：新建一个Vue事件bus对象，然后通过bus.<img src="https://www.nowcoder.com/equation?tex=emit%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6%EF%BC%8Cbus.&preview=true" alt="img">on监听触发的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;brother1&#x27;,&#123; </span><br><span class="line"> data()&#123; </span><br><span class="line">     return &#123; </span><br><span class="line">        myMessage:&#x27;Hello brother1&#x27; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;, </span><br><span class="line"> template:` </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is brother1 compoent!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;myMessage&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;passData(myMessage)&quot;</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> `, </span><br><span class="line"> methods:&#123; </span><br><span class="line">     passData(val)&#123; </span><br><span class="line">         //触发全局事件globalEvent </span><br><span class="line">         bus.$emit(&#x27;globalEvent&#x27;,val) </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;) </span><br><span class="line">Vue.component(&#x27;brother2&#x27;,&#123; </span><br><span class="line"> template:` </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is brother2 compoent!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>brother1传递过来的数据：&#123;&#123;brothermessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> `, </span><br><span class="line"> data()&#123; </span><br><span class="line">     return &#123; </span><br><span class="line">         myMessage:&#x27;Hello brother2&#x27;, </span><br><span class="line">         brothermessage:&#x27;&#x27; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125;, </span><br><span class="line"> mounted()&#123; </span><br><span class="line">      //绑定全局事件globalEvent </span><br><span class="line">     bus.$on(&#x27;globalEvent&#x27;,(val)=&gt;&#123; </span><br><span class="line">        this.brothermessage=val; </span><br><span class="line">     &#125;) </span><br><span class="line"> &#125; </span><br><span class="line">&#125;) </span><br><span class="line">//中央事件总线 </span><br><span class="line">var bus=new Vue(); </span><br><span class="line">var app=new Vue(&#123; </span><br><span class="line"> el:&#x27;#app&#x27;, </span><br><span class="line"> template:` </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">brother1</span>&gt;</span><span class="tag">&lt;/<span class="name">brother1</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">brother2</span>&gt;</span><span class="tag">&lt;/<span class="name">brother2</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"> ` </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128668820/B30491C32F761B02007519727B8B2DF9" alt="img"></p><h4 id="1-19-vue生命周期中异步加载在mouted还是create里实现"><a href="#1-19-vue生命周期中异步加载在mouted还是create里实现" class="headerlink" title="1.19 vue生命周期中异步加载在mouted还是create里实现"></a>1.19 vue生命周期中异步加载在mouted还是create里实现</h4><p><strong>参考答案:</strong></p><p>最常用的是在 created 钩子函数中调用异步请求</p><p><strong>解析：</strong></p><p>一般来说，可以在，created，mounted中都可以发送数据请求，但是，大部分时候，会在created发送请求。<br>Created的使用场景：如果页面首次渲染的就来自后端数据。因为，此时data已经挂载到vue实例了。<br>在 created（如果希望首次选的数据来自于后端，就在此处发请求）（只发了异步请求，渲染是在后端响应之后才进行的）、beforeMount、mounted（在mounted中发请求会进行二次渲染） 这三个钩子函数中进行调用。<br>因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是<strong>最常用的是在 created 钩子函数中调用异步请求</strong>，因为在 created 钩子函数中调用异步请求有两个优点：<br>第一点：能更快获取到服务端数据，减少页面 loading 时间；<br>第二点：放在 created 中有助于一致性，因为ssr 不支持 beforeMount 、mounted 钩子函数。</p><h4 id="1-20-vue钩子函数-重点问了keep-alive"><a href="#1-20-vue钩子函数-重点问了keep-alive" class="headerlink" title="1.20 vue钩子函数(重点问了keep-alive)"></a>1.20 vue钩子函数(重点问了keep-alive)</h4><p><strong>参考答案：</strong></p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128702563/F5DFA24F5FDFC338D5D73739BF09C491" alt="img">Vue生命周期经历哪些阶段：</p><ol><li>总体来说：初始化、运行中、销毁</li><li>详细来说：开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程</li></ol><p>生命周期经历的阶段和钩子函数:</p><ol><li><p>实例化vue(组件)对象：new Vue()</p></li><li><p>初始化事件和生命周期 init events 和 init cycle</p></li><li><p>beforeCreate函数：</p><p>在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。</p><p>即此时vue（组件）对象被创建了，但是vue对象的属性还没有绑定，如data属性，computed属性还没有绑定，即没有值。</p><p>此时还没有数据和真实DOM。</p><p>即：属性还没有赋值，也没有动态创建template属性对应的HTML元素（二阶段的createUI函数还没有执行）</p></li><li><p>挂载数据（属性赋值）</p><p>包括 属性和computed的运算</p></li><li><p>Created函数：</p><p>vue对象的属性有值了，但是DOM还没有生成，$el属性还不存在。</p><p>此时有数据了，但是还没有真实的DOM</p><p>即：data，computed都执行了。属性已经赋值，但没有动态创建template属性对应的HTML元素，所以，此时如果更改数据不会触发updated函数</p><p>如果：数据的初始值就来自于后端，可以发送ajax，或者fetch请求获取数据，但是，此时不会触发updated函数</p><ol><li>检查</li></ol></li></ol><p>6.1 检查是否有el属性<br>检查vue配置，即new Vue{}里面的el项是否存在，有就继续检查template项。没有则等到手动绑定调用 vm.<img src="https://www.nowcoder.com/equation?tex=mount()%E5%AE%8C%E6%88%90%E4%BA%86%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F&preview=true" alt="img">el的绑定。</p><p>6.2 检查是否有template属性</p><p>检查配置中的template项，如果没有template进行填充被绑定区域，则被绑定区域的el对outerHTML（即 整个#app DOM对象，包括</p><p>和</p><p>标签）都作为被填充对象替换掉填充区域。即： 如果vue对象中有 template属性，那么，template后面的HTML会替换$el对应的内容。如果有render属 性，那么render就会替换template。 即：优先关系时： render &gt; template &gt; el</p><ol><li><p>beforeMount函数：</p><p>模板编译(template)、数据挂载(把数据显示在模板里)之前执行的钩子函数</p><p>此时 this.$el有值，但是数据还没有挂载到页面上。即此时页面中的<code>&#123;&#123;&#125;&#125;</code>里的变量还没有被数据替换</p></li><li><p>模板编译：用vue对象的数据（属性）替换模板中的内容</p></li><li><p>Mounted函数：</p><p>模板编译完成，数据挂载完毕</p><p>即：此时已经把数据挂载到了页面上，所以，页面上能够看到正确的数据了。</p><p>一般来说，我们在此处发送异步请求（ajax，fetch，axios等），获取服务器上的数据，显示在DOM里。</p></li><li><p>beforeUpdate函数：</p><p>组件更新之前执行的函数，只有数据更新后，才能调用（触发）beforeUpdate，注意：此数据一定是在模板上出现的数据，否则，不会，也没有必要触发组件更新（因为数据不出现在模板里，就没有必要再次渲染）</p><p>数据更新了，但是，vue（组件）对象对应的dom中的内部（innerHTML）没有变，所以叫作组件更新前</p></li><li><p>updated函数：</p><p>组件更新之后执行的函数</p><p>vue（组件）对象对应的dom中的内部（innerHTML）改变了，所以，叫作组件更新之后</p></li><li><p>activated函数：keep-alive组件激活时调用</p></li><li><p>activated函数：keep-alive组件停用时调用</p></li><li><p>beforeDestroy：vue（组件）对象销毁之前</p></li><li><p>destroyed：vue组件销毁后</p></li></ol><p>keep-alive</p><p><keep-alive></keep-alive>包裹动态组件时，会缓存不活动的组件实例,主要用于保留组件状态或避免重新渲染。</p><p><strong>解析：</strong> 比如有一个列表和一个详情，那么用户就会经常执行打开详情&#x3D;&gt;返回列表&#x3D;&gt;打开详情…这样的话列表和详情都是一个频率很高的页面，那么就可以对列表组件使用<keep-alive></keep-alive>进行缓存，这样用户每次返回列表的时候，都能从缓存中快速渲染，而不是重新渲染</p><h4 id="1-21-vue-keep-alive"><a href="#1-21-vue-keep-alive" class="headerlink" title="1.21 vue keep-alive"></a>1.21 vue keep-alive</h4><p><strong>参考答案：</strong></p><p><strong>keep-alive</strong>：keep-alive可以实现组件缓存，是Vue.js的一个内置组件。</p><p>作用：</p><ol><li>它能够把不活动的组件实例保存在内存中，而不是直接将其销毁</li><li>它是一个抽象组件，不会被渲染到真实DOM中，也不会出现在父组件链中</li></ol><p>使用方式：</p><ol><li>常用的两个属性include&#x2F;exclude，允许组件有条件的进行缓存。</li><li>两个生命周期activated&#x2F;deactivated，用来得知当前组件是否处于活跃状态。</li><li>keep-alive的中还运用了LRU(Least Recently Used)算法。</li></ol><p>原理：Vue 的缓存机制并不是直接存储 DOM 结构，而是将 DOM 节点抽象成了一个个 VNode节点，所以，keep- alive的缓存也是基于VNode节点的而不是直接存储DOM结构。</p><p>其实就是将需要缓存的VNode节点保存在this.cache中／在render时,如果VNode的name符合在缓存条件（可以用include以及exclude控制），则会从this.cache中取出之前缓存的VNode实例进行渲染。</p><h4 id="1-22-既然函数是引用类型，为什么-vue-的-data-还是可以用函数"><a href="#1-22-既然函数是引用类型，为什么-vue-的-data-还是可以用函数" class="headerlink" title="1.22 既然函数是引用类型，为什么 vue 的 data 还是可以用函数"></a>1.22 既然函数是引用类型，为什么 vue 的 data 还是可以用函数</h4><p><strong>参考答案：</strong></p><p>JavaScript只有函数构成作用域(注意理解作用域，<strong>只有函数{}构成作用域</strong>,对象的{}以及if(){}都不构成作用域),data是一个函数时，每个组件实例都有自己的作用域，每个实例相互独立，不会相互影响。</p><h4 id="1-23-vue-中-nextTick-作用与原理"><a href="#1-23-vue-中-nextTick-作用与原理" class="headerlink" title="1.23 vue 中 $nextTick 作用与原理"></a>1.23 vue 中 $nextTick 作用与原理</h4><p><strong>参考答案:</strong></p><p>作用：是为了可以获取更新后的DOM 。</p><p>由于Vue DOM更新是异步执行的，即修改数据时，视图不会立即更新，而是会监听数据变化，并缓存在同一事件循环中，等同一数据循环中的所有数据变化完成之后，再统一进行视图更新。为了确保得到更新后的DOM，所以设置了 Vue.nextTick()，就是在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM。</p><p>原理：</p><p>在下次 DOM 更新循环结束之后执行延迟回调。nextTick主要使用了宏任务和微任务。根据执行环境分别尝试采用</p><ul><li>Promise</li><li>MutationObserver</li><li>setImmediate</li><li>如果以上都不行则采用setTimeout</li></ul><p>定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p><h4 id="1-24-vue的特性"><a href="#1-24-vue的特性" class="headerlink" title="1.24 vue的特性"></a>1.24 vue的特性</h4><p><strong>参考答案：</strong></p><ul><li>表单操作</li><li>自定义指令</li><li>计算属性</li><li>过滤器</li><li>侦听器</li><li>生命周期</li></ul><h4 id="1-25-v-if-v-show区别"><a href="#1-25-v-if-v-show区别" class="headerlink" title="1.25 v-if v-show区别"></a>1.25 v-if v-show区别</h4><p><strong>参考答案：</strong></p><p>v-show和v-if都是用来显示隐藏元素，v-if还有一个v-else配合使用，两者达到的效果都一样，但是v-if更消耗性能的，因为v-if在显示隐藏过程中有DOM的添加和删除，v-show就简单多了，只是操作css。</p><p><strong>解析：</strong></p><p>v-show</p><p>v-show不管条件是真还是假，第一次渲染的时候都会编译出来，也就是标签都会添加到DOM中。之后切换的时候，通过display: none;样式来显示隐藏元素。可以说只是改变css的样式，几乎不会影响什么性能。</p><p>v-if</p><p>在首次渲染的时候，如果条件为假，什么也不操作，页面当作没有这些元素。当条件为真的时候，开始局部编译，动态的向DOM元素里面添加元素。当条件从真变为假的时候，开始局部编译，卸载这些元素，也就是删除。</p><h4 id="1-26-Vue-列表为什么加-key"><a href="#1-26-Vue-列表为什么加-key" class="headerlink" title="1.26 Vue 列表为什么加 key"></a>1.26 Vue 列表为什么加 key</h4><p><strong>参考答案：</strong></p><p>vue中列表循环需加:key&#x3D;”唯一标识” 唯一标识且最好是静态的，因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好地区别各个组件 key的作用主要是为了高效的更新虚拟DOM</p><p><strong>解析：</strong></p><p>vue和react的虚拟DOM的Diff算法大致相同，其核心是基于两个简单的假设<br>首先讲一下diff算法的处理方法，对操作前后的dom树同一层的节点进行对比，一层一层对比，</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128744220/448BD33DD57542E1E6A5B03957CC7034" alt="img"></p><p>当某一层有很多相同的节点时，也就是列表节点时，Diff算法的更新过程默认情况下也是遵循以上原则。</p><p>比如一下这个情况：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128758816/EAA1B46F9F910D663C45A96D03B305C4" alt="img"></p><p>可以在B和C之间加一个F，Diff算法默认执行起来是这样的：</p><p><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128776932/CE0C377B5746FC3BE8D5C8466A40AA87" alt="img"></p><p>即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？</p><p>所以我们需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点，找到正确的位置区插入新的节点。</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://uploadfiles.nowcoder.com/images/20220301/4107856_1646128789653/536CB47A8208A5561AEC33A70324C88B" alt="img"></h4><h4 id="1-27-jquery-和-vue相比"><a href="#1-27-jquery-和-vue相比" class="headerlink" title="1.27 jquery 和 vue相比"></a>1.27 jquery 和 vue相比</h4><p><strong>参考答案：</strong></p><ol><li>jquery：轻量级的js库</li><li>vue：前端js库，是一个精简的MVVM，它专注于MVVM模型的viewModel层，通过双向数据绑定把view和model层连接起来，通过对数据的操作就可以完成对页面视图的渲染。</li></ol><table><thead><tr><th><strong>Vue</strong></th><th><strong>jQuery</strong></th></tr></thead><tbody><tr><td>数据驱动视图(MVVM思想:数据视图完全分离；数据驱动、双向绑定；)</td><td>直接操作DOM(获取、修改、赋值、事件绑定)</td></tr><tr><td>操作简单</td><td>操作麻烦</td></tr><tr><td>模块化</td><td>x</td></tr><tr><td>实现单页面</td><td>x</td></tr><tr><td>组件复用</td><td>x</td></tr><tr><td>性能高：使用的虚拟DOM，减少 dom的操作</td><td>x</td></tr></tbody></table><p><strong>扩展：</strong></p><ol><li>vue适用的场景：复杂数据操作的后台页面，表单填写页面<ol><li>jquery适用的场景：比如说一些html5的动画页面，一些需要js来操作页面样式的页面</li><li>二者也是可以结合起来一起使用的，vue侧重数据绑定，jquery侧重样式操作，动画效果等，则会更加高效率的完成业务需求</li></ol></li></ol><h4 id="1-28-为什么选择用vue做页面展示"><a href="#1-28-为什么选择用vue做页面展示" class="headerlink" title="1.28 为什么选择用vue做页面展示"></a>1.28 为什么选择用vue做页面展示</h4><p><strong>参考答案：</strong></p><ul><li><p>MVVM 框架：</p><p>Vue 正是使用了这种 MVVM 的框架形式，并且通过声明式渲染和响应式数据绑定的方式来帮助我们完全避免了对 DOM 的操作。</p></li><li><p>单页面应用程序</p><p>Vue 配合生态圈中的 Vue-Router 就可以非常方便的开发复杂的单页应用</p></li><li><p>轻量化与易学习</p><p>Vue 的生产版本只有 30.90KB 的大小，几乎不会对我们的网页加载速度产生影响。同时因为 Vue 只专注于视图层，单独的 Vue 就像一个库一样，所以使我们的学习成本变得非常低</p></li><li><p>渐进式与兼容性</p><p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。Vue 只做界面，而把其他的一切都交给了它的周边生态（axios（Vue 官方推荐）、Loadsh.js、Velocity.js 等）来做处理，这就要求 Vue 必须要对其他的框架拥有最大程度的兼容性</p></li><li><p>视图组件化</p><p>Vue 允许通过组件来去拼装一个页面，每个组件都是一个可复用的 Vue 实例，组件里面可以包含自己的数据，视图和代码逻辑。方便复用</p></li><li><p>虚拟 DOM（Virtual DOM）</p><p>Vue 之所以可以完全避免对 DOM 的操作，就是因为 Vue 采用了虚拟 DOM 的方式，不但避免了我们对 DOM 的复杂操作，并且大大的加快了我们应用的运行速度。</p></li><li><p>社区支持</p><p>得益于 Vue 的本土化身份（Vue 的作者为国人尤雨溪），再加上 Vue 本身的强大，所以涌现出了特别多的国内社区，这种情况在其他的框架身上是没有出现过的，这使得我们在学习或者使用 Vue 的时候，可以获得更多的帮助</p></li><li><p>未来的 Vue 走向</p><p>Vue 是由国人尤雨溪在 Google 工作的时候，为了方便自己的工作而开发出来的一个库，而在 Vue 被使用的过程中，突然发现越来越多的人喜欢上了它。所以尤雨溪就进入了一个边工作、边维护的状态，在这种情况下 Vue 依然迅速的发展。</p><p>而现在尤雨溪已经正式辞去了 Google 的工作，开始专职维护 Vue，同时加入进来的还有几十位优秀的开发者，他们致力于把 Vue 打造为最受欢迎的前端框架。事实证明 Vue 确实在往越来越好的方向发展了（从 Angular、React、Vue 的对比图中可以看出 Vue 的势头）。所以我觉得完全不需要担心未来 Vue 的发展，至少在没有新的颠覆性创新出来之前，Vue 都会越做越好。</p></li></ul><h4 id="1-29-vue-angular区别"><a href="#1-29-vue-angular区别" class="headerlink" title="1.29 vue&#x2F;angular区别"></a>1.29 vue&#x2F;angular区别</h4><p><strong>参考答案：</strong></p><ol><li><p>体积和性能</p><p>相较于vue，angular显得比较臃肿，比如一个包含了 Vuex + Vue Router 的 Vue 项目 (gzip 之后 30kB) ，而 angular-cli 生成的默认项目尺寸 (~65KB) 还是要小得多。</p><p>在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢。Vue.js使用基于依赖追踪的观察并且使用异步队列更新。所有的数据都是独立触发的。 对于庞大的应用来说，这个优化差异还是比较明显的</p></li><li><p>Virtual DOM vs Incremental DOM</p><p>在底层渲染方面，vue 使用的虚拟dom，而angular 使用的是Incremental DOM，Incremental DOM的优势在于低内开销</p></li><li><p>Vue 相比于 Angular 更加灵活，可以按照不同的需要去组织项目的应用代码。比如，甚至可以直接像引用jquery那样在HTML中引用vue，然后仅仅当成一个前端的模板引擎来用。</p></li><li><p>es6支持</p><p>es6是新一代的javascript标准，对JavaScript进行了大量的改进，使用es6开发已是基本需求。虽然有部分十分老旧的浏览器不支持es6，但是可以利用现代开发工具将es6编译成es5。在对es6的支持上两者都做得很好，（TS本身就是es6的超集）</p></li><li><p>学习曲线</p><p>针对前端而言，angular的学习曲线相对较大，vue学习起来更容易一些。不过对java和c的使用者而言，angular的静态检查、依赖注入的特性，以及面向对象的编程风格，使得angular都要更亲切一些。</p></li><li><p>使用热度</p><p>在使用热度上，vue具有更大优势，主要原因是更受数量庞大的中国开发者欢迎。较低的上手难度，易懂的开发文档，以及国人主导开发的光环，都使得vue更为流行</p></li></ol><h4 id="1-30-双向数据绑定原理"><a href="#1-30-双向数据绑定原理" class="headerlink" title="1.30 双向数据绑定原理"></a>1.30 双向数据绑定原理</h4><p><strong>参考答案：</strong></p><p>目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p><p>实现数据绑定的做法有大致如下几种：</p><p><strong>发布者-订阅者模式:</strong> 一般通过sub, pub的方式实现数据和视图的绑定监听，更新数据方式通常做法是vm.set(‘property’, value)</p><p>这种方式现在毕竟太low了，我们更希望通过vm.property &#x3D; value这种方式更新数据，同时自动更新视图，于是有了下面两种方式</p><p><strong>脏值检查:</strong> angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过setInterval()定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><ul><li>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR响应事件 ( $http )</li><li>浏览器Location变更事件 ( $location )</li><li>Timer事件( <img src="https://www.nowcoder.com/equation?tex=timeout,&preview=true" alt="img">interval )</li><li>执行 digest()或apply()</li></ul><p><strong>数据劫持:</strong> vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><h4 id="1-31-既然-Vue-通过数据劫持可以精准探测数据在具体dom上的变化-为什么还需要虚拟-DOM-diff-呢"><a href="#1-31-既然-Vue-通过数据劫持可以精准探测数据在具体dom上的变化-为什么还需要虚拟-DOM-diff-呢" class="headerlink" title="1.31 既然 Vue 通过数据劫持可以精准探测数据在具体dom上的变化,为什么还需要虚拟 DOM diff 呢?"></a>1.31 既然 Vue 通过数据劫持可以精准探测数据在具体dom上的变化,为什么还需要虚拟 DOM diff 呢?</h4><p><strong>参考答案</strong>：</p><p><strong>前置知识:</strong> 依赖收集、虚拟 DOM、响应式系统</p><p>现代前端框架有两种方式侦测变化，一种是 <strong>pull</strong> ，一种是 <strong>push</strong></p><p><strong>pull:</strong> 其代表为React，我们可以回忆一下React是如何侦测到变化的,我们通常会用setStateAPI显式更新，然后React会进行一层层的Virtual Dom Diff操作找出差异，然后Patch到DOM上，React从一开始就不知道到底是哪发生了变化，只是知道「有变化了」，然后再进行比较暴力的Diff操作查找「哪发生变化了」，另外一个代表就是Angular的脏检查操作。</p><p><strong>push:</strong> Vue的响应式系统则是push的代表，当Vue程序初始化的时候就会对数据data进行依赖的收集，一但数据发生变化,响应式系统就会立刻得知。因此Vue是一开始就知道是「在哪发生变化了」，但是这又会产生一个问题，如果你熟悉Vue的响应式系统就知道，通常一个绑定一个数据就需要一个Watcher</p><p>一但我们的绑定细粒度过高就会产生大量的Watcher，这会带来内存以及依赖追踪的开销，而细粒度过低会无法精准侦测变化,因此Vue的设计是选择中等细粒度的方案,在组件级别进行push侦测的方式,也就是那套响应式系统,通常我们会第一时间侦测到发生变化的组件,然后在组件内部进行Virtual Dom Diff获取更加具体的差异，而Virtual Dom Diff则是pull操作，Vue是push+pull结合的方式进行变化侦测的。</p><h4 id="1-32-简单聊聊-new-Vue-以后发生的事情"><a href="#1-32-简单聊聊-new-Vue-以后发生的事情" class="headerlink" title="1.32 简单聊聊 new Vue 以后发生的事情"></a>1.32 简单聊聊 new Vue 以后发生的事情</h4><p><strong>参考答案</strong>：</p><ol><li>new Vue会调用 Vue 原型链上的_init方法对 Vue 实例进行初始化；</li><li>首先是initLifecycle初始化生命周期，对 Vue 实例内部的一些属性（如 children、parent、isMounted）进行初始化；</li><li>initEvents，初始化当前实例上的一些自定义事件（Vue.$on）；</li><li>initRender，解析slots绑定在 Vue 实例上，绑定createElement方法在实例上；</li><li>完成对生命周期、自定义事件等一系列属性的初始化后，触发生命周期钩子beforeCreate；</li><li>initInjections，在初始化data和props之前完成依赖注入（类似于 React.Context）；</li><li>initState，完成对data和props的初始化，同时对属性完成数据劫持内部，启用监听者对数据进行监听（更改）；</li><li>initProvide，对依赖注入进行解析；</li><li>完成对数据（state 状态）的初始化后，触发生命周期钩子created；</li><li>进入挂载阶段，将 vue 模板语法通过vue-loader解析成虚拟 DOM 树，虚拟 DOM 树与数据完成双向绑定，触发生命周期钩子beforeMount；</li><li>将解析好的虚拟 DOM 树通过 vue 渲染成真实 DOM，触发生命周期钩子mounted；</li></ol><h4 id="1-33-v-for中的key的理解？"><a href="#1-33-v-for中的key的理解？" class="headerlink" title="1.33 v-for中的key的理解？"></a>1.33 v-for中的key的理解？</h4><p><strong>参考答案</strong>：</p><p>需要使用key来给每个节点做一个唯一标识，Diff算法就可以正确的识别此节点。主要是为了高效的更新虚拟DOM。</p><h4 id="1-34-vue首屏白屏如何解决？"><a href="#1-34-vue首屏白屏如何解决？" class="headerlink" title="1.34 vue首屏白屏如何解决？"></a>1.34 vue首屏白屏如何解决？</h4><p><strong>参考答案</strong>：</p><ol><li>路由懒加载</li><li>vue-cli开启打包压缩 和后台配合 gzip访问</li><li>进行cdn加速</li><li>开启vue服务渲染模式</li><li>用webpack的externals属性把不需要打包的库文件分离出去，减少打包后文件的大小</li><li>在生产环境中删除掉不必要的console.log</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">UglifyJsPlugin</span>(&#123; <span class="comment">//添加-删除console.log</span></span><br><span class="line">    <span class="attr">compress</span>: &#123;</span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">drop_debugger</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">drop_console</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sourceMap</span>: <span class="literal">true</span></span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure><ol><li>开启nginx的gzip ,在nginx.conf配置文件中配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;  <span class="comment">//在 http中配置如下代码，</span></span><br><span class="line">   gzip on;</span><br><span class="line">   gzip_disable <span class="string">&quot;msie6&quot;</span>; </span><br><span class="line">   gzip_vary on; </span><br><span class="line">   gzip_proxied any;</span><br><span class="line">   gzip_comp_level <span class="number">8</span>; #压缩级别</span><br><span class="line">   gzip_buffers <span class="number">16</span> 8k;</span><br><span class="line">   #gzip_http_version <span class="number">1.1</span>;</span><br><span class="line">   gzip_min_length <span class="number">100</span>; #不压缩临界值</span><br><span class="line">   gzip_types text/plain application/javascript application/x-javascript text/css</span><br><span class="line">    application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>添加loading效果，给用户一种进度感受</li></ol><h4 id="1-35-vue单页面和传统的多页面区别？"><a href="#1-35-vue单页面和传统的多页面区别？" class="headerlink" title="1.35 vue单页面和传统的多页面区别？"></a>1.35 vue单页面和传统的多页面区别？</h4><p><strong>参考答案</strong>:</p><p>单页面应用（SPA）</p><p>通俗一点说就是指只有一个主页面的应用，浏览器一开始要加载所有必须的 html, js, css。所有的页面内容都包含在这个所谓的主页面中。但在写的时候，还是会分开写（页面片段），然后在交互的时候由路由程序动态载入，单页面的页面跳转，仅刷新局部资源。多应用于pc端。</p><p>多页面（MPA）</p><p>指一个应用中有多个页面，页面跳转时是整页刷新</p><p><strong>单页面的优点：</strong></p><p>用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点spa对服务器压力较小；前后端分离；页面效果会比较炫酷（比如切换页面内容时的专场动画）。</p><p><strong>单页面缺点：</strong></p><p>不利于seo；导航不可用，如果一定要导航需要自行实现前进、后退。（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）；初次加载时耗时多；页面复杂度提高很多。</p><h4 id="1-36-refs、-parent的使用？"><a href="#1-36-refs、-parent的使用？" class="headerlink" title="1.36 refs、$parent的使用？"></a>1.36 <img src="https://www.nowcoder.com/equation?tex=root%E3%80%81&preview=true" alt="img">refs、$parent的使用？</h4><p><strong>参考答案</strong>：</p><p>$root</p><p>可以用来获取vue的根实例，比如在简单的项目中将公共数据放再vue根实例上(可以理解为一个全局 store ),因此可以代替vuex实现状态管理；</p><p>$refs</p><p>在子组件上使用ref特性后，this.属性可以直接访问该子组件。可以代替事件emit 和<img src="https://www.nowcoder.com/equation?tex=on%20%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%82%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E6%98%AF%E9%80%9A%E8%BF%87ref%E7%89%B9%E6%80%A7%E4%B8%BA%E8%BF%99%E4%B8%AA%E5%AD%90%E7%BB%84%E4%BB%B6%E8%B5%8B%E4%BA%88%E4%B8%80%E4%B8%AAID%E5%BC%95%E7%94%A8%EF%BC%8C%E5%86%8D%E9%80%9A%E8%BF%87this.&preview=true" alt="img">refs.testId获取指定元素。注意：<img src="https://www.nowcoder.com/equation?tex=refs%E5%8F%AA%E4%BC%9A%E5%9C%A8%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E7%94%9F%E6%95%88%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%83%E4%BB%AC%E4%B8%8D%E6%98%AF%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E3%80%82%E8%BF%99%E4%BB%85%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%94%A8%E4%BA%8E%E7%9B%B4%E6%8E%A5%E6%93%8D%E4%BD%9C%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E2%80%9C%E9%80%83%E7%94%9F%E8%88%B1%E2%80%9D%E2%80%94%E2%80%94%E4%BD%A0%E5%BA%94%E8%AF%A5%E9%81%BF%E5%85%8D%E5%9C%A8%E6%A8%A1%E6%9D%BF%E6%88%96%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%AD%E8%AE%BF%E9%97%AE&preview=true" alt="img">refs。</p><p>$parent</p><p>$parent属性可以用来从一个子组件访问父组件的实例，可以替代将数据以 prop 的方式传入子组件的方式；当变更父级组件的数据的时候，容易造成调试和理解难度增加；</p><h4 id="1-36-路由跳转和location-href的区别？"><a href="#1-36-路由跳转和location-href的区别？" class="headerlink" title="1.36 路由跳转和location.href的区别？"></a>1.36 路由跳转和location.href的区别？</h4><p><strong>参考答案</strong>：</p><p>使用location.href&#x3D;’&#x2F;url’来跳转，简单方便，但是刷新了页面；<br>使用路由方式跳转，无刷新页面，静态跳转；</p><h4 id="1-37-scss是什么？在vue-cli中的安装使用步骤是？有哪几大特性？"><a href="#1-37-scss是什么？在vue-cli中的安装使用步骤是？有哪几大特性？" class="headerlink" title="1.37 scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？"></a>1.37 scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？</h4><p><strong>参考答案</strong>：</p><p>css的预编译。</p><p>使用步骤：</p><ol><li>先装css-loader、node-loader、sass-loader等加载器模块</li><li>在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss</li><li>在同一个文件，配置一个module属性</li><li>然后在组件的style标签加上lang属性 ，例如：lang&#x3D;”scss”</li></ol><p>特性:</p><p>可以用变量，例如（$变量名称&#x3D;值）；<br>可以用混合器，例如（）<br>可以嵌套</p><h4 id="1-38-delete与vue-delete区别"><a href="#1-38-delete与vue-delete区别" class="headerlink" title="1.38 delete与vue.delete区别?"></a>1.38 delete与vue.delete区别?</h4><p>delte会删除数组的值，但是它依然会在内存中占位置<br>而vue.delete会删除数组在内存中的占位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">delete</span> arr1[<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">this</span>.$delete(arr2,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)    <span class="comment">//【1, empty, 3】</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)    <span class="comment">//【1,2】</span></span><br></pre></td></tr></table></figure><h4 id="1-39-computed和watch的区别"><a href="#1-39-computed和watch的区别" class="headerlink" title="1.39 computed和watch的区别"></a>1.39 computed和watch的区别</h4><p><strong>参考答案</strong>：</p><p>computed</p><p>计算结果并返回，只有当被计算的属性发生改变时才会触发（即：计算属性的结果会被缓存，除非依赖的响应属性变化才会重新及孙）</p><p>watch</p><p>监听某一个值，当被监听的值发生变化时，执行相关操作。</p><p>与computed的区别是，watch更加适用于监听某一个值得变化，并做对应操作，比如请求后太接口等。而computed适用于计算已有的值并返回结果。 监听简单数据类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;      </span><br><span class="line">    <span class="keyword">return</span>&#123;        </span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>:<span class="number">2</span>     </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;,   </span><br><span class="line"> <span class="attr">watch</span>:&#123;      </span><br><span class="line">     <span class="title function_">first</span>(<span class="params"></span>)&#123;        </span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">first</span>)    </span><br><span class="line">    &#125;   </span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h4 id="1-40-Vue-为什么要用-vm-set-解决对象新增属性不能响应的问题-？你能说说如下代码的实现原理么？"><a href="#1-40-Vue-为什么要用-vm-set-解决对象新增属性不能响应的问题-？你能说说如下代码的实现原理么？" class="headerlink" title="1.40 Vue 为什么要用 vm.$set() 解决对象新增属性不能响应的问题 ？你能说说如下代码的实现原理么？"></a>1.40 Vue 为什么要用 vm.$set() 解决对象新增属性不能响应的问题 ？你能说说如下代码的实现原理么？</h4><p><strong>参考答案</strong>：</p><p><strong>1）Vue为什么要用vm.$set() 解决对象新增属性不能响应的问题</strong></p><ol><li>Vue使用了Object.defineProperty实现双向数据绑定</li><li>在初始化实例时对属性执行 getter&#x2F;setter 转化</li><li>属性必须在data对象上存在才能让Vue将它转换为响应式的（这也就造成了Vue无法检测到对象属性的添加或删除）</li></ol><p>所以Vue提供了Vue.set (object, propertyName, value) &#x2F; vm.$set (object, propertyName, value)</p><p><strong>2）框架本身是如何实现的呢?</strong></p><blockquote><p>Vue 源码位置：vue&#x2F;src&#x2F;core&#x2F;instance&#x2F;index.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">set</span> (<span class="attr">target</span>: <span class="title class_">Array</span>&lt;any&gt; | <span class="title class_">Object</span>, <span class="attr">key</span>: any, <span class="attr">val</span>: any): any &#123;</span><br><span class="line">  <span class="comment">// target 为数组  </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isValidArrayIndex</span>(key)) &#123;</span><br><span class="line">    <span class="comment">// 修改数组的长度, 避免索引&gt;数组长度导致splcie()执行有误</span></span><br><span class="line">    target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key)</span><br><span class="line">    <span class="comment">// 利用数组的splice变异方法触发响应式  </span></span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// key 已经存在，直接修改属性值  </span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = (<span class="attr">target</span>: any).<span class="property">__ob__</span></span><br><span class="line">  <span class="comment">// target 本身就不是响应式数据, 直接赋值</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对属性进行响应式处理</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(ob.<span class="property">value</span>, key, val)</span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们阅读以上源码可知，vm.$set 的实现原理是：</p><ol><li>如果目标是数组，直接使用数组的 splice 方法触发相应式；</li><li>如果目标是对象，会先判读属性是否存在、对象是否是响应式，</li><li>最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue-的设计模式&quot;&gt;&lt;a href=&quot;#Vue-的设计模式&quot; class=&quot;headerlink&quot; title=&quot;Vue 的设计模式&quot;&gt;&lt;/a&gt;Vue 的设计模式&lt;/h2&gt;&lt;h3 id=&quot;介绍一下-MVVM-模式，和-MVC-模式有什么区别？&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="https://dont-sleep-so-late.github.io/tags/Vue/"/>
    
    <category term="八股文" scheme="https://dont-sleep-so-late.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/06/HTML/html5/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/06/HTML/html5/</id>
    <published>2024-03-06T07:02:15.000Z</published>
    <updated>2024-04-07T12:32:28.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="✍HTML5"><a href="#✍HTML5" class="headerlink" title="✍HTML5"></a>✍HTML5</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="✍目录总览"><a href="#✍目录总览" class="headerlink" title="✍目录总览"></a>✍目录总览</h1><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240306152415.png"></p><h1 id="1-HTML5提高"><a href="#1-HTML5提高" class="headerlink" title="1.HTML5提高"></a>1.HTML5提高</h1><ul><li>HTML5的新增特性主要是针对于以前的不足，增加了一些新的标签，新的表单和新的表单属性等。</li><li>这些新特性都有兼容性问题，基本都是IE9+以上版本的浏览器才支持，如果不考虑兼容性问题，可以大量使用这些新特性</li><li></li></ul><p>HTML5有更大的技术集，允许更多样化和强大的网站和应用程序。增加了新特性：语义特性，本地存储特性，设备兼容特性，连接特性，网页多媒体特性，三维、图形及特效特性，性能与集成特性，CSS3特性。这个集合有时称为HTML5和朋友，通常缩写为HTML5</p><h2 id="1-新增语义化标签🔥"><a href="#1-新增语义化标签🔥" class="headerlink" title="1.新增语义化标签🔥"></a>1.新增语义化标签🔥</h2><p>以前布局，我们基本用div 来做。 div 对于搜索引擎来说，是没有语义的。</p><p>新增语义化标签如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240306152419.png"></p><ul><li>&lt; header &gt; :头部标签</li><li>&lt; nav &gt;: 导航标签</li><li>&lt; article &gt;： 内容标签</li><li>&lt; section &gt;:定义文档某个区域</li><li>&lt; aside &gt;:侧边栏标签</li><li>&lt; footer &gt;: 尾部标签</li></ul><p><strong>–注意：</strong></p><ul><li>这种语义化标准主要是针对<strong>搜索引擎</strong>的</li><li>这些新标签页面中可以使用<strong>多次</strong></li><li>在IE9中，需要把这些元素转换为<strong>块级元素</strong></li><li>其实，移动端更喜欢使用这些标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">        header, nav &#123;</span><br><span class="line">            height: 120px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            border-radius: 15px;</span><br><span class="line">            width: 800px;</span><br><span class="line">            margin: 15px auto;</span><br><span class="line">        &#125;</span><br><span class="line">        section &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;头部标签&lt;/header&gt;</span><br><span class="line">    &lt;nav&gt;导航栏标签&lt;/nav&gt;</span><br><span class="line">    &lt;section&gt;某个区域&lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-新增视频标签🔥"><a href="#2-新增视频标签🔥" class="headerlink" title="2.新增视频标签🔥"></a>2.新增视频标签🔥</h2><h3 id="2-1-video视频🔥"><a href="#2-1-video视频🔥" class="headerlink" title="2.1 video视频🔥"></a>2.1 video视频🔥</h3><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240306152422.png"></p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;video src=&quot;文件地址&quot;   controls=&quot;controls&quot;&gt;&lt;/video&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">        video &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;video src=&quot;media/mi.mp4&quot; autoplay=&quot;autoplay&quot; muted=&quot;muted&quot;  loop=&quot;loop&quot; poster=&quot;media/mi9.jpg&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪自动播放(<strong>谷歌浏览器需要添加muted来解决自动播放问题</strong>)</td></tr><tr><td>controls</td><td>controls</td><td>向用户显示播放控件</td></tr><tr><td>width</td><td>pixels(像素)</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>pixels(像素)</td><td>设置播放器高度</td></tr><tr><td>loop</td><td>loop</td><td>播放完是否继续播放该视频,循环播放</td></tr><tr><td>preload</td><td>auto(预先加载视频)none(不应加载视频)</td><td>规定是否预加载视频(如果有了autoplay 就忽略该属性)</td></tr><tr><td>src</td><td>url</td><td>视频url的地址</td></tr><tr><td>poster</td><td>lmgurl</td><td>加载等待的画面图片</td></tr><tr><td>muted</td><td>muted</td><td>静音播放</td></tr></tbody></table><ul><li>一般不显示controls，让视频循环播放</li></ul><h3 id="2-2-audio音频"><a href="#2-2-audio音频" class="headerlink" title="2.2 audio音频"></a>2.2 audio音频</h3><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240306152426.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">&lt;audio src=&quot;media/music.mp3&quot; autoplay=&quot;autoplay&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放</td></tr><tr><td>src</td><td>url</td><td>要播放的音频的url</td></tr></tbody></table><h3 id="2-3总结"><a href="#2-3总结" class="headerlink" title="2.3总结"></a>2.3总结</h3><ol><li>音频标签和视频标签使用方式基本一致</li><li>浏览器支持情况不同</li><li><strong>谷歌浏览器把音频和视频自动播放禁止了</strong></li><li>我们可以给视频标签添加muted属性来静音播放视频，音频不可以(可以通过JavaScript解决)</li><li>视频标签是重点，我们经常设置自动播放，不适用controls控件，循环和设置大小属性</li></ol><h2 id="3-新增input类型🔥"><a href="#3-新增input类型🔥" class="headerlink" title="3.新增input类型🔥"></a>3.新增input类型🔥</h2><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>type&#x3D;“email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type&#x3D;“url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type&#x3D;“data”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type&#x3D;“time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type&#x3D;“month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type&#x3D;“week”</td><td>限制用户输入必须为周类型</td></tr><tr><td><strong>type&#x3D;”number”</strong></td><td><strong>限制用户输入必须为数字类型</strong></td></tr><tr><td><strong>type&#x3D;”tel”</strong></td><td><strong>手机号码</strong></td></tr><tr><td><strong>type&#x3D;”search”</strong></td><td><strong>搜索框</strong></td></tr><tr><td>type&#x3D;“color”</td><td>生成一个颜色选择表单</td></tr></tbody></table><ul><li>重点记住： <strong>number tel search</strong> 这三个</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span><br><span class="line">    &lt;form action=&quot;&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;邮箱: &lt;input type=&quot;email&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;网址: &lt;input type=&quot;url&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;日期: &lt;input type=&quot;date&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;时间: &lt;input type=&quot;time&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;数量: &lt;input type=&quot;number&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;手机号码: &lt;input type=&quot;tel&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;搜索: &lt;input type=&quot;search&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;颜色: &lt;input type=&quot;color&quot; /&gt;&lt;/li&gt;</span><br><span class="line">            &lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span><br><span class="line">            &lt;li&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-新增表单属性🔥"><a href="#4-新增表单属性🔥" class="headerlink" title="4.新增表单属性🔥"></a>4.新增表单属性🔥</h2><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td><strong>placeholder</strong></td><td><strong>提示文本</strong></td><td><strong>表单的提示信息，存在默认值将不显示</strong></td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off&#x2F;on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项，默认已经打开。如autocomplete&#x3D;“on” ,关闭autocomplete&#x3D;“off”，需要放在表单内，同时加上name属性，同时成功提交</td></tr><tr><td><strong>multiple</strong></td><td><strong>multiple</strong></td><td><strong>可以多选文件提示</strong></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;search&quot; name=&quot;sear&quot; id=&quot;&quot; required=&quot;required&quot; placeholder=&quot;pink老师&quot; autofocus=&quot;autofocus&quot; autocommplete=&quot;off&quot;&gt;</span><br><span class="line">       &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以通过以下设置方式修改placeholder里面的字体颜色</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input::placeholder &#123;</span><br><span class="line">color: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;✍HTML5&quot;&gt;&lt;a href=&quot;#✍HTML5&quot; class=&quot;headerlink&quot; title=&quot;✍HTML5&quot;&gt;&lt;/a&gt;✍HTML5&lt;/h1&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#x3D;</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="HTML5" scheme="https://dont-sleep-so-late.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>Vue3项目配置</title>
    <link href="https://dont-sleep-so-late.github.io/2024/03/05/Vue/Vue3%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    <id>https://dont-sleep-so-late.github.io/2024/03/05/Vue/Vue3%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-05T09:31:36.000Z</published>
    <updated>2024-03-16T08:22:42.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest name -- --template vue-ts</span><br></pre></td></tr></table></figure><h2 id="编码规范配置"><a href="#编码规范配置" class="headerlink" title="编码规范配置"></a>编码规范配置</h2><blockquote><p>ESLint：编码规范检查<br>Prettier：代码格式化工具</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslint =&gt; ESLint的核心代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@typescript-eslint/parser =&gt; ESLint的解析器，用于解析ts，从而检查和规范ts代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@typescript-eslint/eslint-plugin =&gt; 一个ESLint插件，包含了各类定义好的检测ts代码的规范</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslint-plugin-vue =&gt; vue3的代码校验</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prettier =&gt; prettier插件的核心代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslint-config-prettier =&gt; 解决ESLint中的样式规范和prettier中样式规范的冲突，以prettier的样式规范为准，使ESLint中的样式规范自动失效</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eslint-plugin-prettier =&gt; 将prettier作为ESLint规范来使用</span></span><br><span class="line">cnpm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-vue prettier eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="eslintrc-js配置文件"><a href="#eslintrc-js配置文件" class="headerlink" title=".eslintrc.js配置文件"></a><code>.eslintrc.js</code>配置文件</h4><blockquote><p><a href="https://eslint.org/docs/latest/user-guide/configuring/configuration-files#configuration-file-formats">https://eslint.org/docs/latest/user-guide/configuring/configuration-files#configuration-file-formats</a><br><a href="https://eslint.vuejs.org/rules">https://eslint.vuejs.org/rules</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>, <span class="comment">//定义ESLint的解析器</span></span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="string">&#x27;prettier/@typescript-eslint&#x27;</span>,  <span class="comment">// 使@typescript-eslint中的样式规范失效，遵循prettier中的样式规范</span></span><br><span class="line">        <span class="string">&#x27;plugin:prettier/recommended&#x27;</span> <span class="comment">// 使用prettier中的样式规范，且如果使ESLint会检测prettier的格式问题，同样将格式问题以error的形式抛出</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">        <span class="string">&quot;react&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;React&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;detect&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">2019</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">jsx</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="comment">//指定代码的运行环境</span></span><br><span class="line">        <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="prettierrc-js配置文件"><a href="#prettierrc-js配置文件" class="headerlink" title=".prettierrc.js配置文件"></a><code>.prettierrc.js</code>配置文件</h4><blockquote><p><a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">printWidth</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">semi</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">singleQuote</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">trailingComma</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="attr">bracketSpacing</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">jsxBracketSameLine</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">arrowParens</span>: <span class="string">&quot;avoid&quot;</span>,</span><br><span class="line">    <span class="attr">insertPragma</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">tabWidth</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">useTabs</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="eslintignoreESLint忽略检查文件"><a href="#eslintignoreESLint忽略检查文件" class="headerlink" title=".eslintignoreESLint忽略检查文件"></a><code>.eslintignore</code>ESLint忽略检查文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">*.md</span><br><span class="line">.vscode</span><br><span class="line">.idea</span><br><span class="line">dist</span><br><span class="line">/public</span><br><span class="line">.eslintrc.js</span><br><span class="line">src/assets</span><br></pre></td></tr></table></figure><h4 id="prettierignorePrettier忽略格式化文件"><a href="#prettierignorePrettier忽略格式化文件" class="headerlink" title=".prettierignorePrettier忽略格式化文件"></a><code>.prettierignore</code>Prettier忽略格式化文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/dist/*</span><br><span class="line">/node_modules/**</span><br><span class="line">**/*.svg</span><br><span class="line">/public/*</span><br></pre></td></tr></table></figure><h3 id="代码检查-自动修复-自动格式化"><a href="#代码检查-自动修复-自动格式化" class="headerlink" title="代码检查 &amp; 自动修复 &amp; 自动格式化"></a>代码检查 &amp; 自动修复 &amp; 自动格式化</h3><p><code>package.json</code>的<code>scripts</code>中添加</p><blockquote><p><code>--ext</code>: 配置要检查文件的后缀<br><code>eslint --ext .js --ext .ts --ext .vue src</code>: 只检查src文件夹下的js&#x2F;ts&#x2F;vue文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint --ext .js --ext .ts --ext .vue src&quot;,</span><br><span class="line">    &quot;lint-fix&quot;: &quot;eslint --ext .js --ext .ts --ext .vue src --fix&quot;,</span><br><span class="line">    &quot;prettier&quot;: &quot;prettier --write .&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">代码检查</span></span><br><span class="line">cnpm run lint</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动修复  tips: 部分代码修复可能会影响功能，所以不会自动修复，会给出提示</span></span><br><span class="line">cnpm run lint-fix</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prettier 自动格式化</span></span><br><span class="line">cnpm run prettier</span><br></pre></td></tr></table></figure><h3 id="统一代码风格"><a href="#统一代码风格" class="headerlink" title="统一代码风格"></a>统一代码风格</h3><blockquote><p>需安装插件<code>EditorConfig for VS Code</code></p></blockquote><p><code>.editorconfig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># https://editorconfig.org</span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">insert_final_newline = false</span><br><span class="line">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure><h2 id="Vite配置"><a href="#Vite配置" class="headerlink" title="Vite配置"></a>Vite配置</h2><h3 id="配置路径别名"><a href="#配置路径别名" class="headerlink" title="配置路径别名"></a>配置路径别名</h3><p><code>vite.config.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="comment">//src配置路径</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="comment">//@替代src</span></span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>解决：找不到模块“path”或其相应的类型声明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装node声明文件</span></span><br><span class="line">cnpm i @types/node --save-dev</span><br></pre></td></tr></table></figure><p>找到<code>tsconfig.json</code>配置文件,找到配置项<code>compilerOptions </code>添加配置,这一步的作用是让 IDE 可以对路径进行智能提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class="line">&quot;paths&quot;: &#123;</span><br><span class="line">  &quot;@/*&quot;: [</span><br><span class="line">    &quot;src/*&quot;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><code>.env.dev</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 开发环境</span><br><span class="line">NODE_ENV=&#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line"># 为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。</span><br><span class="line"># ts中通过`import.meta.env.VITE_APP_BASE_API`取值</span><br><span class="line">VITE_APP_PORT = 5173</span><br><span class="line">VITE_APP_BASE_API = &#x27;/dev-api&#x27;</span><br></pre></td></tr></table></figure><h3 id="反向代理解决跨域问题-配置项目运行端口"><a href="#反向代理解决跨域问题-配置项目运行端口" class="headerlink" title="反向代理解决跨域问题 &amp; 配置项目运行端口"></a>反向代理解决跨域问题 &amp; 配置项目运行端口</h3><p><code>vite.config.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">(<span class="params">&#123; mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取`.env`环境配置文件</span></span><br><span class="line">  <span class="keyword">const</span> env = <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; </span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">      <span class="comment">// host:&#x27;localhost&#x27;，//只能本地访问</span></span><br><span class="line">      <span class="attr">host</span>:<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="comment">//局域网别人也可访问</span></span><br><span class="line">      <span class="attr">port</span>: <span class="title class_">Number</span>(env.<span class="property">VITE_APP_PORT</span>),</span><br><span class="line">      <span class="comment">// 运行时自动打开浏览器</span></span><br><span class="line">      <span class="comment">// open: true,</span></span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">        [env.<span class="property">VITE_APP_BASE_API</span>]: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;http://localhost:1218&#x27;</span>,</span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">rewrite</span>: <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">            path.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;^&#x27;</span> + env.<span class="property">VITE_APP_BASE_API</span>), <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="引入scss全局变量"><a href="#引入scss全局变量" class="headerlink" title="引入scss全局变量"></a>引入scss全局变量</h3><p><code>vite.config.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(<span class="function">(<span class="params">&#123; mode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 引入scss全局变量</span></span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">      <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">        <span class="attr">scss</span>: &#123;</span><br><span class="line">          <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/styles/app-theme.scss&quot;;`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/styles/app-theme.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dark_main_color</span>: <span class="number">#021b32</span>;</span><br></pre></td></tr></table></figure><h2 id="TypeScript配置"><a href="#TypeScript配置" class="headerlink" title="TypeScript配置"></a>TypeScript配置</h2><p><code>tsconfig.json</code></p><blockquote><p>通过vite创建项目后的默认配置</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.node.json&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="解决：找不到模块“-router”或其相应的类型声明。"><a href="#解决：找不到模块“-router”或其相应的类型声明。" class="headerlink" title="解决：找不到模块“@&#x2F;router”或其相应的类型声明。"></a>解决：找不到模块“@&#x2F;router”或其相应的类型声明。</h3><p><code>tsconfig.json</code>新增如下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;src/*&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="解决：template中使用-store报错"><a href="#解决：template中使用-store报错" class="headerlink" title="解决：template中使用$store报错"></a>解决：template中使用$store报错</h3><p><code>vite-env.d.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Store</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$store</span>: <span class="title class_">Store</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><code>package.json</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;small-tools-web&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.1&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    // 运行</span><br><span class="line">    &quot;dev&quot;: &quot;vite --mode dev&quot;,</span><br><span class="line">    // 构建生成 dist 文件夹</span><br><span class="line">    &quot;build:prod&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build --mode prod&quot;,</span><br><span class="line">    // 在本地启动一个静态 Web 服务器，将 dist 文件夹运行在 http://localhost:8080</span><br><span class="line">    &quot;preview&quot;: &quot;vite preview --port 8080 --mode prod&quot;,</span><br><span class="line">    // eslint检查</span><br><span class="line">    &quot;lint&quot;: &quot;eslint --ext .js --ext .ts --ext .vue src&quot;,</span><br><span class="line">    // eslint自动修复</span><br><span class="line">    &quot;lint-fix&quot;: &quot;eslint --ext .js --ext .ts --ext .vue src --fix&quot;,</span><br><span class="line">    // prettier自动格式化代码</span><br><span class="line">    &quot;prettier&quot;: &quot;prettier --write .&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^3.2.37&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^4.1.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@types/node&quot;: &quot;^18.0.5&quot;,</span><br><span class="line">    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^5.30.6&quot;,</span><br><span class="line">    &quot;@typescript-eslint/parser&quot;: &quot;^5.30.6&quot;,</span><br><span class="line">    &quot;@vitejs/plugin-vue&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;^8.20.0&quot;,</span><br><span class="line">    &quot;eslint-config-prettier&quot;: &quot;^8.5.0&quot;,</span><br><span class="line">    &quot;eslint-plugin-prettier&quot;: &quot;^4.2.1&quot;,</span><br><span class="line">    &quot;eslint-plugin-vue&quot;: &quot;^9.2.0&quot;,</span><br><span class="line">    &quot;prettier&quot;: &quot;^2.7.1&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^4.6.4&quot;,</span><br><span class="line">    &quot;vite&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;vue-tsc&quot;: &quot;^0.38.4&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># devDependencies: 里面的插件只用于开发环境，不用于生产环境 </span><br><span class="line"># dependencies: 需要发布到生产环境的</span><br><span class="line"></span><br><span class="line"># 写入到 dependencies 对象</span><br><span class="line">npm i module_name -S    =&gt;    npm install module_name --save</span><br><span class="line"></span><br><span class="line"># 写入到 devDependencies 对象</span><br><span class="line">npm i module_name -D    =&gt;    npm install module_name --save-dev</span><br></pre></td></tr></table></figure><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass --save-dev</span><br></pre></td></tr></table></figure><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><blockquote><p><a href="https://router.vuejs.org/zh">https://router.vuejs.org/zh</a></p></blockquote><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><h3 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h3><p><code>src/router/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/error-page/404.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p><code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ****** ↓↓↓ 路由 ↓↓↓ ******</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>src/views/error-page/404.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;404&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>访问<code>http://ip:端口/#/404</code></p><h2 id="Element-Plus"><a href="#Element-Plus" class="headerlink" title="Element-Plus"></a>Element-Plus</h2><blockquote><p><a href="https://element-plus.gitee.io/zh-CN">https://element-plus.gitee.io/zh-CN</a></p></blockquote><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ****** ↓↓↓ element-plus ↓↓↓ ******</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册所有图标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(key, component)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Volar-支持"><a href="#Volar-支持" class="headerlink" title="Volar 支持"></a>Volar 支持</h3><p><code>tsconfig.json</code>中通过<code>compilerOptions.types</code>指定全局组件类型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;element-plus/global&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">link</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">class</span>=<span class="string">&quot;is-loading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:icon</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Edit&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Check&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Message&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Star&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">:icon</span>=<span class="string">&quot;Delete&quot;</span> <span class="attr">circle</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Check</span>, <span class="title class_">Delete</span>, <span class="title class_">Edit</span>, <span class="title class_">Message</span>, <span class="title class_">Search</span>, <span class="title class_">Star</span>, &#125; <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><h3 id="自定义样式-1"><a href="#自定义样式-1" class="headerlink" title="自定义样式"></a>自定义样式</h3><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/styles/index.scss&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>src/styles/index.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./element-plus-theme&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#021b32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/styles/element-plus-theme.scss</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ****** ↓↓↓ 覆盖 element-plus 的样式 ↓↓↓ ******</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮</span></span><br><span class="line"><span class="selector-class">.el-button--text</span> &#123;</span><br><span class="line">  <span class="comment">// background-color: #8f6732 !important; </span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><blockquote><p><a href="https://pinia.vuejs.org/">https://pinia.vuejs.org</a></p></blockquote><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia --save</span><br></pre></td></tr></table></figure><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line"></span><br><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$store</span> = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>src/store/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useAppStore <span class="keyword">from</span> <span class="string">&#x27;./modules/app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useStore</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="title function_">useAppStore</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useStore;</span><br></pre></td></tr></table></figure><p><code>src/store/modules/app.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/store/app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable language_">localStorage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useAppStore = <span class="title function_">defineStore</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: (): <span class="function"><span class="params">AppState</span> =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="variable language_">localStorage</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>) || <span class="string">&#x27;Small Tools&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">setName</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useAppStore;</span><br></pre></td></tr></table></figure><p><code>src/utils/storage.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * window.localStorage =&gt; 浏览器永久存储，用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable language_">localStorage</span> = &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">key: <span class="built_in">string</span>, val: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(val));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">json</span>: <span class="built_in">any</span> = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * window.sessionStorage =&gt; 浏览器本地存储，数据保存在当前会话中，在关闭窗口或标签页之后将会删除这些数据。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable language_">sessionStorage</span> = &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">key: <span class="built_in">string</span>, val: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(val));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">json</span>: <span class="built_in">any</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>页面引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;p&gt;store: &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;store: &#123;&#123; app.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;store: &#123;&#123; $store.app.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;el-button @click=&quot;changeStore(&#x27;666&#x27;)&quot;&gt;change store&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line">import useStore from &quot;@/store&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; app &#125; = useStore()</span><br><span class="line">// const name = ref(app.name)</span><br><span class="line">// 响应式</span><br><span class="line">const &#123; name: name &#125; = storeToRefs(app)</span><br><span class="line"></span><br><span class="line">function changeStore(value: string) &#123;</span><br><span class="line">    app.setName(value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Axios和API封装"><a href="#Axios和API封装" class="headerlink" title="Axios和API封装"></a>Axios和API封装</h2><blockquote><p><a href="http://www.axios-js.com/zh-cn/docs">http://www.axios-js.com/zh-cn/docs</a></p></blockquote><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install axios --save</span><br></pre></td></tr></table></figure><h3 id="axios工具封装"><a href="#axios工具封装" class="headerlink" title="axios工具封装"></a>axios工具封装</h3><p><code>src/utils/request.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosRequestConfig</span>, <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span>, <span class="title class_">ElMessageBox</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable language_">localStorage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_BASE_API</span>,</span><br><span class="line">  <span class="comment">// 请求超时时间：50s</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">50000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!config.<span class="property">headers</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">`Expected &#x27;config&#x27; and &#x27;config.headers&#x27; not to be undefined`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">token</span>) &#123;</span><br><span class="line">      <span class="comment">// 授权认证</span></span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">Authorization</span> = user.<span class="property">token</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 租户ID</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;TENANT_ID&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; code, msg &#125; = res;</span><br><span class="line">    <span class="keyword">if</span> (code === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// token过期</span></span><br><span class="line">      <span class="keyword">if</span> (code === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&quot;您的登录账号已失效，请重新登录&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">confirmButtonText</span>: <span class="string">&quot;再次登录&quot;</span>,</span><br><span class="line">          <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 清除浏览器全部缓存</span></span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">          <span class="comment">// 跳转登录页</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">          location.<span class="title function_">reload</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: msg || <span class="string">&#x27;系统出错&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">          <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(msg || <span class="string">&#x27;Error&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; msg &#125; = error.<span class="property">response</span>.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 未认证</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">&quot;您的登录账号已失效，请重新登录&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;再次登录&quot;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 清除浏览器全部缓存</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">        <span class="comment">// 跳转登录页</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        location.<span class="title function_">reload</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;网络异常，请稍后再试!&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(msg || <span class="string">&#x27;Error&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><h3 id="api封装"><a href="#api封装" class="headerlink" title="api封装"></a>api封装</h3><p>&#96;src&#x2F;api&#x2F;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拿到所有api</span></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">&#x27;./*/*.*&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">modules</span>: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> modulesFiles) &#123;</span><br><span class="line">  <span class="keyword">const</span> moduleName = key.<span class="title function_">replace</span>(<span class="regexp">/(.*\/)*([^.]+).*/gi</span>, <span class="string">&#x27;$2&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">value</span>: <span class="built_in">any</span> = modulesFiles[key];</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">default</span>) &#123;</span><br><span class="line">    <span class="comment">// 兼容js</span></span><br><span class="line">    modules[moduleName] = value.<span class="property">default</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 兼容ts</span></span><br><span class="line">    modules[moduleName] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(666, modules);</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> modules;</span><br></pre></td></tr></table></figure><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置全局api</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$api</span> = api;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="api调用demo"><a href="#api调用demo" class="headerlink" title="api调用demo"></a>api调用demo</h3><p><code>src/api/system/sys_login.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Captcha</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/api/system/login&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosPromise</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取验证码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCaptcha</span>(<span class="params"></span>): <span class="title class_">AxiosPromise</span>&lt;<span class="title class_">Captcha</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/captcha?t=&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>().<span class="title function_">toString</span>(),</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/types/api/system/login.d.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码类型声明</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Captcha</span> &#123;</span><br><span class="line">    <span class="attr">img</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">uuid</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/views/login/index.vue</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 组件实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; proxy &#125;: any = <span class="title function_">getCurrentInstance</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 获取验证码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleCaptcha</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> res = <span class="keyword">await</span> proxy.<span class="property">$api</span>.<span class="property">sys_login</span>.<span class="title function_">getCaptcha</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">handleCaptcha</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="用户登录成功后将用户信息存储到store中"><a href="#用户登录成功后将用户信息存储到store中" class="headerlink" title="用户登录成功后将用户信息存储到store中"></a>用户登录成功后将用户信息存储到store中</h3><p><code>src/views/login/index.vue</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  loginFormRef.<span class="property">value</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid: <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      state.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">      user.<span class="title function_">login</span>(state.<span class="property">loginForm</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: state.<span class="property">redirect</span> || <span class="string">&#x27;/&#x27;</span>, <span class="attr">query</span>: state.<span class="property">otherQuery</span> &#125;);</span><br><span class="line">        state.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="title function_">handleCaptchaGenerate</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p><code>src/store/modules/user.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoginFormData</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/api/system/login&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/store/user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable language_">localStorage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; login, logout &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/system/sys_login&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getUserPerm &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/system/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; resetRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: (): <span class="function"><span class="params">UserState</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userId</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">openId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: <span class="variable language_">localStorage</span>.<span class="title function_">get</span>(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">avatarUrl</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">roleNames</span>: [],</span><br><span class="line">    <span class="attr">permissionTreeList</span>: [],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">RESET_STATE</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$reset();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">login</span>(<span class="params">loginData: LoginFormData</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; username, password, code, uuid &#125; = loginData;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">login</span>(&#123;</span><br><span class="line">          <span class="attr">username</span>: username.<span class="title function_">trim</span>(),</span><br><span class="line">          <span class="attr">password</span>: password,</span><br><span class="line">          <span class="attr">grant_type</span>: <span class="string">&#x27;captcha&#x27;</span>,</span><br><span class="line">          <span class="attr">code</span>: code,</span><br><span class="line">          <span class="attr">uuid</span>: uuid,</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; tokenType, value &#125; = response.<span class="property">data</span>;</span><br><span class="line">          <span class="keyword">const</span> token = tokenType + <span class="string">&#x27; &#x27;</span> + value;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">set</span>(<span class="string">&#x27;token&#x27;</span>, token);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">token</span> = token;</span><br><span class="line">          <span class="title function_">resolve</span>(token);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  获取用户信息（昵称、头像、角色集合、权限集合）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">getUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">getUserPerm</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="string">&#x27;Verification failed, please Login again.&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> &#123; userId, openId, nickname, avatarUrl, roleNames, permissionTreeList &#125; = data;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">userId</span> = userId;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">openId</span> = openId;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">nickname</span> = nickname;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">avatarUrl</span> = avatarUrl;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">roleNames</span> = roleNames;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">permissionTreeList</span> = permissionTreeList;</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注销</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">logout</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">remove</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">RESET_STATE</span>();</span><br><span class="line">          <span class="title function_">resetRouter</span>();</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除 Token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">resetToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">remove</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">RESET_STATE</span>();</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUserStore;</span><br></pre></td></tr></table></figure><p><code>src/store/modules/permission.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PermissionState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/types/store/permission&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;../../views/**/**.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Layout</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/layout/index.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">parentView</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/layout/parentView.vue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">filterAsyncRoutes</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  routes: RouteRecordRaw[],</span></span><br><span class="line"><span class="params">  roleNames: <span class="built_in">string</span>[]</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">res</span>: <span class="title class_">RouteRecordRaw</span>[] = [];</span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = &#123; ...route &#125; <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp.<span class="property">component</span> === <span class="string">&#x27;Layout&#x27;</span>) &#123;</span><br><span class="line">      tmp.<span class="property">component</span> = <span class="title class_">Layout</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp.<span class="property">component</span> === <span class="string">&#x27;parentView&#x27;</span>) &#123;</span><br><span class="line">      tmp.<span class="property">component</span> = parentView</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> component = modules[<span class="string">`../../views/<span class="subst">$&#123;tmp.component&#125;</span>.vue`</span>] <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">      <span class="keyword">if</span> (component) &#123;</span><br><span class="line">        tmp.<span class="property">component</span> = modules[<span class="string">`../../views/<span class="subst">$&#123;tmp.component&#125;</span>.vue`</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tmp.<span class="property">component</span> = modules[<span class="string">`../../views/error-page/404.vue`</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">push</span>(tmp);</span><br><span class="line">    <span class="keyword">if</span> (tmp.<span class="property">children</span>) &#123;</span><br><span class="line">      tmp.<span class="property">children</span> = <span class="title function_">filterAsyncRoutes</span>(tmp.<span class="property">children</span>, roleNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 侧边栏权限路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> usePermissionStore = <span class="title function_">defineStore</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;permission&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: (): <span class="function"><span class="params">PermissionState</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">routes</span>: [],</span><br><span class="line">    <span class="attr">addRoutes</span>: [],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">setRoutes</span>(<span class="params">routes: RouteRecordRaw[]</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">addRoutes</span> = routes;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">routes</span> = constantRoutes.<span class="title function_">concat</span>(routes);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">generateRoutes</span>(<span class="params">roleNames: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; user &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">      <span class="keyword">const</span> accessedRoutes = <span class="title function_">filterAsyncRoutes</span>(user.<span class="property">permissionTreeList</span>, roleNames);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setRoutes</span>(accessedRoutes);</span><br><span class="line">        <span class="title function_">resolve</span>(accessedRoutes);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> usePermissionStore;</span><br></pre></td></tr></table></figure><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p><code>src/router/index.ts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHashHistory, RouteRecordRaw &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">// 静态路由</span><br><span class="line">export const constantRoutes: Array&lt;RouteRecordRaw&gt; = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/login/index.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/test&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/test/index.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/404&#x27;,</span><br><span class="line">        component: () =&gt; import(&#x27;@/views/error-page/404.vue&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 创建路由</span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(),</span><br><span class="line">    routes: constantRoutes as RouteRecordRaw[],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 重置路由</span><br><span class="line">export function resetRouter() &#123;</span><br><span class="line">    const &#123; permission &#125; = useStore();</span><br><span class="line">    permission.routes.forEach((route) =&gt; &#123;</span><br><span class="line">        const name = route.name;</span><br><span class="line">        if (name &amp;&amp; router.hasRoute(name)) &#123;</span><br><span class="line">            router.removeRoute(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default router;</span><br></pre></td></tr></table></figure><h3 id="刷新路由时权限"><a href="#刷新路由时权限" class="headerlink" title="刷新路由时权限"></a>刷新路由时权限</h3><p><code>permission.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span>;</span><br><span class="line"><span class="title class_">NProgress</span>.<span class="title function_">configure</span>(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;); <span class="comment">// 进度环显示/隐藏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 白名单路由</span></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/auth-redirect&#x27;</span>];</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123; user, permission &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">  <span class="keyword">const</span> hasToken = user.<span class="property">token</span>;</span><br><span class="line">  <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">    <span class="comment">// 登录成功，跳转到首页</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hasGetUserInfo = user.<span class="property">roleNames</span>.<span class="property">length</span> &gt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (hasGetUserInfo) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">matched</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">from</span>.<span class="property">name</span> ? <span class="title function_">next</span>(&#123; <span class="attr">name</span>: <span class="keyword">from</span>.<span class="property">name</span> <span class="keyword">as</span> <span class="built_in">any</span> &#125;) : <span class="title function_">next</span>(<span class="string">&#x27;/401&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">await</span> user.<span class="title function_">getUserInfo</span>();</span><br><span class="line">          <span class="keyword">const</span> roleNames = user.<span class="property">roleNames</span>;</span><br><span class="line">          <span class="keyword">const</span> <span class="attr">accessRoutes</span>: <span class="built_in">any</span> = <span class="keyword">await</span> permission.<span class="title function_">generateRoutes</span>(roleNames);</span><br><span class="line">          accessRoutes.<span class="title function_">forEach</span>(<span class="function">(<span class="params">route: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            router.<span class="title function_">addRoute</span>(route);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// 移除 token 并跳转登录页</span></span><br><span class="line">          <span class="keyword">await</span> user.<span class="title function_">resetToken</span>();</span><br><span class="line">          <span class="title class_">ElMessage</span>.<span class="title function_">error</span>((error <span class="keyword">as</span> <span class="built_in">any</span>) || <span class="string">&#x27;Has Error&#x27;</span>);</span><br><span class="line">          <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">          <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 未登录可以访问白名单页面(登录页面)</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由权限</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/permission&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="动态路由布局"><a href="#动态路由布局" class="headerlink" title="动态路由布局"></a>动态路由布局</h2><h3 id="动态路由布局相关页面"><a href="#动态路由布局相关页面" class="headerlink" title="动态路由布局相关页面"></a>动态路由布局相关页面</h3><p>具体见源码<code>src/layout</code>部分</p><p><code>src/layout/index.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class=&quot;classObj&quot; class=&quot;app-wrapper&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;device === &#x27;mobile&#x27; &amp;&amp; sidebar.opened&quot; class=&quot;drawer-bg&quot; @click=&quot;handleClickOutside&quot; /&gt;</span><br><span class="line">    &lt;Sidebar class=&quot;sidebar-container&quot; /&gt;</span><br><span class="line">    &lt;div :class=&quot;&#123; hasTagsView: needTagsView &#125;&quot; class=&quot;main-container&quot;&gt;</span><br><span class="line">      &lt;div :class=&quot;&#123; &#x27;fixed-header&#x27;: true &#125;&quot;&gt;</span><br><span class="line">        &lt;navbar /&gt;</span><br><span class="line">        &lt;tags-view v-if=&quot;needTagsView&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;app-main /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, watchEffect &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useWindowSize &#125; from &#x27;@vueuse/core&#x27;;</span><br><span class="line">import &#123; AppMain, Navbar, TagsView &#125; from &#x27;./components/index&#x27;;</span><br><span class="line">import Sidebar from &#x27;./components/Sidebar/index.vue&#x27;;</span><br><span class="line"></span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const &#123; width &#125; = useWindowSize();</span><br><span class="line">const WIDTH = 992;</span><br><span class="line"></span><br><span class="line">const &#123; app, setting &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const sidebar = computed(() =&gt; app.sidebar);</span><br><span class="line">const device = computed(() =&gt; app.device);</span><br><span class="line">const needTagsView = computed(() =&gt; setting.tagsView);</span><br><span class="line"></span><br><span class="line">const classObj = computed(() =&gt; (&#123;</span><br><span class="line">  hideSidebar: !sidebar.value.opened,</span><br><span class="line">  openSidebar: sidebar.value.opened,</span><br><span class="line">  withoutAnimation: sidebar.value.withoutAnimation,</span><br><span class="line">  mobile: device.value === &#x27;mobile&#x27;,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">  if (width.value &lt; WIDTH) &#123;</span><br><span class="line">    app.toggleDevice(&#x27;mobile&#x27;);</span><br><span class="line">    app.closeSideBar(true);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    app.toggleDevice(&#x27;desktop&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function handleClickOutside() &#123;</span><br><span class="line">  app.closeSideBar(false);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">@import &#x27;@/styles/mixin.scss&#x27;;</span><br><span class="line">@import &#x27;@/styles/variables.module.scss&#x27;;</span><br><span class="line"></span><br><span class="line">.app-wrapper &#123;</span><br><span class="line">  @include clearfix;</span><br><span class="line">  position: relative;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line"></span><br><span class="line">  &amp;.mobile.openSidebar &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.drawer-bg &#123;</span><br><span class="line">  background: #000;</span><br><span class="line">  opacity: 0.3;</span><br><span class="line">  width: 100%;</span><br><span class="line">  top: 0;</span><br><span class="line">  height: 100%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  z-index: 999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fixed-header &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  z-index: 9;</span><br><span class="line">  width: calc(100% - #&#123;$sideBarWidth&#125;);</span><br><span class="line">  transition: width 0.28s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hideSidebar .fixed-header &#123;</span><br><span class="line">  width: calc(100% - 54px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.mobile .fixed-header &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/parentView.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentView&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>src/layout/components/AppMain.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section class=&quot;app-main&quot;&gt;</span><br><span class="line">    &lt;router-view v-slot=&quot;&#123; Component, route &#125;&quot;&gt;</span><br><span class="line">      &lt;transition name=&quot;router-fade&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">        &lt;keep-alive :include=&quot;cachedViews&quot;&gt;</span><br><span class="line">          &lt;component :is=&quot;Component&quot; :key=&quot;route.fullPath&quot; /&gt;</span><br><span class="line">        &lt;/keep-alive&gt;</span><br><span class="line">      &lt;/transition&gt;</span><br><span class="line">    &lt;/router-view&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; tagsView &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const cachedViews = computed(() =&gt; tagsView.cachedViews);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.app-main &#123;</span><br><span class="line">  min-height: calc(100vh - 50px);</span><br><span class="line">  width: 100%;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fixed-header+.app-main &#123;</span><br><span class="line">  padding-top: 50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hasTagsView &#123;</span><br><span class="line">  .app-main &#123;</span><br><span class="line">    min-height: calc(100vh - 84px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .fixed-header+.app-main &#123;</span><br><span class="line">    padding-top: 84px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-popup-parent--hidden &#123;</span><br><span class="line">  .fixed-header &#123;</span><br><span class="line">    padding-right: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Navbar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Navbar.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">AppMain</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./AppMain.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">TagsView</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./TagsView/index.vue&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/Navbar.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;navbar&quot;&gt;</span><br><span class="line">    &lt;hamburger id=&quot;hamburger-container&quot; :is-active=&quot;sidebar.opened&quot; class=&quot;hamburger-container&quot;</span><br><span class="line">      @toggleClick=&quot;toggleSideBar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;breadcrumb id=&quot;breadcrumb-container&quot; class=&quot;breadcrumb-container&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;right-menu&quot;&gt;</span><br><span class="line">      &lt;el-dropdown class=&quot;avatar-container right-menu-item hover-effect&quot; trigger=&quot;click&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;el-avatar :src=&quot;avatarUrl&quot; /&gt;</span><br><span class="line">          &lt;div class=&quot;user-info&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; nickname &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;CaretBottom style=&quot;width: 0.6em; height: 0.6em; margin-left: 5px&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;template #dropdown&gt;</span><br><span class="line">          &lt;el-dropdown-menu&gt;</span><br><span class="line">            &lt;router-link to=&quot;/&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;首页&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/router-link&gt;</span><br><span class="line">            &lt;router-link to=&quot;/system/personal-center&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;个人中心&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/router-link&gt;</span><br><span class="line">            &lt;a target=&quot;_blank&quot; href=&quot;https://gitee.com/zhengqingya&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;Gitee&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;router-link to=&quot;/other/anonymity&quot;&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;提建议&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/router-link&gt;</span><br><span class="line">            &lt;el-dropdown-item divided @click=&quot;logout&quot;&gt; 退出 &lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/el-dropdown-menu&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-dropdown&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; ElMessageBox &#125; from &#x27;element-plus&#x27;;</span><br><span class="line"></span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">// 组件依赖</span><br><span class="line">import Breadcrumb from &#x27;@/components/Breadcrumb/index.vue&#x27;;</span><br><span class="line">import Hamburger from &#x27;@/components/Hamburger/index.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; app, user, tagsView &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const route = useRoute();</span><br><span class="line">const router = useRouter();</span><br><span class="line"></span><br><span class="line">const sidebar = computed(() =&gt; app.sidebar);</span><br><span class="line">const device = computed(() =&gt; app.device);</span><br><span class="line">const avatarUrl = computed(() =&gt; user.avatarUrl);</span><br><span class="line">const nickname = computed(() =&gt; user.nickname);</span><br><span class="line"></span><br><span class="line">function toggleSideBar() &#123;</span><br><span class="line">  app.toggleSidebar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function logout() &#123;</span><br><span class="line">  ElMessageBox.confirm(&#x27;确定注销并退出系统吗？&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class="line">    confirmButtonText: &#x27;确定&#x27;,</span><br><span class="line">    cancelButtonText: &#x27;取消&#x27;,</span><br><span class="line">    type: &#x27;warning&#x27;,</span><br><span class="line">  &#125;).then(() =&gt; &#123;</span><br><span class="line">    user</span><br><span class="line">      .logout()</span><br><span class="line">      .then(() =&gt; &#123;</span><br><span class="line">        tagsView.delAllViews();</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(() =&gt; &#123;</span><br><span class="line">        router.push(`/login?redirect=$&#123;route.fullPath&#125;`);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.navbar &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: relative;</span><br><span class="line">  background: $dark_main_color;</span><br><span class="line">  box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08);</span><br><span class="line"></span><br><span class="line">  .hamburger-container &#123;</span><br><span class="line">    line-height: 46px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    float: left;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    transition: background 0.3s;</span><br><span class="line">    -webkit-tap-highlight-color: transparent;</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      background: rgba(0, 0, 0, 0.025);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .breadcrumb-container &#123;</span><br><span class="line">    float: left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-menu &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    height: 100%;</span><br><span class="line">    line-height: 50px;</span><br><span class="line"></span><br><span class="line">    &amp;:focus &#123;</span><br><span class="line">      outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right-menu-item &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      padding: 0 8px;</span><br><span class="line">      height: 100%;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">      color: #5a5e66;</span><br><span class="line">      vertical-align: text-bottom;</span><br><span class="line"></span><br><span class="line">      &amp;.hover-effect &#123;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        transition: background 0.3s;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          background: rgba(0, 0, 0, 0.025);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .avatar-container &#123;</span><br><span class="line">      margin-right: 60px;</span><br><span class="line"></span><br><span class="line">      .user-info &#123;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: -50px;</span><br><span class="line">        top: 15px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/Sidebar/index.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :class=&quot;&#123; &#x27;has-logo&#x27;: true &#125;&quot;&gt;</span><br><span class="line">    &lt;logo :collapse=&quot;isCollapse&quot; /&gt;</span><br><span class="line">    &lt;el-scrollbar wrap-class=&quot;scrollbar-wrapper&quot;&gt;</span><br><span class="line">      &lt;el-menu :default-active=&quot;activeMenu&quot; :collapse=&quot;isCollapse&quot; :background-color=&quot;variables.menuBg&quot;</span><br><span class="line">        :text-color=&quot;variables.menuText&quot; :active-text-color=&quot;variables.menuActiveText&quot; :unique-opened=&quot;true&quot;</span><br><span class="line">        :collapse-transition=&quot;false&quot; mode=&quot;vertical&quot;&gt;</span><br><span class="line">        &lt;sidebar-item v-for=&quot;route in routes&quot; :item=&quot;route&quot; :key=&quot;route.path&quot; :base-path=&quot;route.path&quot; /&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-scrollbar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line"></span><br><span class="line">import SidebarItem from &#x27;./SidebarItem.vue&#x27;;</span><br><span class="line">import Logo from &#x27;./Logo.vue&#x27;;</span><br><span class="line">import variables from &#x27;@/styles/variables.module.scss&#x27;;</span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; permission, app &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const route = useRoute();</span><br><span class="line">const routes = computed(() =&gt; permission.routes);</span><br><span class="line">const isCollapse = computed(() =&gt; !app.sidebar.opened);</span><br><span class="line"></span><br><span class="line">const activeMenu = computed(() =&gt; &#123;</span><br><span class="line">  const &#123; meta, path &#125; = route;</span><br><span class="line">  // if set path, the sidebar will highlight the path you set</span><br><span class="line">  if (meta.activeMenu) &#123;</span><br><span class="line">    return meta.activeMenu as string;</span><br><span class="line">  &#125;</span><br><span class="line">  return path;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/Sidebar/Link.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;a v-if=&quot;isExternal(to)&quot; :href=&quot;to&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">  &lt;div v-else @click=&quot;push&quot;&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, defineComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; isExternal &#125; from &#x27;@/utils/validate&#x27;;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line"></span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; app &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const sidebar = computed(() =&gt; app.sidebar);</span><br><span class="line">const device = computed(() =&gt; app.device);</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    const router = useRouter();</span><br><span class="line">    const push = () =&gt; &#123;</span><br><span class="line">      if (device.value === &#x27;mobile&#x27; &amp;&amp; sidebar.value.opened == true) &#123;</span><br><span class="line">        app.closeSideBar(false);</span><br><span class="line">      &#125;</span><br><span class="line">      router.push(props.to).catch((err) =&gt; &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123;</span><br><span class="line">      push,</span><br><span class="line">      isExternal,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/Sidebar/Logo.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;sidebar-logo-container&quot; :class=&quot;&#123; collapse: isCollapse &#125;&quot;&gt;</span><br><span class="line">    &lt;transition name=&quot;sidebarLogoFade&quot;&gt;</span><br><span class="line">      &lt;router-link</span><br><span class="line">        v-if=&quot;collapse&quot;</span><br><span class="line">        key=&quot;collapse&quot;</span><br><span class="line">        class=&quot;sidebar-logo-link&quot;</span><br><span class="line">        to=&quot;/&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;img v-if=&quot;logo&quot; :src=&quot;logo&quot; class=&quot;sidebar-logo&quot; /&gt;</span><br><span class="line">        &lt;h1 v-else class=&quot;sidebar-title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">      &lt;router-link v-else key=&quot;expand&quot; class=&quot;sidebar-logo-link&quot; to=&quot;/&quot;&gt;</span><br><span class="line">        &lt;img v-if=&quot;logo&quot; :src=&quot;logo&quot; class=&quot;sidebar-logo&quot; /&gt;</span><br><span class="line">        &lt;h1 class=&quot;sidebar-title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  collapse: &#123;</span><br><span class="line">    type: Boolean,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const state = reactive(&#123;</span><br><span class="line">  isCollapse: props.collapse,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const &#123; isCollapse &#125; = toRefs(state);</span><br><span class="line"></span><br><span class="line">const title = ref(&#x27;Small Tools&#x27;);</span><br><span class="line">const logo = ref(</span><br><span class="line">  &#x27;https://wpimg.wallstcn.com/69a1c46c-eb1c-4b46-8bd4-e9e686ef5251.png&#x27;</span><br><span class="line">);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.sidebarLogoFade-enter-active &#123;</span><br><span class="line">  transition: opacity 1.5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebarLogoFade-enter,</span><br><span class="line">.sidebarLogoFade-leave-to &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar-logo-container &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  line-height: 50px;</span><br><span class="line">  background: #00284c;</span><br><span class="line">  text-align: center;</span><br><span class="line">  overflow: hidden;</span><br><span class="line"></span><br><span class="line">  &amp; .sidebar-logo-link &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 100%;</span><br><span class="line"></span><br><span class="line">    &amp; .sidebar-logo &#123;</span><br><span class="line">      width: 32px;</span><br><span class="line">      height: 32px;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp; .sidebar-title &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      margin: 0;</span><br><span class="line">      color: #fff;</span><br><span class="line">      font-weight: 600;</span><br><span class="line">      line-height: 50px;</span><br><span class="line">      font-size: 14px;</span><br><span class="line">      font-family: Avenir, Helvetica Neue, Arial, Helvetica, sans-serif;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      margin-left: 12px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;.collapse &#123;</span><br><span class="line">    .sidebar-logo &#123;</span><br><span class="line">      margin-right: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/Sidebar/SidebarItem.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;!item.hidden&quot;&gt;</span><br><span class="line">    &lt;template v-if=&quot;</span><br><span class="line">      hasOneShowingChild(item.children, item) &amp;&amp;</span><br><span class="line">      (!onlyOneChild.children || onlyOneChild.noShowingChildren) &amp;&amp;</span><br><span class="line">      (!item.meta || !item.meta.alwaysShow)</span><br><span class="line">    &quot;&gt;</span><br><span class="line">      &lt;app-link v-if=&quot;onlyOneChild.meta&quot; :to=&quot;resolvePath(onlyOneChild.path)&quot;&gt;</span><br><span class="line">        &lt;el-menu-item :index=&quot;resolvePath(onlyOneChild.path)&quot; :class=&quot;&#123; &#x27;submenu-title-noDropdown&#x27;: !isNest &#125;&quot;&gt;</span><br><span class="line">          &lt;el-icon v-if=&quot;onlyOneChild.meta &amp;&amp; onlyOneChild.meta.icon&quot;&gt;</span><br><span class="line">            &lt;component :is=&quot;onlyOneChild.meta.icon&quot; /&gt;</span><br><span class="line">          &lt;/el-icon&gt;</span><br><span class="line">          &lt;template #title&gt;</span><br><span class="line">            &#123;&#123; onlyOneChild.meta.title &#125;&#125;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;/app-link&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-sub-menu v-else :index=&quot;resolvePath(item.path)&quot;&gt;</span><br><span class="line">      &lt;template #title&gt;</span><br><span class="line">        &lt;el-icon v-if=&quot;item.meta &amp;&amp; item.meta.icon&quot;&gt;</span><br><span class="line">          &lt;component :is=&quot;item.meta.icon&quot; /&gt;</span><br><span class="line">        &lt;/el-icon&gt;</span><br><span class="line">        &lt;span v-if=&quot;item.meta &amp;&amp; item.meta.title&quot;&gt;&#123;&#123;</span><br><span class="line">            item.meta.title</span><br><span class="line">        &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;sidebar-item v-for=&quot;child in item.children&quot; :key=&quot;child.path&quot; :item=&quot;child&quot; :is-nest=&quot;true&quot;</span><br><span class="line">        :base-path=&quot;resolvePath(child.path)&quot; class=&quot;nest-menu&quot; /&gt;</span><br><span class="line">    &lt;/el-sub-menu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import path from &#x27;path-browserify&#x27;;</span><br><span class="line">import &#123; isExternal &#125; from &#x27;@/utils/validate&#x27;;</span><br><span class="line">import AppLink from &#x27;./Link.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  item: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  isNest: &#123;</span><br><span class="line">    type: Boolean,</span><br><span class="line">    required: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  basePath: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const onlyOneChild = ref();</span><br><span class="line"></span><br><span class="line">function hasOneShowingChild(children = [] as any, parent: any) &#123;</span><br><span class="line">  if (!children) &#123;</span><br><span class="line">    children = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const showingChildren = children.filter((item: any) =&gt; &#123;</span><br><span class="line">    if (item.meta &amp;&amp; item.meta.hidden) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // Temp set(will be used if only has one showing child)</span><br><span class="line">      onlyOneChild.value = item;</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // When there is only one child router, the child router is displayed by default</span><br><span class="line">  if (showingChildren.length === 1) &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Show parent if there are no child router to display</span><br><span class="line">  if (showingChildren.length === 0) &#123;</span><br><span class="line">    onlyOneChild.value = &#123; ...parent, path: &#x27;&#x27;, noShowingChildren: true &#125;;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resolvePath(routePath: string) &#123;</span><br><span class="line">  if (isExternal(routePath)) &#123;</span><br><span class="line">    return routePath;</span><br><span class="line">  &#125;</span><br><span class="line">  if (isExternal(props.basePath)) &#123;</span><br><span class="line">    return props.basePath;</span><br><span class="line">  &#125;</span><br><span class="line">  return path.resolve(props.basePath, routePath);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/TagsView/index.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;tags-view__container&quot;&gt;</span><br><span class="line">    &lt;scroll-pane ref=&quot;scrollPaneRef&quot; class=&quot;tags-view__wrapper&quot; @scroll=&quot;handleScroll&quot;&gt;</span><br><span class="line">      &lt;router-link v-for=&quot;tag in visitedViews&quot; :key=&quot;tag.path&quot; :data-path=&quot;tag.path&quot;</span><br><span class="line">        :class=&quot;isActive(tag) ? &#x27;active&#x27; : &#x27;&#x27;&quot; :to=&quot;&#123; path: tag.path, query: tag.query &#125;&quot; class=&quot;tags-view__item&quot;</span><br><span class="line">        @click.middle=&quot;!isAffix(tag) ? closeSelectedTag(tag) : &#x27;&#x27;&quot; @contextmenu.prevent=&quot;openMenu(tag, $event)&quot;&gt;</span><br><span class="line">        &#123;&#123; tag.meta.title &#125;&#125;</span><br><span class="line">        &lt;span v-if=&quot;!isAffix(tag)&quot; class=&quot;icon-close&quot; @click.prevent.stop=&quot;closeSelectedTag(tag)&quot;&gt;</span><br><span class="line">          &lt;svg-icon icon-class=&quot;close&quot; /&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/router-link&gt;</span><br><span class="line">    &lt;/scroll-pane&gt;</span><br><span class="line">    &lt;ul v-show=&quot;visible&quot; :style=&quot;&#123; left: left + &#x27;px&#x27;, top: top + &#x27;px&#x27; &#125;&quot; class=&quot;tags-view__menu&quot;&gt;</span><br><span class="line">      &lt;li @click=&quot;refreshSelectedTag(selectedTag)&quot;&gt;</span><br><span class="line">        刷新</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li v-if=&quot;!isAffix(selectedTag)&quot; @click=&quot;closeSelectedTag(selectedTag)&quot;&gt;</span><br><span class="line">        关闭</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;closeOtherTags&quot;&gt;</span><br><span class="line">        关闭其它</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li v-if=&quot;!isFirstView()&quot; @click=&quot;closeLeftTags&quot;&gt;</span><br><span class="line">        关闭左侧</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li v-if=&quot;!isLastView()&quot; @click=&quot;closeRightTags&quot;&gt;</span><br><span class="line">        关闭右侧</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li @click=&quot;closeAllTags(selectedTag)&quot;&gt;</span><br><span class="line">        关闭所有</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  computed,</span><br><span class="line">  getCurrentInstance,</span><br><span class="line">  nextTick,</span><br><span class="line">  ref,</span><br><span class="line">  watch,</span><br><span class="line">  onMounted,</span><br><span class="line">  ComponentInternalInstance,</span><br><span class="line">&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">import path from &#x27;path-browserify&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">import &#123; TagView &#125; from &#x27;@/types/store/tagsview&#x27;;</span><br><span class="line"></span><br><span class="line">import ScrollPane from &#x27;./ScrollPane.vue&#x27;;</span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">const &#123; tagsView, permission &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const &#123; proxy &#125; = getCurrentInstance() as ComponentInternalInstance;</span><br><span class="line">const router = useRouter();</span><br><span class="line">const route = useRoute();</span><br><span class="line"></span><br><span class="line">const visitedViews = computed&lt;any&gt;(() =&gt; tagsView.visitedViews);</span><br><span class="line">const routes = computed&lt;any&gt;(() =&gt; permission.routes);</span><br><span class="line"></span><br><span class="line">const affixTags = ref([]);</span><br><span class="line">const visible = ref(false);</span><br><span class="line">const selectedTag = ref(&#123;&#125;);</span><br><span class="line">const scrollPaneRef = ref();</span><br><span class="line">const left = ref(0);</span><br><span class="line">const top = ref(0);</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">  route,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    addTags();</span><br><span class="line">    moveToCurrentTag();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    //初始化立即执行</span><br><span class="line">    immediate: true,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">watch(visible, (value) =&gt; &#123;</span><br><span class="line">  if (value) &#123;</span><br><span class="line">    document.body.addEventListener(&#x27;click&#x27;, closeMenu);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    document.body.removeEventListener(&#x27;click&#x27;, closeMenu);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function filterAffixTags(routes: any[], basePath = &#x27;/&#x27;) &#123;</span><br><span class="line">  let tags: TagView[] = [];</span><br><span class="line"></span><br><span class="line">  routes.forEach((route) =&gt; &#123;</span><br><span class="line">    if (route.meta &amp;&amp; route.meta.affix) &#123;</span><br><span class="line">      const tagPath = path.resolve(basePath, route.path);</span><br><span class="line">      tags.push(&#123;</span><br><span class="line">        fullPath: tagPath,</span><br><span class="line">        path: tagPath,</span><br><span class="line">        name: route.name,</span><br><span class="line">        meta: &#123; ...route.meta &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (route.children) &#123;</span><br><span class="line">      const childTags = filterAffixTags(route.children, route.path);</span><br><span class="line">      if (childTags.length &gt;= 1) &#123;</span><br><span class="line">        tags = tags.concat(childTags);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  return tags;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function initTags() &#123;</span><br><span class="line">  const res = filterAffixTags(routes.value) as [];</span><br><span class="line">  affixTags.value = res;</span><br><span class="line">  for (const tag of res) &#123;</span><br><span class="line">    // Must have tag name</span><br><span class="line">    if ((tag as TagView).name) &#123;</span><br><span class="line">      tagsView.addVisitedView(tag);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function addTags() &#123;</span><br><span class="line">  if (route.name) &#123;</span><br><span class="line">    tagsView.addView(route);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function moveToCurrentTag() &#123;</span><br><span class="line">  nextTick(() =&gt; &#123;</span><br><span class="line">    for (const r of visitedViews.value) &#123;</span><br><span class="line">      if (r.path === route.path) &#123;</span><br><span class="line">        scrollPaneRef.value.moveToTarget(r);</span><br><span class="line">        // when query is different then update</span><br><span class="line">        if (r.fullPath !== route.fullPath) &#123;</span><br><span class="line">          tagsView.updateVisitedView(route);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isActive(tag: TagView) &#123;</span><br><span class="line">  return tag.path === route.path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isAffix(tag: TagView) &#123;</span><br><span class="line">  return tag.meta &amp;&amp; tag.meta.affix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isFirstView() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    return (</span><br><span class="line">      (selectedTag.value as TagView).fullPath ===</span><br><span class="line">      visitedViews.value[1].fullPath ||</span><br><span class="line">      (selectedTag.value as TagView).fullPath === &#x27;/index&#x27;</span><br><span class="line">    );</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function isLastView() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    return (</span><br><span class="line">      (selectedTag.value as TagView).fullPath ===</span><br><span class="line">      visitedViews.value[visitedViews.value.length - 1].fullPath</span><br><span class="line">    );</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function refreshSelectedTag(view: TagView) &#123;</span><br><span class="line">  tagsView.delCachedView(view);</span><br><span class="line">  const &#123; fullPath &#125; = view;</span><br><span class="line">  nextTick(() =&gt; &#123;</span><br><span class="line">    router.replace(&#123; path: &#x27;/redirect&#x27; + fullPath &#125;).catch((err) =&gt; &#123;</span><br><span class="line">      console.warn(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function toLastView(visitedViews: TagView[], view?: any) &#123;</span><br><span class="line">  const latestView = visitedViews.slice(-1)[0];</span><br><span class="line">  if (latestView &amp;&amp; latestView.fullPath) &#123;</span><br><span class="line">    router.push(latestView.fullPath);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // now the default is to redirect to the home page if there is no tags-view,</span><br><span class="line">    // you can adjust it according to your needs.</span><br><span class="line">    if (view.name === &#x27;Dashboard&#x27;) &#123;</span><br><span class="line">      // to reload home page</span><br><span class="line">      router.replace(&#123; path: &#x27;/redirect&#x27; + view.fullPath &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      router.push(&#x27;/&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function closeSelectedTag(view: TagView) &#123;</span><br><span class="line">  tagsView.delView(view).then((res: any) =&gt; &#123;</span><br><span class="line">    if (isActive(view)) &#123;</span><br><span class="line">      toLastView(res.visitedViews, view);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function closeLeftTags() &#123;</span><br><span class="line">  tagsView.delLeftViews(selectedTag.value).then((res: any) =&gt; &#123;</span><br><span class="line">    if (</span><br><span class="line">      !res.visitedViews.find((item: any) =&gt; item.fullPath === route.fullPath)</span><br><span class="line">    ) &#123;</span><br><span class="line">      toLastView(res.visitedViews);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">function closeRightTags() &#123;</span><br><span class="line">  tagsView.delRightViews(selectedTag.value).then((res: any) =&gt; &#123;</span><br><span class="line">    if (</span><br><span class="line">      !res.visitedViews.find((item: any) =&gt; item.fullPath === route.fullPath)</span><br><span class="line">    ) &#123;</span><br><span class="line">      toLastView(res.visitedViews);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function closeOtherTags() &#123;</span><br><span class="line">  router.push(selectedTag.value);</span><br><span class="line">  tagsView.delOtherViews(selectedTag.value).then(() =&gt; &#123;</span><br><span class="line">    moveToCurrentTag();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function closeAllTags(view: TagView) &#123;</span><br><span class="line">  tagsView.delAllViews().then((res: any) =&gt; &#123;</span><br><span class="line">    toLastView(res.visitedViews, view);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function openMenu(tag: TagView, e: MouseEvent) &#123;</span><br><span class="line">  const menuMinWidth = 105;</span><br><span class="line">  const offsetLeft = proxy?.$el.getBoundingClientRect().left; // container margin left</span><br><span class="line">  const offsetWidth = proxy?.$el.offsetWidth; // container width</span><br><span class="line">  const maxLeft = offsetWidth - menuMinWidth; // left boundary</span><br><span class="line">  const l = e.clientX - offsetLeft + 15; // 15: margin right</span><br><span class="line"></span><br><span class="line">  if (l &gt; maxLeft) &#123;</span><br><span class="line">    left.value = maxLeft;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    left.value = l;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  top.value = e.clientY;</span><br><span class="line">  visible.value = true;</span><br><span class="line">  selectedTag.value = tag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function closeMenu() &#123;</span><br><span class="line">  visible.value = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function handleScroll() &#123;</span><br><span class="line">  closeMenu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  initTags();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.tags-view__container &#123;</span><br><span class="line">  height: 34px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background: $dark_main_color;</span><br><span class="line">  border-bottom: 1px solid #d8dce5;</span><br><span class="line">  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.12), 0 0 3px 0 rgba(0, 0, 0, 0.04);</span><br><span class="line"></span><br><span class="line">  .tags-view__wrapper &#123;</span><br><span class="line">    .tags-view__item &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      position: relative;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      height: 26px;</span><br><span class="line">      line-height: 26px;</span><br><span class="line">      border: 1px solid #d8dce5;</span><br><span class="line">      color: #495060;</span><br><span class="line">      background: $dark_main_color;</span><br><span class="line">      padding: 0 8px;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">      margin-left: 5px;</span><br><span class="line">      margin-top: 4px;</span><br><span class="line"></span><br><span class="line">      &amp;:first-of-type &#123;</span><br><span class="line">        margin-left: 15px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:last-of-type &#123;</span><br><span class="line">        margin-right: 15px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        color: var(--el-color-primary);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;.active &#123;</span><br><span class="line">        background-color: var(--el-color-primary);</span><br><span class="line">        color: var(--el-color-primary-light-9);</span><br><span class="line">        border-color: var(--el-color-primary);</span><br><span class="line"></span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          content: &#x27;&#x27;;</span><br><span class="line">          background: #fff;</span><br><span class="line">          display: inline-block;</span><br><span class="line">          width: 8px;</span><br><span class="line">          height: 8px;</span><br><span class="line">          border-radius: 50%;</span><br><span class="line">          position: relative;</span><br><span class="line">          margin-right: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .icon-close &#123;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        text-align: center;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          background-color: #ccc;</span><br><span class="line">          color: #fff;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tags-view__menu &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    background: $dark_main_color;</span><br><span class="line">    z-index: 3000;</span><br><span class="line">    position: absolute;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    padding: 5px 0;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    // color: #333;</span><br><span class="line">    box-shadow: 2px 2px 3px 0 rgba(0, 0, 0, 0.3);</span><br><span class="line"></span><br><span class="line">    li &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 7px 16px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        background: rgb(77, 156, 130);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/layout/components/TagsView/ScrollPane.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-scrollbar</span><br><span class="line">    ref=&quot;scrollContainer&quot;</span><br><span class="line">    :vertical=&quot;false&quot;</span><br><span class="line">    class=&quot;scroll-container&quot;</span><br><span class="line">    @wheel.prevent=&quot;handleScroll&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/el-scrollbar&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">  ref,</span><br><span class="line">  computed,</span><br><span class="line">  onMounted,</span><br><span class="line">  onBeforeUnmount,</span><br><span class="line">  getCurrentInstance,</span><br><span class="line">&#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; TagView &#125; from &#x27;@/types/store/tagsview&#x27;;</span><br><span class="line">import useStore from &#x27;@/store&#x27;;</span><br><span class="line"></span><br><span class="line">const tagAndTagSpacing = ref(4);</span><br><span class="line">const &#123; proxy &#125; = getCurrentInstance() as any;</span><br><span class="line"></span><br><span class="line">const emits = defineEmits([&#x27;scroll&#x27;]);</span><br><span class="line">const emitScroll = () =&gt; &#123;</span><br><span class="line">  emits(&#x27;scroll&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const &#123; tagsView &#125; = useStore();</span><br><span class="line"></span><br><span class="line">const visitedViews = computed(() =&gt; tagsView.visitedViews);</span><br><span class="line"></span><br><span class="line">const scrollWrapper = computed(() =&gt; proxy?.$refs.scrollContainer.$refs.wrap$);</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  scrollWrapper.value.addEventListener(&#x27;scroll&#x27;, emitScroll, true);</span><br><span class="line">&#125;);</span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  scrollWrapper.value.removeEventListener(&#x27;scroll&#x27;, emitScroll);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function handleScroll(e: WheelEvent) &#123;</span><br><span class="line">  const eventDelta = (e as any).wheelDelta || -e.deltaY * 40;</span><br><span class="line">  scrollWrapper.value.scrollLeft =</span><br><span class="line">    scrollWrapper.value.scrollLeft + eventDelta / 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function moveToTarget(currentTag: TagView) &#123;</span><br><span class="line">  const $container = proxy.$refs.scrollContainer.$el;</span><br><span class="line">  const $containerWidth = $container.offsetWidth;</span><br><span class="line">  const $scrollWrapper = scrollWrapper.value;</span><br><span class="line"></span><br><span class="line">  let firstTag = null;</span><br><span class="line">  let lastTag = null;</span><br><span class="line"></span><br><span class="line">  // find first tag and last tag</span><br><span class="line">  if (visitedViews.value.length &gt; 0) &#123;</span><br><span class="line">    firstTag = visitedViews.value[0];</span><br><span class="line">    lastTag = visitedViews.value[visitedViews.value.length - 1];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (firstTag === currentTag) &#123;</span><br><span class="line">    $scrollWrapper.scrollLeft = 0;</span><br><span class="line">  &#125; else if (lastTag === currentTag) &#123;</span><br><span class="line">    $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const tagListDom = document.getElementsByClassName(&#x27;tags-view__item&#x27;);</span><br><span class="line">    const currentIndex = visitedViews.value.findIndex(</span><br><span class="line">      (item) =&gt; item === currentTag</span><br><span class="line">    );</span><br><span class="line">    let prevTag = null;</span><br><span class="line">    let nextTag = null;</span><br><span class="line">    for (const k in tagListDom) &#123;</span><br><span class="line">      if (k !== &#x27;length&#x27; &amp;&amp; Object.hasOwnProperty.call(tagListDom, k)) &#123;</span><br><span class="line">        if (</span><br><span class="line">          (tagListDom[k] as any).dataset.path ===</span><br><span class="line">          visitedViews.value[currentIndex - 1].path</span><br><span class="line">        ) &#123;</span><br><span class="line">          prevTag = tagListDom[k];</span><br><span class="line">        &#125;</span><br><span class="line">        if (</span><br><span class="line">          (tagListDom[k] as any).dataset.path ===</span><br><span class="line">          visitedViews.value[currentIndex + 1].path</span><br><span class="line">        ) &#123;</span><br><span class="line">          nextTag = tagListDom[k];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // the tag&#x27;s offsetLeft after of nextTag</span><br><span class="line">    const afterNextTagOffsetLeft =</span><br><span class="line">      (nextTag as any).offsetLeft +</span><br><span class="line">      (nextTag as any).offsetWidth +</span><br><span class="line">      tagAndTagSpacing.value;</span><br><span class="line"></span><br><span class="line">    // the tag&#x27;s offsetLeft before of prevTag</span><br><span class="line">    const beforePrevTagOffsetLeft =</span><br><span class="line">      (prevTag as any).offsetLeft - tagAndTagSpacing.value;</span><br><span class="line">    if (afterNextTagOffsetLeft &gt; $scrollWrapper.scrollLeft + $containerWidth) &#123;</span><br><span class="line">      $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth;</span><br><span class="line">    &#125; else if (beforePrevTagOffsetLeft &lt; $scrollWrapper.scrollLeft) &#123;</span><br><span class="line">      $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  moveToTarget,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.scroll-container &#123;</span><br><span class="line">  .el-scrollbar__bar &#123;</span><br><span class="line">    bottom: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .el-scrollbar__wrap &#123;</span><br><span class="line">    height: 49px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.scroll-container &#123;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="按钮权限"><a href="#按钮权限" class="headerlink" title="按钮权限"></a>按钮权限</h2><h3 id="自定义指令-按钮权限"><a href="#自定义指令-按钮权限" class="headerlink" title="自定义指令 - 按钮权限"></a>自定义指令 - 按钮权限</h3><p><code>src/directive/permission/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">DirectiveBinding</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义权限指令`v-hasPerm` `v-hasRole`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按钮权限校验</span></span><br><span class="line"><span class="comment"> * array :  v-hasPerm=&quot;[&#x27;sys:user:add&#x27;,&#x27;sys:user:edit&#x27;]&quot;</span></span><br><span class="line"><span class="comment"> * single : v-hasPerm=&quot;&#x27;sys:user:add&#x27;&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">hasPerm</span>: <span class="title class_">Directive</span> = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el: HTMLElement, binding: DirectiveBinding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = binding;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前路由</span></span><br><span class="line">    <span class="keyword">const</span> currentRouteUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">replace</span>(<span class="string">&#x27;#/&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路由：&#x27;</span>, currentRouteUrl)</span><br><span class="line">    <span class="keyword">const</span> btnPermList = <span class="title function_">getBtnPermList</span>(currentRouteUrl, user.<span class="property">permissionTreeList</span>, [])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;拥有的按钮权限：&#x27;</span>, btnPermList);</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="comment">// DOM绑定需要的按钮权限标识</span></span><br><span class="line">      <span class="keyword">const</span> requiredPerms = value <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? value : [value];</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;需要的按钮权限：&#x27;</span>, requiredPerms);</span><br><span class="line">      <span class="keyword">const</span> hasPerm = btnPermList.<span class="title function_">some</span>(<span class="function"><span class="params">btnPerm</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> requiredPerms.<span class="title function_">includes</span>(btnPerm);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!hasPerm) &#123;</span><br><span class="line">        el.<span class="property">parentNode</span> &amp;&amp; el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">        <span class="string">&quot;need perms! Like v-has-perm=\&quot;[&#x27;sys:user:add&#x27;,&#x27;sys:user:edit&#x27;]\&quot;&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前路由下的按钮权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentRouteUrl 当前路由url ex: system/user/index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permissionTreeList 权限菜单树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> btnPermList 按钮权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 按钮权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBtnPermList</span>(<span class="params">currentRouteUrl: <span class="built_in">string</span>, permissionTreeList: <span class="built_in">any</span>, btnPermList: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span>): <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (permissionTreeList) &#123;</span><br><span class="line">    permissionTreeList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      meta: <span class="built_in">any</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">      component: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">      children: <span class="built_in">any</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">component</span> === currentRouteUrl || e.<span class="property">component</span> === currentRouteUrl + <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">        e.<span class="property">meta</span>.<span class="property">btnPermList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">btnPerm: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">          btnPermList.<span class="title function_">push</span>(btnPerm)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> childList = e.<span class="property">children</span></span><br><span class="line">      <span class="keyword">if</span> (childList) &#123;</span><br><span class="line">        <span class="title function_">getBtnPermList</span>(currentRouteUrl, childList, btnPermList)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> btnPermList</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> btnPermList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色权限校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">hasRole</span>: <span class="title class_">Directive</span> = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el: HTMLElement, binding: DirectiveBinding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = binding;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="comment">// DOM绑定需要的角色编码</span></span><br><span class="line">      <span class="keyword">const</span> requiredRoles = value;</span><br><span class="line">      <span class="keyword">const</span> &#123; user &#125; = <span class="title function_">useStore</span>();</span><br><span class="line">      <span class="keyword">const</span> hasRole = user.<span class="property">roleNames</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">perm</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> requiredRoles.<span class="title function_">includes</span>(perm);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!hasRole) &#123;</span><br><span class="line">        el.<span class="property">parentNode</span> &amp;&amp; el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;need roles! Like v-has-role=\&quot;[&#x27;admin&#x27;,&#x27;test&#x27;]\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>src/directive/index.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; hasPerm, hasRole &#125; <span class="keyword">from</span> <span class="string">&#x27;./permission&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="注册自定义指令"><a href="#注册自定义指令" class="headerlink" title="注册自定义指令"></a>注册自定义指令</h3><p><code>main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义指令(按钮权限)</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> directive <span class="keyword">from</span> <span class="string">&#x27;@/directive&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(directive).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">directive</span>(key, (directive <span class="keyword">as</span> &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">Directive</span> &#125;)[key]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="页面使用demo"><a href="#页面使用demo" class="headerlink" title="页面使用demo"></a>页面使用demo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button v-hasPerm=&quot;&#x27;add&#x27;&quot; type=&quot;primary&quot; @click=&quot;handleCreate&quot;&gt;添加&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="debug调试"><a href="#debug调试" class="headerlink" title="debug调试"></a>debug调试</h2><h3 id="方式一：debugger"><a href="#方式一：debugger" class="headerlink" title="方式一：debugger"></a>方式一：<code>debugger</code></h3><ol><li>代码中添加<code>debugger</code></li><li>浏览器<code>F12</code> 即可进入调试</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">refreshTableData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">debugger</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">baseTable</span>.<span class="title function_">refresh</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：vscode"><a href="#方式二：vscode" class="headerlink" title="方式二：vscode"></a>方式二：vscode</h3><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240305180250.png"></p><p><code>launch.json</code></p><blockquote><p>有个这个文件后，可直接在vscode中F5打开当前服务</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pwa-chrome&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Chrome against localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:5173&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;webRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="方式三：谷歌插件Vue-js-devtools"><a href="#方式三：谷歌插件Vue-js-devtools" class="headerlink" title="方式三：谷歌插件Vue.js devtools"></a>方式三：谷歌插件<code>Vue.js devtools</code></h3><blockquote><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg">https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240305180319.png"></p><h3 id="方式四：浏览器F12-源代码中直接debug"><a href="#方式四：浏览器F12-源代码中直接debug" class="headerlink" title="方式四：浏览器F12 -&gt; 源代码中直接debug"></a>方式四：浏览器F12 -&gt; 源代码中直接debug</h3><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20240305180413.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="https://dont-sleep-so-late.github.io/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://dont-sleep-so-late.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3学习</title>
    <link href="https://dont-sleep-so-late.github.io/2024/01/28/Vue/Vue3%E5%AD%A6%E4%B9%A0(%E6%96%B0)/"/>
    <id>https://dont-sleep-so-late.github.io/2024/01/28/Vue/Vue3%E5%AD%A6%E4%B9%A0(%E6%96%B0)/</id>
    <published>2024-01-28T15:31:36.000Z</published>
    <updated>2024-01-28T15:57:57.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs&#x2F;core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /></li></ul><h2 id="1-1-【性能的提升】"><a href="#1-1-【性能的提升】" class="headerlink" title="1.1. 【性能的提升】"></a>1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】"><a href="#1-2-【-源码的升级】" class="headerlink" title="1.2.【 源码的升级】"></a>1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】"><a href="#1-3-【拥抱TypeScript】" class="headerlink" title="1.3. 【拥抱TypeScript】"></a>1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】"><a href="#1-4-【新的特性】" class="headerlink" title="1.4. 【新的特性】"></a>1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】"><a href="#2-1-【基于-vue-cli-创建】" class="headerlink" title="2.1. 【基于 vue-cli 创建】"></a>2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue <span class="literal">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli </span></span><br><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行创建命令</span></span><br><span class="line">vue create vue_test</span><br><span class="line"></span><br><span class="line"><span class="comment">##  随后选择3.x</span></span><br><span class="line"><span class="comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span></span><br><span class="line"><span class="comment">##  &gt; 3.x</span></span><br><span class="line"><span class="comment">##    2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐"><a href="#2-2-【基于-vite-创建】-推荐" class="headerlink" title="2.2. 【基于 vite 创建】(推荐)"></a>2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" /><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">√ Project name: vue3_test</span><br><span class="line"><span class="comment">## 是否添加TypeScript支持</span></span><br><span class="line">√ Add TypeScript?  Yes</span><br><span class="line"><span class="comment">## 是否添加JSX支持</span></span><br><span class="line">√ Add JSX Support?  No</span><br><span class="line"><span class="comment">## 是否添加路由环境</span></span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development?  No</span><br><span class="line"><span class="comment">## 是否添加pinia环境</span></span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management?  No</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing?  No</span><br><span class="line"><span class="comment">## 是否添加端到端测试方案</span></span><br><span class="line">√ Add an <span class="keyword">End</span><span class="literal">-to-End</span> Testing Solution? » No</span><br><span class="line"><span class="comment">## 是否添加ESLint语法检查</span></span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality?  Yes</span><br><span class="line"><span class="comment">## 是否添加Prettiert代码格式化</span></span><br><span class="line">√ Add Prettier <span class="keyword">for</span> code formatting?  No</span><br></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27; //组件名</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .app &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li></ul><h2 id="2-3-【一个简单的效果】"><a href="#2-3-【一个简单的效果】" class="headerlink" title="2.3. 【一个简单的效果】"></a>2.3. 【一个简单的效果】</h2><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18,</span><br><span class="line">        tel:&#x27;13888888888&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeName()&#123;</span><br><span class="line">        this.name = &#x27;zhang-san&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      changeAge()&#123;</span><br><span class="line">        this.age += 1</span><br><span class="line">      &#125;,</span><br><span class="line">      showTel()&#123;</span><br><span class="line">        alert(this.tel)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】"><a href="#3-1-【OptionsAPI-与-CompositionAPI】" class="headerlink" title="3.1.  【OptionsAPI 与 CompositionAPI】"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li></ul><h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】"><a href="#3-2-【拉开序幕的-setup】" class="headerlink" title="3.2. 【拉开序幕的 setup】"></a>3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong>_<strong>”</strong>_，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class="line">      let name = &#x27;张三&#x27;</span><br><span class="line">      let age = 18</span><br><span class="line">      let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">      // 方法，原来写在methods中</span><br><span class="line">      function changeName()&#123;</span><br><span class="line">        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class="line">        console.log(name)</span><br><span class="line">      &#125;</span><br><span class="line">      function changeAge()&#123;</span><br><span class="line">        age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">        console.log(age)</span><br><span class="line">      &#125;</span><br><span class="line">      function showTel()&#123;</span><br><span class="line">        alert(tel)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class="line">      return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3><ul><li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用<strong>（重点关注）。</strong></li><li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3><ul><li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li><li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</li><li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li></ul><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  console.log(this) //undefined</span><br><span class="line">  </span><br><span class="line">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class="line">  let name = &#x27;张三&#x27;</span><br><span class="line">  let age = 18</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changName()&#123;</span><br><span class="line">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function changAge()&#123;</span><br><span class="line">    console.log(age)</span><br><span class="line">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li><li>第二步：<code>vite.config.ts</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="title class_">VueSetupExtend</span>() ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li></ol><h2 id="3-3-【ref-创建：基本类型的响应式数据】"><a href="#3-3-【ref-创建：基本类型的响应式数据】" class="headerlink" title="3.3. 【ref 创建：基本类型的响应式数据】"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2><ul><li><strong>作用：</strong>定义响应式变量。</li><li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li><li><strong>返回值：</strong>一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li><li><strong>注意点：</strong><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  // tel就是一个普通的字符串，不是响应式的</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    name.value = &#x27;李四&#x27;</span><br><span class="line">    console.log(name.value)</span><br><span class="line"></span><br><span class="line">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class="line">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    age.value += 1 </span><br><span class="line">    console.log(age.value)</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-【reactive-创建：对象类型的响应式数据】"><a href="#3-4-【reactive-创建：对象类型的响应式数据】" class="headerlink" title="3.4. 【reactive 创建：对象类型的响应式数据】"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2><ul><li><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li><li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li><li><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</li><li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = reactive([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = reactive(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-【ref-创建：对象类型的响应式数据】"><a href="#3-5-【ref-创建：对象类型的响应式数据】" class="headerlink" title="3.5. 【ref 创建：对象类型的响应式数据】"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2><ul><li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li><li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = ref([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = ref(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(car)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.value.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.value.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-【ref-对比-reactive】"><a href="#3-6-【ref-对比-reactive】" class="headerlink" title="3.6. 【ref 对比 reactive】"></a>3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：</li></ul><blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote><h2 id="3-7-【toRefs-与-toRef】"><a href="#3-7-【toRefs-与-toRef】" class="headerlink" title="3.7. 【toRefs 与 toRef】"></a>3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力</span><br><span class="line">  let &#123;name,gender&#125; =  toRefs(person)</span><br><span class="line"></span><br><span class="line">  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力</span><br><span class="line">  let age = toRef(person,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    name.value += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    age.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeGender()&#123;</span><br><span class="line">    gender.value = &#x27;女&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-8-【computed】"><a href="#3-8-【computed】" class="headerlink" title="3.8. 【computed】"></a>3.8. 【computed】</h2><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;ref,computed&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let firstName = ref(&#x27;zhang&#x27;)</span><br><span class="line">  let lastName = ref(&#x27;san&#x27;)</span><br><span class="line"></span><br><span class="line">  // 计算属性——只读取，不修改</span><br><span class="line">  /* let fullName = computed(()=&gt;&#123;</span><br><span class="line">    return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 计算属性——既读取又修改</span><br><span class="line">  let fullName = computed(&#123;</span><br><span class="line">    // 读取</span><br><span class="line">    get()&#123;</span><br><span class="line">      return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改</span><br><span class="line">    set(val)&#123;</span><br><span class="line">      console.log(&#x27;有人修改了fullName&#x27;,val)</span><br><span class="line">      firstName.value = val.split(&#x27;-&#x27;)[0]</span><br><span class="line">      lastName.value = val.split(&#x27;-&#x27;)[1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function changeFullName()&#123;</span><br><span class="line">    fullName.value = &#x27;li-si&#x27;</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-9-【watch】"><a href="#3-9-【watch】" class="headerlink" title="3.9.【watch】"></a>3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li></ul><blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class="line">  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class="line">    if(newValue &gt;= 10)&#123;</span><br><span class="line">      stopWatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = ref(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.value.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.value.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /* </span><br><span class="line">    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视</span><br><span class="line">    watch的第一个参数是：被监视的数据</span><br><span class="line">    watch的第二个参数是：监视的回调</span><br><span class="line">    watch的第三个参数是：配置对象（deep、immediate等等.....） </span><br><span class="line">  */</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  let obj = reactive(&#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">      b:&#123;</span><br><span class="line">        c:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  function test()&#123;</span><br><span class="line">    obj.a.b.c = 888</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">  watch(obj,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式</span><br><span class="line">  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数</span><br><span class="line">  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况五：监视上述的多个数据</span><br><span class="line">  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】"><a href="#3-10-【watchEffect】" class="headerlink" title="3.10. 【watchEffect】"></a>3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;</span><br><span class="line">    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let temp = ref(0)</span><br><span class="line">  let height = ref(0)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changePrice()&#123;</span><br><span class="line">    temp.value += 10</span><br><span class="line">  &#125;</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    height.value += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 用watch实现，需要明确的指出要监视：temp、height</span><br><span class="line">  watch([temp,height],(value)=&gt;&#123;</span><br><span class="line">    // 从value中获取最新的temp值、height值</span><br><span class="line">    const [newTemp,newHeight] = value</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 用watchEffect实现，不用</span><br><span class="line">  const stopWtach = watchEffect(()=&gt;&#123;</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;</span><br><span class="line">      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 水温达到100，或水位达到50，取消监视</span><br><span class="line">    if(temp.value === 100 || height.value === 50)&#123;</span><br><span class="line">      console.log(&#x27;清理了&#x27;)</span><br><span class="line">      stopWtach()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】"><a href="#3-11-【标签的-ref-属性】" class="headerlink" title="3.11. 【标签的 ref 属性】"></a>3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;</span><br><span class="line">    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let title1 = ref()</span><br><span class="line">  let title2 = ref()</span><br><span class="line">  let title3 = ref()</span><br><span class="line"></span><br><span class="line">  function showLog()&#123;</span><br><span class="line">    // 通过id获取元素</span><br><span class="line">    const t1 = document.getElementById(&#x27;title1&#x27;)</span><br><span class="line">    // 打印内容</span><br><span class="line">    console.log((t1 as HTMLElement).innerText)</span><br><span class="line">    console.log((&lt;HTMLElement&gt;t1).innerText)</span><br><span class="line">    console.log(t1?.innerText)</span><br><span class="line">    </span><br><span class="line">/************************************/</span><br><span class="line"></span><br><span class="line">    // 通过ref获取元素</span><br><span class="line">    console.log(title1.value)</span><br><span class="line">    console.log(title2.value)</span><br><span class="line">    console.log(title3.value)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person ref=&quot;ren&quot;/&gt;</span><br><span class="line">  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let ren = ref()</span><br><span class="line"></span><br><span class="line">  function test()&#123;</span><br><span class="line">    console.log(ren.value.name)</span><br><span class="line">    console.log(ren.value.age)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;</span><br><span class="line">// 数据</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  /****************************/</span><br><span class="line">  /****************************/</span><br><span class="line">  // 使用defineExpose将组件中的数据交给外部</span><br><span class="line">  defineExpose(&#123;name,age&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-【props】"><a href="#3-12-【props】" class="headerlink" title="3.12. 【props】"></a>3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口，限制每个Person对象的格式</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">PersonInter</span> &#123;</span><br><span class="line"><span class="attr">id</span>:string,</span><br><span class="line"><span class="attr">name</span>:string,</span><br><span class="line"> <span class="attr">age</span>:number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个自定义类型Persons</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">Persons</span> = <span class="title class_">Array</span>&lt;<span class="title class_">PersonInter</span>&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line"> import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class="line"></span><br><span class="line"> let persons = reactive&lt;Persons&gt;([</span><br><span class="line">  &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">   &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">    &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">  ])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;type PersonInter&#125; from &#x27;@/types&#x27;</span><br><span class="line"></span><br><span class="line">// 第一种写法：仅接收</span><br><span class="line">// const props = defineProps([&#x27;list&#x27;])</span><br><span class="line"></span><br><span class="line">// 第二种写法：接收+限制类型</span><br><span class="line">// defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class="line"></span><br><span class="line">// 第三种写法：接收+限制类型+指定默认值+限制必要性</span><br><span class="line">let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class="line">  list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">console.log(props)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】"><a href="#3-13-【生命周期】" class="headerlink" title="3.13. 【生命周期】"></a>3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue3写法 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123; </span><br><span class="line">    ref, </span><br><span class="line">    onBeforeMount, </span><br><span class="line">    onMounted, </span><br><span class="line">    onBeforeUpdate, </span><br><span class="line">    onUpdated, </span><br><span class="line">    onBeforeUnmount, </span><br><span class="line">    onUnmounted </span><br><span class="line">  &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum() &#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;setup&#x27;)</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】"><a href="#3-14-【自定义hook】" class="headerlink" title="3.14. 【自定义hook】"></a>3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">increment</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;sum,increment,decrement&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios,&#123;<span class="title class_">AxiosError</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> dogList = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDog</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 发请求</span></span><br><span class="line">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)</span><br><span class="line">      <span class="comment">// 维护数据</span></span><br><span class="line">      dogList.<span class="title function_">push</span>(data.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      <span class="keyword">const</span> err = &lt;<span class="title class_">AxiosError</span>&gt;error</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载钩子</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">getDog</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;dogList,getDog&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; </span><br><span class="line">  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123;defineComponent&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import useSum from &#x27;./hooks/useSum&#x27;</span><br><span class="line">  import useDog from &#x27;./hooks/useDog&#x27;</span><br><span class="line"></span><br><span class="line">  let &#123;sum,increment,decrement&#125; = useSum()</span><br><span class="line">  let &#123;dogList,getDog&#125; = useDog()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-【对路由的理解】"><a href="#4-1-【对路由的理解】" class="headerlink" title="4.1. 【对路由的理解】"></a>4.1. 【对路由的理解】</h2><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】"><a href="#4-2-【基本切换效果】" class="headerlink" title="4.2. 【基本切换效果】"></a>4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航区 --&gt;</span><br><span class="line">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】"><a href="#4-3-【两个注意点】" class="headerlink" title="4.3. 【两个注意点】"></a>4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】"><a href="#4-4-【路由器工作模式】" class="headerlink" title="4.4.【路由器工作模式】"></a>4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">//history模式</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(), <span class="comment">//hash模式</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】"><a href="#4-5-【to的两种写法】" class="headerlink" title="4.5. 【to的两种写法】"></a>4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种：to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二种：to的对象写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-6-【命名路由】"><a href="#4-6-【命名路由】" class="headerlink" title="4.6. 【命名路由】"></a>4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】"><a href="#4-7-【嵌套路由】" class="headerlink" title="4.7. 【嵌套路由】"></a>4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 或 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;news&quot;&gt;</span><br><span class="line">    &lt;nav class=&quot;news-list&quot;&gt;</span><br><span class="line">      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123;news.name&#125;&#125;</span><br><span class="line">      &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;div class=&quot;news-detail&quot;&gt;</span><br><span class="line">      &lt;RouterView/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】"><a href="#4-8-【路由传参】" class="headerlink" title="4.8. 【路由传参】"></a>4.8. 【路由传参】</h2><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name:&#x27;xiang&#x27;, //用name跳转</span><br><span class="line">    params:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】"><a href="#4-9-【路由的props配置】" class="headerlink" title="4.9. 【路由的props配置】"></a>4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:&#123;a:1,b:2,c:3&#125;, </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】"><a href="#4-10-【-replace属性】" class="headerlink" title="4.10. 【 replace属性】"></a>4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】"><a href="#4-11-【编程式导航】" class="headerlink" title="4.11. 【编程式导航】"></a>4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">parmas</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">push</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">replace</span>)</span><br></pre></td></tr></table></figure><h2 id="4-12-【重定向】"><a href="#4-12-【重定向】" class="headerlink" title="4.12. 【重定向】"></a>4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/about&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1【准备一个效果】"><a href="#5-1【准备一个效果】" class="headerlink" title="5.1【准备一个效果】"></a>5.1【准备一个效果】</h2><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】"><a href="#5-2【搭建-pinia-环境】" class="headerlink" title="5.2【搭建 pinia 环境】"></a>5.2【搭建 pinia 环境】</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入createPinia，用于创建pinia */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建pinia */</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用插件 */</span>&#123;&#125;</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】"><a href="#5-3【存储-读取数据】" class="headerlink" title="5.3【存储+读取数据】"></a>5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  // 引入对应的useXxxxxStore</span><br><span class="line">  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;</span><br><span class="line">  </span><br><span class="line">  // 调用useXxxxxStore得到对应的store</span><br><span class="line">  const sumStore = useSumStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;</span><br><span class="line">      &#123;&#123; talk.content &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;</span><br><span class="line"></span><br><span class="line">  const talkStore = useTalkStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式"><a href="#5-4-【修改数据】-三种方式" class="headerlink" title="5.4.【修改数据】(三种方式)"></a>5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countStore.<span class="property">sum</span> = <span class="number">666</span></span><br></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">countStore.$patch(&#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">999</span>,</span><br><span class="line">  <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">value:number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sum</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">//操作countStore中的sum</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> += value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">value:number</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sum</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> -= value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用countStore</span></span><br><span class="line"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对应action</span></span><br><span class="line">countStore.<span class="title function_">incrementOdd</span>(n.<span class="property">value</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】"><a href="#5-5-【storeToRefs】" class="headerlink" title="5.5.【storeToRefs】"></a>5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;count&quot;&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;</span><br><span class="line">  /* 引入storeToRefs */</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">/* 得到countStore */</span><br><span class="line">  const countStore = useCountStore()</span><br><span class="line">  /* 使用storeToRefs转换countStore，随后解构 */</span><br><span class="line">  const &#123;sum&#125; = storeToRefs(countStore)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-6-【getters】"><a href="#5-6-【getters】" class="headerlink" title="5.6.【getters】"></a>5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">/************/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">bigSum</span>:(state):<span class="function"><span class="params">number</span> =&gt;</span> state.<span class="property">sum</span> *<span class="number">10</span>,</span><br><span class="line">    <span class="title function_">upperSchool</span>():string&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>. school.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;increment,decrement&#125; = countStore</span><br><span class="line"><span class="keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="title function_">storeToRefs</span>(countStore)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】"><a href="#5-7-【-subscribe】" class="headerlink" title="5.7.【$subscribe】"></a>5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">talkStore.$subscribe(<span class="function">(<span class="params">mutate,state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LoveTalk&#x27;</span>,mutate,state)</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(talkList.<span class="property">value</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】"><a href="#5-8-【store组合式写法】" class="headerlink" title="5.8. 【store组合式写法】"></a>5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// talkList就是state</span></span><br><span class="line">  <span class="keyword">const</span> talkList = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;talkList&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || []</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getATalk函数相当于action</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getATalk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">data</span>:&#123;<span class="attr">content</span>:title&#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),title&#125;</span><br><span class="line">    <span class="comment">// 放到数组中</span></span><br><span class="line">    talkList.<span class="title function_">unshift</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;talkList,getATalk&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】"><a href="#6-1-【props】" class="headerlink" title="6.1. 【props】"></a>6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件，&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// 数据</span><br><span class="line">const car = ref(&#x27;奔驰&#x27;)</span><br><span class="line">const toy = ref()</span><br><span class="line">// 方法</span><br><span class="line">function getToy(value:string)&#123;</span><br><span class="line">toy.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const toy = ref(&#x27;奥特曼&#x27;)</span><br><span class="line"></span><br><span class="line">defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】"><a href="#6-2-【自定义事件】" class="headerlink" title="6.2. 【自定义事件】"></a>6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 &#x3D;&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">send-toy</span>=<span class="string">&quot;toy = $event&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中，触发事件：</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;send-toy&#x27;</span>, 具体数据)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】"><a href="#6-3-【mitt】" class="headerlink" title="6.3. 【mitt】"></a>6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mitt</span><br></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mitt </span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建emitter</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  // 绑定事件</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 触发事件</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;abc&#x27;,666)</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;xyz&#x27;,777)</span></span><br><span class="line"><span class="comment">  &#125;, 1000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 清理事件</span></span><br><span class="line"><span class="comment">    emitter.all.clear()</span></span><br><span class="line"><span class="comment">  &#125;, 3000); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露mitt</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter</span><br></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;send-toy&#x27;</span>,<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send-toy事件被触发&#x27;</span>,value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 解绑事件</span></span><br><span class="line">  emitter.<span class="title function_">off</span>(<span class="string">&#x27;send-toy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendToy</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&#x27;send-toy&#x27;</span>,toy.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】"><a href="#6-4-【v-model】" class="headerlink" title="6.4.【v-model】"></a>6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-model指令 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-model的本质是下面这行代码 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  type=&quot;text&quot; </span><br><span class="line">  :value=&quot;userName&quot; </span><br><span class="line">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件标签上使用v-model指令 --&gt;</span><br><span class="line">&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件标签上v-model的本质 --&gt;</span><br><span class="line">&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span><br><span class="line">&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;modelValue&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:model-value&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 也可以更换value，例如改成abc--&gt;</span><br><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 上面代码的本质如下 --&gt;</span><br><span class="line">&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;abc&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;abc&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:abc&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】"><a href="#6-5-【-attrs-】" class="headerlink" title="6.5.【$attrs 】"></a>6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let a = ref(1)</span><br><span class="line">let b = ref(2)</span><br><span class="line">let c = ref(3)</span><br><span class="line">let d = ref(4)</span><br><span class="line"></span><br><span class="line">function updateA(value)&#123;</span><br><span class="line">a.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import GrandChild from &#x27;./GrandChild.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">&lt;h3&gt;孙组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】"><a href="#6-6-【-refs、-parent】" class="headerlink" title="6.6. 【$refs、$parent】"></a>6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】"><a href="#6-7-【provide、inject】" class="headerlink" title="6.7. 【provide、inject】"></a>6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;</span><br><span class="line">    &lt;Child/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">  import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;</span><br><span class="line">  // 数据</span><br><span class="line">  let money = ref(100)</span><br><span class="line">  let car = reactive(&#123;</span><br><span class="line">    brand:&#x27;奔驰&#x27;,</span><br><span class="line">    price:100</span><br><span class="line">  &#125;)</span><br><span class="line">  // 用于更新money的方法</span><br><span class="line">  function updateMoney(value:number)&#123;</span><br><span class="line">    money.value += value</span><br><span class="line">  &#125;</span><br><span class="line">  // 提供数据</span><br><span class="line">  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)</span><br><span class="line">  provide(&#x27;car&#x27;,car)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是孙组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">  import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">  // 注入数据</span><br><span class="line"> let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)</span><br><span class="line">  let car = inject(&#x27;car&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】"><a href="#6-8-【pinia】" class="headerlink" title="6.8. 【pinia】"></a>6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】"><a href="#6-9-【slot】" class="headerlink" title="6.9. 【slot】"></a>6.9. 【slot】</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><p><img src="http://49.232.112.44/images/default_slot.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;!-- 默认插槽 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;template v-slot:s1&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template #s2&gt;</span><br><span class="line">            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Game v-slot=&quot;params&quot;&gt;</span><br><span class="line">      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/Game&gt;</span><br><span class="line"></span><br><span class="line">子组件中：</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;</span><br><span class="line">          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;</span><br><span class="line">        import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">        let games = reactive([</span><br><span class="line">          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;</span><br><span class="line">        ])</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】"><a href="#7-1-【shallowRef-与-shallowReactive-】" class="headerlink" title="7.1.【shallowRef 与 shallowReactive 】"></a>7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar = <span class="title function_">shallowRef</span>(initialValue);</span><br></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="title function_">shallowReactive</span>(&#123; ... &#125;);</span><br></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】"><a href="#7-2-【readonly-与-shallowReadonly】" class="headerlink" title="7.2.【readonly 与 shallowReadonly】"></a>7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> readOnlyCopy = <span class="title function_">readonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> shallowReadOnlyCopy = <span class="title function_">shallowReadonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】"><a href="#7-3-【toRaw-与-markRaw】" class="headerlink" title="7.3.【toRaw 与 markRaw】"></a>7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问&#x2F;跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* toRaw */</span></span><br><span class="line"><span class="comment">// 响应式对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// 原始对象</span></span><br><span class="line"><span class="keyword">let</span> rawPerson = <span class="title function_">toRaw</span>(person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citysd = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(rawPerson))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys2))</span><br></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citys = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】"><a href="#7-4-【customRef】" class="headerlink" title="7.4.【customRef】"></a>7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">initValue:<span class="built_in">string</span>,delay:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">track</span>() <span class="comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span></span><br><span class="line">        <span class="keyword">return</span> initValue</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          initValue = value</span><br><span class="line">          <span class="title function_">trigger</span>() <span class="comment">//通知Vue数据msg变化了</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">return</span> &#123;msg&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-【Teleport】"><a href="#8-1-【Teleport】" class="headerlink" title="8.1. 【Teleport】"></a>8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&#x27;body&#x27;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是弹窗中的一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-【Suspense】"><a href="#8-2-【Suspense】" class="headerlink" title="8.2. 【Suspense】"></a>8.2. 【Suspense】</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li>异步引入组件</li><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent,<span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">          &lt;template v-slot:default&gt;</span><br><span class="line">            &lt;Child/&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-slot:fallback&gt;</span><br><span class="line">            &lt;h3&gt;加载中.......&lt;/h3&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】"><a href="#8-3-【全局API转移到应用对象】" class="headerlink" title="8.3.【全局API转移到应用对象】"></a>8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】"><a href="#8-4-【其他】" class="headerlink" title="8.4.【其他】"></a>8.4.【其他】</h2><ul><li><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p></li><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>……</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Vue3简介&quot;&gt;&lt;a href=&quot;#1-Vue3简介&quot; class=&quot;headerlink&quot; title=&quot;1. Vue3简介&quot;&gt;&lt;/a&gt;1. Vue3简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2020年9月18日，&lt;code&gt;Vue.js&lt;/code&gt;发布版&lt;c</summary>
      
    
    
    
    <category term="前端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="https://dont-sleep-so-late.github.io/tags/Vue/"/>
    
    <category term="Vue3" scheme="https://dont-sleep-so-late.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>视频素材</title>
    <link href="https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E8%A7%86%E9%A2%91%E7%B4%A0%E6%9D%90/"/>
    <id>https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E8%A7%86%E9%A2%91%E7%B4%A0%E6%9D%90/</id>
    <published>2023-12-15T14:31:36.000Z</published>
    <updated>2023-12-15T14:31:17.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、免费视频"><a href="#1、免费视频" class="headerlink" title="1、免费视频"></a>1、免费视频</h2><table><thead><tr><th align="left">▼ <strong>高清视频</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://pixabay.com/zh/videos/">Pixabay</a></td><td align="left">免登录、CC0版权、无下载限制、支持中文。</td></tr><tr><td align="left">🌐 <a href="https://www.pexels.com/zh-cn/videos/">Pexels</a></td><td align="left">免登录、CC0版权、无下载限制、支持中文。</td></tr><tr><td align="left">🌐 <a href="https://coverr.co/">Coverr</a></td><td align="left">免登录、CC0版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://mixkit.co/free-stock-video/">Mixkit</a></td><td align="left">免登录、CC0版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.vidsplay.com/">Vidsplay</a></td><td align="left">免登录、CC0版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://isorepublic.com/videos/">ISO Republic</a></td><td align="left">免登录、CC0版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.videezy.com/">Videezy</a></td><td align="left">免登录、CC0版权、无下载限制、免费使用需要署名。</td></tr><tr><td align="left">🌐 <a href="https://www.videvo.net/">Videvo</a></td><td align="left">免登录、CC0版权、无下载限制、免费使用需要署名。</td></tr><tr><td align="left">🌐 <a href="https://www.freepik.com/videos">Freepik</a></td><td align="left">免登录、CC0版权、无下载限制、免费使用需要署名。</td></tr><tr><td align="left">▼ <strong>小众视频</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.motionplaces.com/">Motion Places</a></td><td align="left">免登录、CC0 版权、无下载限制、小众视频、多为延时摄影。</td></tr><tr><td align="left">🌐 <a href="https://mazwai.com/">Mazwai</a></td><td align="left">免登录、CC0 版权、无下载限制、小众视频、多为电影风格。</td></tr><tr><td align="left">🌐 <a href="https://dareful.com/">Dareful</a></td><td align="left">免登录、CC0 版权、无下载限制、小众视频、多为自然景色。</td></tr><tr><td align="left">🌐 <a href="https://focastock.com/videos/">FOCA</a></td><td align="left">免登录、CC0 版权、无下载限制、小众视频、多为自然景色。</td></tr><tr><td align="left">🌐 <a href="https://freenaturestock.com/videos/">Nature Stock</a></td><td align="left">免登录、CC0 版权、无下载限制、小众视频、多为自然景色。</td></tr><tr><td align="left">▼ <strong>聚合搜索</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.6huo.com/footages">预告片世界</a></td><td align="left">免登录、CC0版权、无下载限制、聚合搜索引擎。</td></tr><tr><td align="left">🌐 <a href="https://video.librestock.com/">Librestock</a></td><td align="left">免登录、CC0版权、无下载限制、聚合搜索引擎。</td></tr><tr><td align="left">🌐 <a href="https://www.free-video-footage.com/">FVF</a></td><td align="left">免登录、CC0版权、无下载限制、聚合搜索引擎。</td></tr></tbody></table><h2 id="2、视频素材"><a href="#2、视频素材" class="headerlink" title="2、视频素材"></a>2、视频素材</h2><table><thead><tr><th align="left">▼ <strong>视频素材</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://www.aigei.com/">爱给网</a></td><td align="left">国内知名的视频素材网站，下载要铜币，每日免费送 20 铜币。</td></tr><tr><td align="left">🌐 <a href="https://www.heycan.com/home">黑罐头</a></td><td align="left">抖音旗下素材平台，UGC 平台，免费下载。</td></tr><tr><td align="left">🌐 <a href="https://cool.bilibili.com/square/video">素材酷平台</a></td><td align="left">B 站旗下素材平台，UGC 平台，免费下载。</td></tr><tr><td align="left">🌐 <a href="https://sucai.zhiyu.art/">知鱼素材</a></td><td align="left">国内视频素材库，<strong>“共享协议”</strong>的素材可免费商用、免费用户每天 1 次下载。</td></tr><tr><td align="left">🌐 <a href="https://shipin520.com/">潮点视频</a></td><td align="left">国内视频素材库，免费用户每天 1 次下载。</td></tr><tr><td align="left">🌐 <a href="https://al.jybest.ltd/%E8%BD%AF%E4%BB%B6/Windows/4000%E4%B8%AA%E7%BB%BF%E5%B9%95%E8%A7%86%E9%A2%91%E7%B4%A0%E6%9D%9027G">绿幕视频27G</a></td><td align="left">网上找到的 4000个绿幕视频素材 27G，支持预览和下载。</td></tr><tr><td align="left">🌐 <a href="https://cutestockfootage.com/">Cute Footage</a></td><td align="left">免登录、CC0版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.productioncrate.com/">ProductionCrate</a></td><td align="left">要登录、付费网站的免费内容，每日 4 次免费下载。</td></tr><tr><td align="left">🌐 <a href="https://www.monzoom.com/">Monzoom</a></td><td align="left">要登录、CC0版权、免费使用需要署名。</td></tr></tbody></table><h2 id="3、视频后期"><a href="#3、视频后期" class="headerlink" title="3、视频后期"></a>3、视频后期</h2><table><thead><tr><th align="left">▼ <strong>特效模版</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://mixkit.co/free-video-templates/">Mixkit</a></td><td align="left">免登录、CC0版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.lookae.com/">LookAE</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://www.newcger.com/">NewCGer</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://c4dsky.com/">书生影视</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://www.mfcpx.com/">FCPX资源站</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="http://www.cgdream.com.cn/">CG模型网</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://www.cgown.com/">CG资源网</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="http://www.cgahz.com/">CG爱好者网</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://www.cgufo.com/">CGUFO</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://www.aepond.com/">AEPON</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://prmuban.com/">PR模板网</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://www.gfxcamp.com/">GFXCamp</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="http://www.lovelifemrle.com/">爱生活的乐先生</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr><tr><td align="left">🌐 <a href="https://videocopilot.net.cn/">Video-Copilot</a></td><td align="left">免登录、提供网盘下载，商用需谨慎。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、免费视频&quot;&gt;&lt;a href=&quot;#1、免费视频&quot; class=&quot;headerlink&quot; title=&quot;1、免费视频&quot;&gt;&lt;/a&gt;1、免费视频&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;▼ &lt;strong&gt;高清视频&lt;/str</summary>
      
    
    
    
    <category term="网站推荐" scheme="https://dont-sleep-so-late.github.io/categories/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站" scheme="https://dont-sleep-so-late.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="视频" scheme="https://dont-sleep-so-late.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>字体导航</title>
    <link href="https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E5%AD%97%E4%BD%93%E5%AF%BC%E8%88%AA/"/>
    <id>https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E5%AD%97%E4%BD%93%E5%AF%BC%E8%88%AA/</id>
    <published>2023-12-15T14:30:36.000Z</published>
    <updated>2023-12-15T14:29:13.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、中文字体"><a href="#1、中文字体" class="headerlink" title="1、中文字体"></a>1、中文字体</h2><table><thead><tr><th align="left">▼ <strong>免费商用</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://wordshub.github.io/free-font/">字集</a></td><td align="left">免费商用字体库，大概是 2020 年最全的免费可商用字体库。👍</td></tr><tr><td align="left">🌐 <a href="https://www.maoken.com/all-fonts-imgs">猫啃网</a></td><td align="left">免费商用字体库，有 <a href="https://www.maoken.com/all-fonts-imgs">图文版</a>、<a href="https://www.maoken.com/preview">预览版</a>、<a href="https://www.maoken.com/all-fonts">表格版</a> 等多种方法，并提供下载。</td></tr><tr><td align="left">🌐 <a href="https://ziyouziti.com/">自由字体</a></td><td align="left">免费商用字体库，附有字体使用样版，确保是商用免费字体，不会有版权纠纷。</td></tr><tr><td align="left"><a href="https://www.potatofield.cn/fontlibrary">🌐 洋芋田</a></td><td align="left">免费商用字体库，收录了 140+ 字体，确保是商用免费字体，不会有版权纠纷。</td></tr><tr><td align="left">🌐 <a href="https://www.freechinesefont.com/">CN Fonts</a></td><td align="left">免费商用字体库，收录了 180+ 字体，确保是商用免费字体，不会有版权纠纷。</td></tr><tr><td align="left">🌐 <a href="https://www.100font.com/">100font</a></td><td align="left">免费商用字体库，专门收录免费商用字体，通过网盘下载。</td></tr><tr><td align="left">🌐 <a href="https://www.shejidt.com/fonts">SHEJIDT</a></td><td align="left">免费商用字体库，专门收录免费商用字体，通过网盘下载。</td></tr><tr><td align="left">🌐 <a href="https://51font.17font.com/">51Font</a></td><td align="left">免费商用字体库，专门收录免费商用字体，通过网盘下载。</td></tr><tr><td align="left">🌐 <a href="https://pan.baidu.com/share/init?surl=ALdMdP2fX_WEQjTDutZkAw">900免费字体</a></td><td align="left">免费商用字体库，网友整理的免费商用字体集合，通过网盘下载，提取码：52pj</td></tr><tr><td align="left">▼ <strong>字体资讯</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.thetype.com/">The Type</a></td><td align="left">字体资讯网站。</td></tr><tr><td align="left">🌐 <a href="https://www.zhaozi.cn/">找字网</a></td><td align="left">字体资讯网站。</td></tr><tr><td align="left">🌐 <a href="https://www.fontke.com/">字客网</a></td><td align="left">字体资讯网站。</td></tr><tr><td align="left">🌐 <a href="https://izihun.com/">字魂网</a></td><td align="left">字体资讯网站。</td></tr><tr><td align="left">🌐 <a href="http://www.ziticq.com/">字体传奇</a></td><td align="left">字体资讯网站。</td></tr><tr><td align="left">🌐 <a href="https://www.fonts.net.cn/">字体天下</a></td><td align="left">字体资讯网站。</td></tr><tr><td align="left">▼ <strong>英文字体</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.fontspace.com/">FontSpace</a></td><td align="left">在线英文字体库，提供各种各样风格的字体，字体下载旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.1001fonts.com/">1001 Fonts</a></td><td align="left">在线英文字体库，提供各种各样风格的字体，字体下载旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.fontshare.com/">Fontshare</a></td><td align="left">在线英文字体库，提供各种各样风格的字体，字体下载旁边会有版权标注。</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="2、英文字体"><a href="#2、英文字体" class="headerlink" title="2、英文字体"></a>2、英文字体</h2><table><thead><tr><th align="left">▼ <strong>免费商用</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://wordmark.it/">Wordmark</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.fontspace.com/">FontSpace</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.dafont.com/themes.php">Dafont</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left"><a href="https://www.azfonts.net/">🌐 AZfonts</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left"><a href="https://fontesk.com/">🌐 Fontesk</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.fontshare.com/">FontShare</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.1001fonts.com/">1001 Fonts</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.1001freefonts.com/">1001FreeFonts</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">🌐 <a href="https://www.actionfonts.com/">Action Fonts</a></td><td align="left">在线英文字体库，下载按钮旁边会有版权标注。</td></tr><tr><td align="left">▼ <strong>字体资讯</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left"><a href="https://www.typewolf.com/">🌐 TypeWolf</a></td><td align="left">英文字体资讯网站。</td></tr><tr><td align="left">🌐 <a href="https://www.fonts.com/">Fonts.com</a></td><td align="left">英文字体资讯网站，大多数为付费字体。</td></tr><tr><td align="left">🌐 <a href="https://fontdiner.com/">FontDiner</a></td><td align="left">英文字体资讯网站，大多数为复古字体。</td></tr><tr><td align="left"><a href="https://blambot.com/">🌐 Blambot</a></td><td align="left">英文字体资讯网站，大多数为漫画字体。</td></tr></tbody></table><h2 id="3、字体工具"><a href="#3、字体工具" class="headerlink" title="3、字体工具"></a>3、字体工具</h2><table><thead><tr><th align="left">▼ <strong>字体查询</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://fonts.safe.360.cn/">360查字体</a></td><td align="left">字体版权查询，由 360 公司推出。</td></tr><tr><td align="left">🌐 <a href="https://www.likefont.com/">识字体网</a></td><td align="left">中文字体识别，支持中、英、日韩、等文字。</td></tr><tr><td align="left">🌐 <a href="https://fonts.adobe.com/">Adobe Fonts</a></td><td align="left">中文字体识别，Adobe 公司出品。</td></tr><tr><td align="left">🌐 <a href="https://www.myfonts.com/pages/whatthefont">WhatTheFont!</a></td><td align="left">英文字体识别，上付图片识别。</td></tr><tr><td align="left">🌐 <a href="https://www.whatfontis.com/">WhatFontIs</a></td><td align="left">英文字体识别，上付图片识别。</td></tr><tr><td align="left">🌐 <a href="https://www.fontsquirrel.com/matcherator">Identify Fonts</a></td><td align="left">英文字体识别，上付图片识别。</td></tr><tr><td align="left">🌐 <a href="http://www.identifont.com/index.html">IdentiFont</a></td><td align="left">英文字体识别，通过字体描述来识别字体。</td></tr><tr><td align="left">▼ <strong>手写字体</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://shouxie.laoxiezi.com/">老鞋子</a></td><td align="left">手写字体生成器，手写字体在线生成器。</td></tr><tr><td align="left">📥 <a href="https://www.beautifulcarrot.com/">萝卜工坊</a></td><td align="left">手写字体生成器，模拟手写字体软件，一键生成手写文稿。</td></tr><tr><td align="left">📥 <a href="https://www.iamzlt.com/?p=602">手写模拟器</a></td><td align="left">手写字体生成器，模拟手写字体软件，一键生成手写文稿。</td></tr><tr><td align="left">🌐 <a href="https://www.calligrapher.ai/">Calligrapher</a></td><td align="left">手写字体生成器，可以将英文变成手写体，并有动画效果，并提供 SVG 下载。</td></tr><tr><td align="left">🌐 <a href="https://www.an2.net/">田字格字帖</a></td><td align="left">田字格帖生成器，免费的在线田字格字帖生成器，支持笔顺，小学生练字神器。</td></tr><tr><td align="left">▼ <strong>书法字体</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left"><a href="http://www.shufami.com/">🌐 书法迷</a></td><td align="left">书法字体生成器，在线生成器。</td></tr><tr><td align="left">🌐 <a href="https://www.diyiziti.com/">第一字体</a></td><td align="left">书法字体生成器，在线生成器。</td></tr><tr><td align="left"><a href="http://g.shufaziti.com/">🌐 光明书法</a></td><td align="left">书法字体生成器，横幅集字工具。</td></tr><tr><td align="left"><a href="http://shufa.4a40.com/">🌐 书法集字</a></td><td align="left">书法字体生成器，书法字典在线查询。</td></tr><tr><td align="left"><a href="http://www.395.net.cn/">🌐 395工具</a></td><td align="left">书法字体生成器，有各式各样的在线工具。</td></tr><tr><td align="left">🌐 <a href="https://www.moage.cn/shufa">古风家书</a></td><td align="left">书法字体生成器，古风家书生成器。</td></tr><tr><td align="left">▼ <strong>印章字体</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.gaitubao.com/yinzhang">改图宝</a></td><td align="left">电子印章生成器，免费且专业。</td></tr><tr><td align="left">🌐 <a href="https://www.mofans.net/yinzhang/">墨芳印章</a></td><td align="left">电子印章生成器，免费且专业。</td></tr><tr><td align="left">🌐 <a href="http://redmi.work/">395印章</a></td><td align="left">电子印章生成器，免费且专业。</td></tr><tr><td align="left">▼ <strong>系统字体</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">📥 <a href="https://fontforge.org/en-US/">FontForge</a></td><td align="left">字体编辑器，用来创建新的字体，支持中文，且免费开源。</td></tr><tr><td align="left">📥 <a href="https://www.mactype.net/">MacType</a></td><td align="left">字体渲染工具，可以使系统文字显示更加清晰、更有立体感。</td></tr></tbody></table><h2 id="4、字体特效"><a href="#4、字体特效" class="headerlink" title="4、字体特效"></a>4、字体特效</h2><table><thead><tr><th align="left">▼ <strong>在线工具</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://www.logosc.cn/text/">标小智</a></td><td align="left">生成特效字体，一键生成各种特效的字体，并提供下载。</td></tr><tr><td align="left">🌐 <a href="https://vaufonts.com/">VAU Fonts</a></td><td align="left">生成特效字体，一键生成各种特效的字体，在“<strong>Preset</strong>”里可以切换效果。</td></tr><tr><td align="left">🌐 <a href="https://andyh0913.github.io/FrenchFries-Font-Converter/">麦当劳字体</a></td><td align="left">生成特效字体，生成麦当劳薯条字体，并提供下载。</td></tr><tr><td align="left">🌐 <a href="https://textanim.com/">TEXTANIM</a></td><td align="left">生成动效字体，生成 GIF 动效字体，效果相对比较复古。</td></tr><tr><td align="left">🌐 <a href="https://llamafont.com/">Llama Font</a></td><td align="left">生成特效字体，生成草泥马（羊驼）字体。</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">▼ <strong>本地工具</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">📥 <a href="https://aaa-logo.com/">AAA Logo</a></td><td align="left">免费，1000+ 现成 Logo 模版一键生成，只支持 Windows。<a href="https://www.aaa-logo.com/download.php">🪟</a></td></tr><tr><td align="left">📥 <a href="https://apps.apple.com/cn/app/art-text-4-text-effects-app/id1499327230?mt=12">Art Text 4</a></td><td align="left">专业图形设计工具，可以一键生成惊艳的文本和图形，只支持 Mac。<a href="https://two.onefileserver.top/macxz/10293/art_text_4_4.3.0.dmg">🍎</a></td></tr></tbody></table><h2 id="5、字体版权"><a href="#5、字体版权" class="headerlink" title="5、字体版权"></a>5、字体版权</h2><p>无论你是做什么工作的，字体版权，你一定要搞清楚。因为，<strong>他们是真的告！</strong></p><p>那我们要如何避免字体侵权呢？</p><p>我们可以用排除法。</p><p><strong>1、系统自带的“微软雅黑”和“苹方黑体”不可商用。</strong></p><p>理论上 Windows 和 Mac 自带的字体，也不是可商用的，只是他们是出自“大公司”，没时间告你罢了。</p><p><strong>2、如果你不打算花钱买字体，凡是国内大公司的字体品牌，都不要用。</strong></p><p>因为国内公怀寄律师函的方法可太简单了，甚至可以在公众号评论区留言，国外公司至少还找个法人代表。</p><p><strong>3、如果你不打算花钱买字体，那些传统字体品牌，一律不要用。</strong></p><p>几乎你能叫得出名字的字体品牌，比如 方正、华康、汉仪、华文、华光、蒙纳、文悦、汉鼎、文鼎 等等。</p><p>这些字体就像高压电线一样的，千万别碰。（也少量字体可免费商用，但不好看）</p><p>如果你安装过这此字体，赶紧从你的电脑上删除，不要给自己埋雷。</p><p>他们是真的告！</p><p><strong>4、只用你确定是可免费商用的字体。</strong></p><p>可免费商用的字体很多，我们没必要下载所有的字体。</p><p>新建一个文件夹，把那些经过确定是可以“<strong>免费商用的字体</strong>”，才放到这个文件夹。</p><p>记得还要保存一张“<strong>字体截图</strong>”，方便识别。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、中文字体&quot;&gt;&lt;a href=&quot;#1、中文字体&quot; class=&quot;headerlink&quot; title=&quot;1、中文字体&quot;&gt;&lt;/a&gt;1、中文字体&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;▼ &lt;strong&gt;免费商用&lt;/str</summary>
      
    
    
    
    <category term="网站推荐" scheme="https://dont-sleep-so-late.github.io/categories/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站" scheme="https://dont-sleep-so-late.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="字体" scheme="https://dont-sleep-so-late.github.io/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>音乐素材</title>
    <link href="https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E9%9F%B3%E4%B9%90%E7%B4%A0%E6%9D%90/"/>
    <id>https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E9%9F%B3%E4%B9%90%E7%B4%A0%E6%9D%90/</id>
    <published>2023-12-15T14:27:36.000Z</published>
    <updated>2023-12-15T14:30:29.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、音效素材"><a href="#1、音效素材" class="headerlink" title="1、音效素材"></a>1、音效素材</h2><table><thead><tr><th align="left">▼ <strong>国内网站</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://www.aigei.com/sound">爱给网</a></td><td align="left"><strong>要登陆</strong>、CC0 版权、支持中文、<strong>下载需付费</strong>。</td></tr><tr><td align="left">🌐 <a href="https://www.tosound.com/">淘声网</a></td><td align="left">免登陆、CC0 版权、支持中文、聚合搜索引擎。</td></tr><tr><td align="left">🌐 <a href="https://www.ear0.com/">耳聆网</a></td><td align="left"><strong>要登陆</strong>、CC0 版权、支持中文。</td></tr><tr><td align="left">🌐 <a href="https://sc.chinaz.com/yinxiao/">站长素材</a></td><td align="left">免登陆、<strong>版权不明，商用需谨慎</strong>。</td></tr><tr><td align="left">▼ <strong>国外网站</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://pixabay.com/sound-effects/">Pixabay</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://mixkit.co/free-sound-effects/">Mixkit</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.findsounds.com/typesChinese.html">FindSounds</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.soundeffectsplus.com/">SoundEffects+</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.soundgator.com/">SoundGator</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://taira-komori.jpn.org/freesoundcn.html">小森平</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.videvo.net/royalty-free-sound-effects/">Videvo</a></td><td align="left">免登陆、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://freesound.org/">Freesound</a></td><td align="left"><strong>要登陆</strong>、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://soundbible.com/">SoundBible</a></td><td align="left">免登陆、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://orangefreesounds.com/">OrangeSounds</a></td><td align="left">免登陆、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://www.soundjay.com/">SoundJay</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://www.pacdv.com/sounds/">PacDV</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://www.partnersinrhyme.com/pir/PIRsfx.shtml">PartnersInRhyme</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://www.mediacollege.com/downloads/sound-effects/">Media College</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr></tbody></table><h2 id="2、音效合集"><a href="#2、音效合集" class="headerlink" title="2、音效合集"></a>2、音效合集</h2><table><thead><tr><th align="left">▼ <strong>音效合集</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://99sounds.org/">99Sounds</a></td><td align="left">免登陆、CC0 版权、提供合集下载，欧洲的音效工作室。</td></tr><tr><td align="left">🌐 <a href="https://gamesounds.xyz/">GameSounds</a></td><td align="left">免登陆、CC0 版权、提供合集下载，可直接下载多个免版权音效资源。</td></tr><tr><td align="left">🌐 <a href="https://www.adobe.com/products/audition/offers/AdobeAuditionDLCSFX.html">Adobe Sound</a></td><td align="left">免登陆、CC0 版权、提供合集下载，Adobe 公司出品。[打包下载]</td></tr><tr><td align="left">🌐 <a href="https://www.blackmagicdesign.com/cn/support/">DaVinci Sound</a></td><td align="left">免登陆、CC0 版权、提供合集下载，DaVinci 公司出品。[打包下载]</td></tr><tr><td align="left">🌐 <a href="https://sound-effects.bbcrewind.co.uk/">BBC Sound</a></td><td align="left">免登陆、<strong>商用需授权</strong>、提供合集下载，BBC 公司出品。[打包下载]</td></tr></tbody></table><h2 id="3、音乐素材"><a href="#3、音乐素材" class="headerlink" title="3、音乐素材"></a>3、音乐素材</h2><table><thead><tr><th align="left">▼ <strong>免费音乐</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://pixabay.com/zh/music/">Pixabay</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://coverr.co/free-stock-music">Coverr</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://mixkit.co/free-stock-music/">Mixkit</a></td><td align="left">免登陆、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://sampld.app/">Sampld</a></td><td align="left"><strong>要登录</strong>、CC0 版权、无下载限制。</td></tr><tr><td align="left">🌐 <a href="https://www.videvo.net/royalty-free-music/">Videvo</a></td><td align="left">免登陆、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://freesound.org/">Freesound</a></td><td align="left"><strong>要登录</strong>、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://ncs.io/music">NCS</a></td><td align="left">免登陆、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://freemusicarchive.org/home">FMA</a></td><td align="left"><strong>要登录</strong>、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://www.bensound.com/free-music-for-videos">BenSound</a></td><td align="left">免登录、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://www.purple-planet.com/">Purple Planet</a></td><td align="left">免登录、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://incompetech.com/music/royalty-free/music.html">incompetech</a></td><td align="left">免登录、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="http://dig.ccmixter.org/">dig.ccMixter</a></td><td align="left"><strong>要登录</strong>、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://www.fiftysounds.com/">FiftySounds</a></td><td align="left">免登录、CC0 版权、无下载限制、免费使用需署名。</td></tr><tr><td align="left">🌐 <a href="https://cctrax.com/">CCTrax</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://freepd.com/">FreePD</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://whatfunk.com/">WhatFunk</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://audionautix.com/">AudionautiX</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://www.partnersinrhyme.com/midi/Classical/index.shtml">PartnersInRhyme</a></td><td align="left"><strong>要登录</strong>、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="https://www.fesliyanstudios.com/">Fesliyan Studios</a></td><td align="left">免登陆、CC0 版权、无下载限制、但无搜索框。</td></tr><tr><td align="left">🌐 <a href="http://dust-sounds.com/">Dust-Sounds</a></td><td align="left">免登陆、CC0 版权、无下载限制、日本网站。</td></tr><tr><td align="left">🌐 <a href="https://amachamusic.chagasi.com/">甘茶の音楽工房</a></td><td align="left">免登陆、CC0 版权、无下载限制、日本网站。</td></tr></tbody></table><h2 id="4、专用音乐"><a href="#4、专用音乐" class="headerlink" title="4、专用音乐"></a>4、专用音乐</h2><table><thead><tr><th align="left">▼ <strong>U2B 音乐</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://www.youtube.com/user/NoCopyrightSounds">NCS</a></td><td align="left">U2B 平台使用免费、需要署名。</td></tr><tr><td align="left">🌐 <a href="https://www.youtube.com/c/FreeMusicAudioLibraryNow/videos">FMAL</a></td><td align="left">U2B 平台使用免费、需要署名。</td></tr><tr><td align="left">🌐 <a href="https://www.youtube.com/@AlrotaMusic/videos">Alrota Music</a></td><td align="left">U2B 平台使用免费、需要署名。</td></tr><tr><td align="left">🌐 <a href="https://www.youtube.com/@MusicCityOfficial2017/videos">Music City</a></td><td align="left">U2B 平台使用免费、需要署名。</td></tr><tr><td align="left">🌐 <a href="https://www.youtube.com/c/audiolibrary-channel/videos">Audio Library</a></td><td align="left">U2B 平台使用免费、需要署名。</td></tr><tr><td align="left">▼ <strong>专用音乐</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://musopen.org/music/">Musopen</a></td><td align="left">古典音乐、要登录、CC0 版权。</td></tr><tr><td align="left">🌐 <a href="https://sonniss.com/gameaudiogdc">GameAudioGDC</a></td><td align="left">游戏音乐、免登陆、CC0 版权。</td></tr><tr><td align="left">🌐 <a href="https://opengameart.org/">OpenGameArt</a></td><td align="left">游戏音乐、要登录、CC0 版权。</td></tr><tr><td align="left">🌐 <a href="https://downloads.khinsider.com/">VGM</a></td><td align="left">游戏音乐、要登录、CC0 版权。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、音效素材&quot;&gt;&lt;a href=&quot;#1、音效素材&quot; class=&quot;headerlink&quot; title=&quot;1、音效素材&quot;&gt;&lt;/a&gt;1、音效素材&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;▼ &lt;strong&gt;国内网站&lt;/str</summary>
      
    
    
    
    <category term="网站推荐" scheme="https://dont-sleep-so-late.github.io/categories/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站" scheme="https://dont-sleep-so-late.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="音乐" scheme="https://dont-sleep-so-late.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>游戏导航</title>
    <link href="https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E6%B8%B8%E6%88%8F%E5%AF%BC%E8%88%AA/"/>
    <id>https://dont-sleep-so-late.github.io/2023/12/15/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/%E6%B8%B8%E6%88%8F%E5%AF%BC%E8%88%AA/</id>
    <published>2023-12-15T14:25:36.000Z</published>
    <updated>2023-12-15T14:26:50.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、小游戏"><a href="#1、小游戏" class="headerlink" title="1、小游戏"></a>1、小游戏</h2><table><thead><tr><th align="left">▼ <strong>打发时间</strong></th><th align="left">—</th><th align="left">—</th><th align="left">—</th></tr></thead><tbody><tr><td align="left"><a href="http://magickeyboard.io/">魔术键盘</a></td><td align="left"><a href="https://eelslap.com/">海带鱼拍脸</a></td><td align="left"><a href="https://tikolu.net/spot-the-difference/menu">指出不一样</a></td><td align="left"><a href="https://vole.wtf/happy-birthday/">各式各样生日歌</a></td></tr><tr><td align="left"><a href="https://humanclock.com/">人类时钟</a></td><td align="left"><a href="https://www.slapkirk.com/play#spockmode">在线扇耳光</a></td><td align="left"><a href="https://qake.se/fw/index.html">在线放烟花</a></td><td align="left"><a href="https://theuselessweb.com/">无聊网站传送门</a></td></tr><tr><td align="left"><a href="https://seoi.net/penint/">画线为雕</a></td><td align="left"><a href="https://webapp.magicposer.com/">魔法人型师</a></td><td align="left"><a href="https://yesno.wtf/">Yes Or No?</a></td><td align="left"><a href="https://weirdorconfusing.com/">亚马逊雷人商品</a></td></tr><tr><td align="left"><a href="https://thisissand.com/">堆沙子游戏</a></td><td align="left"><a href="http://www.koalastothemax.com/">无限二分法</a></td><td align="left"><a href="https://pointerpointer.com/">鼠标指针在哪？</a></td><td align="left"><a href="https://www.twinsornot.com/">真不是双胞胎？</a></td></tr><tr><td align="left">▼ <strong>休闲解压</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="https://ac.yunyoujun.cn/#/">便携小空调</a></td><td align="left"><a href="https://tv.hzfe.org/">童年小电视</a></td><td align="left"><a href="https://driveandlisten.herokuapp.com/">全球自驾游体验</a></td><td align="left"><a href="https://www.pixelthoughts.co/">深呼吸放松 60 秒</a></td></tr><tr><td align="left"><a href="https://fan.elpsy.cn/">清凉小风扇</a></td><td align="left"><a href="http://www.megamonalisa.com/">蒙娜丽莎展馆</a></td><td align="left"><a href="https://9-eyes.com/">有趣谷歌街景图</a></td><td align="left"><a href="https://works.yangerxiao.com/breathe-relaxer/">静心呼吸 感受平静</a></td></tr><tr><td align="left"><a href="https://goldfishies.com/">在线养金鱼</a></td><td align="left"><a href="https://www.petside.com/infinite-cat/">猫的无限循环</a></td><td align="left"><a href="https://homeless-toys.netlify.app/#/">无家可归的玩偶</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://alexanderperrin.com.au/paper/shorttrip/">短暂的旅行</a></td><td align="left"><a href="https://www.window-swap.com/Window">全球窗户共享</a></td><td align="left"><a href="http://www.donothingfor2minutes.com/">2 分钟什么也不干</a></td><td align="left"></td></tr><tr><td align="left">▼ <strong>学会思考</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="https://dccxi.com/trust/">信任的进化</a></td><td align="left"><a href="https://www.arealme.com/cn">各种各样的自我测试</a></td><td align="left"><a href="https://thechoiceisyours.whatisthematrix.com/cn/">选择你相信的现实</a></td><td align="left"><a href="https://neal.fun/life-checklist/">人生清单检查表</a></td></tr><tr><td align="left"><a href="https://ncase.me/crowds/zh-CN.html">群体的智慧与愚蠢</a></td><td align="left"><a href="http://www.20q.net/">20个问题猜你想什么</a></td><td align="left"><a href="https://www.getbadnews.com/#intro">假新闻是怎样炼成的</a></td><td align="left"><a href="https://www.futureme.org/">写给未来的自己 1</a></td></tr><tr><td align="left"><a href="https://cn.puzzle-nonograms.com/">经典逻辑推理游戏</a></td><td align="left"><a href="https://stylishsite.github.io/">贾斯纳的猫</a></td><td align="left"><a href="https://ncase.me/remember/zh.html">如何记忆任何东西</a></td><td align="left"><a href="https://www.hi2future.com/">写给未来的自己 2</a></td></tr><tr><td align="left"><a href="http://www.iqsuperman.net/">IQ 测试题</a></td><td align="left"><a href="https://types.yuzeli.com/survey">心理健康测试</a></td><td align="left"><a href="https://neal.fun/paper/">一张纸折N次的厚度</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.piixemto.com/zh/">心理学测试</a></td><td align="left"><a href="https://z-lyen.github.io/anxiety/">和焦虑一起冒险！</a></td><td align="left"><a href="https://www.did-you-knows.com/">DidYouKnow 冷知识</a></td><td align="left"></td></tr><tr><td align="left">▼ <strong>身体测试</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="http://www.ultrasonic-ringtones.com/">听觉测试</a></td><td align="left"><a href="https://michaelbach.de/ot/index.html">眼睛的幻觉</a></td><td align="left"><a href="https://enchroma.com/pages/color-blindness-test">色盲色弱测试</a></td><td align="left"><a href="http://illusionoftheyear.com/">全球视觉错觉收集</a></td></tr><tr><td align="left"><a href="https://checkboxrace.com/">点击选择框</a></td><td align="left"><a href="http://mp3ornot.com/">音质区别测试</a></td><td align="left"><a href="https://www.qijishow.com/Brand/cool/index.html">带你体验扭曲幻觉</a></td><td align="left"><a href="https://humanbenchmark.com/">记忆力反应力测试</a></td></tr><tr><td align="left">▼ <strong>生活技能</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="https://yong.dgod.net/webim/index.html">在线输入法</a></td><td align="left"><a href="https://api.ihint.me/shuang/">双拼指法练习</a></td><td align="left"><a href="https://qwerty.kaiyi.cool/">英语指法练习 1</a></td><td align="left"><a href="https://vultr.youmu.moe/quiz/">中国行政区划测试</a></td></tr><tr><td align="left"><a href="https://www.type.fun/">轻松学打字</a></td><td align="left"><a href="http://www.chaiwubi.com/bmcx/">五笔编码查询</a></td><td align="left"><a href="https://www.typelit.io/">英语指法练习 2</a></td><td align="left"><a href="https://www.foldnfly.com/#/1-1-1-1-1-1-1-1-2">教你如何拆纸飞机</a></td></tr><tr><td align="left"><a href="https://www.typingclub.com/da-zi">键盘指法练习</a></td><td align="left"><a href="https://werneror.github.io/FingerMemory/">五笔指法练习</a></td><td align="left"><a href="https://www.keybr.com/">英语指法练习 3</a></td><td align="left"><a href="https://www.animatedknots.com/">教你如何绳子打结</a></td></tr></tbody></table><h2 id="2、在线游戏"><a href="#2、在线游戏" class="headerlink" title="2、在线游戏"></a>2、在线游戏</h2><table><thead><tr><th align="left">▼ <strong>游戏网站</strong></th><th align="left">—</th><th align="left">—</th><th align="left">—</th></tr></thead><tbody><tr><td align="left"><a href="https://www.4399.com/">4399</a></td><td align="left"><a href="https://poki.cn/">Poki</a></td><td align="left"><a href="https://neal.fun/">Neal.Fun</a></td><td align="left"><a href="https://www.bestgames.com/">Best Games</a></td></tr><tr><td align="left"><a href="https://www.17173.com/">17173</a></td><td align="left"><a href="https://frvr.com/">FRVR</a></td><td align="left"><a href="https://zh.y8.com/">Y8 Games</a></td><td align="left"><a href="https://www.crazygames.com/">Crazy Games</a></td></tr><tr><td align="left">▼ <strong>在线游戏</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="https://game.hullqin.cn/">线下聚会游戏</a></td><td align="left"><a href="https://flash.zczc.cz/">Flash 保存计划</a></td><td align="left"><a href="https://nes.heheda.top/">红白机游戏盒</a></td><td align="left"><a href="https://likexia.gitee.io/game/index.html#/">Git 游戏</a></td></tr><tr><td align="left"><a href="https://dos.lol/">在线 DOS 游戏</a></td><td align="left"><a href="https://game.haiyong.site/">100个摸鱼小游戏</a></td><td align="left"><a href="https://zaixianwan.app/">老游戏在线玩</a></td><td align="left"><a href="https://g8hh.com.cn/#/">锅巴汉化</a></td></tr><tr><td align="left"><a href="https://www.yikm.net/">小霸王，其乐无穷</a></td><td align="left"><a href="https://famicn.com/index.html">中文家用游戏博物馆</a></td><td align="left"><a href="http://www.gbarom.cn/">掌机迷</a></td><td align="left"></td></tr><tr><td align="left">▼ <strong>动作游戏</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="https://www.4399.com/flash/145201_2.htm">拳皇97</a></td><td align="left"><a href="https://pvz.heheda.top/">植物大战僵尸</a></td><td align="left"><a href="http://oos.moxiecode.com/js_webgl/ping_pong/">3D 乒乓球</a></td><td align="left"><a href="http://www.sinuousgame.com/">鼠标躲避球游戏</a></td></tr><tr><td align="left"><a href="https://krunker.io/?game=SV:umt2g">在线 CS</a></td><td align="left"><a href="https://classic.minecraft.net/?join=XeFyaTfaMDn-1-Px">我的世界</a></td><td align="left"><a href="https://www.linerider.com/">轨道滑行者</a></td><td align="left"><a href="https://www.foddy.net/Athletics.html">QWOP 跑步游戏</a></td></tr><tr><td align="left"><a href="https://bruno-simon.com/">在线开车</a></td><td align="left"><a href="https://fn.heheda.top/">水果忍者</a></td><td align="left"><a href="http://canvasrider.com/">轨道滑行者 2</a></td><td align="left"><a href="https://img.youquhome.com/wp-ziyuan/nanren20.htm">是男人坚持20秒</a></td></tr><tr><td align="left"><a href="https://game.chronodivide.com/">红色警戒 2</a></td><td align="left"><a href="https://squid-game.io/">鱿鱼游戏</a></td><td align="left"><a href="https://tusenpo.github.io/FlappyFrog/">Excited 的小鸟 ▲</a></td><td align="left"><a href="https://edition.cnn.com/interactive/2021/03/cnnix-steership/">苏伊士运河模拟器</a></td></tr><tr><td align="left"><a href="https://playcsol.com/">反恐精英 1.6</a></td><td align="left"><a href="http://www.heyzxz.me/pcol/">斯诺克</a></td><td align="left"><a href="https://www.geo-fs.com/">在线飞行模拟器</a></td><td align="left"></td></tr><tr><td align="left">▼ <strong>棋牌游戏</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><a href="https://playtictactoe.org/">井字棋</a></td><td align="left"><a href="https://huazhechen.gitee.io/cuber/">三阶魔方 1</a></td><td align="left"><a href="https://knots.netlify.app/">环形结拼图</a></td><td align="left"><a href="https://yorg.io/">塔防生存游戏</a></td></tr><tr><td align="left"><a href="https://lichess.org/">国际象棋</a></td><td align="left"><a href="https://iamthecu.be/">三阶魔方 2</a></td><td align="left"><a href="https://kirilllive.github.io/Fifteen_puzzle_maker/">滑动拼图</a></td><td align="left"><a href="https://printablecreative.com/">益智游戏图生成器</a></td></tr><tr><td align="left"><a href="https://lines.frvr.com/">连线游戏</a></td><td align="left"><a href="https://blocks.ovh/">七巧板</a></td><td align="left"><a href="https://slices.ovh/">益智切图</a></td><td align="left"></td></tr><tr><td align="left"><a href="http://farter.cn/tetr.js/">俄罗斯方块 1</a></td><td align="left"><a href="https://ruyihe.com/sxx">疯狂数星星</a></td><td align="left"><a href="https://maze.toys/mazes/mini/">迷宫游戏</a></td><td align="left"></td></tr><tr><td align="left"><a href="https://chvin.github.io/react-tetris/">俄罗斯方块 2</a></td><td align="left"><a href="http://www.jigzone.com/">拼图游戏</a></td><td align="left"><a href="https://www.webhek.com/post/draw-a-stickman/">请画一个小人</a></td><td align="left"></td></tr></tbody></table><h2 id="3、PC-游戏"><a href="#3、PC-游戏" class="headerlink" title="3、PC 游戏"></a>3、PC 游戏</h2><table><thead><tr><th align="left">▼ <strong>门户网站</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">🌐 <a href="https://www.3dmgame.com/">3DM游戏网</a></td><td align="left">游戏门户网站，曾经是国内游戏资源最多的网站。</td></tr><tr><td align="left">🌐 <a href="https://www.gamersky.com/">游民星空</a></td><td align="left">游戏门户网站，大型单机游戏门户网站，提供特色资讯和下载。</td></tr><tr><td align="left">🌐 <a href="https://down.ali213.net/">游侠网</a></td><td align="left">游戏门户网站，单机游戏下载基地。</td></tr><tr><td align="left">🌐 <a href="https://www.vgter.com/">上游世界</a></td><td align="left">游戏门户网站，提供精品 PC、Switch、PS4 等游戏。</td></tr><tr><td align="left">🌐 <a href="https://www.mhhf.com/">灵动游戏</a></td><td align="left">游戏门户网站，提供精品 PC、Switch、PS4 等游戏。</td></tr><tr><td align="left">🌐 <a href="https://www.taptap.cn/">TapTap</a></td><td align="left">游戏门户网站，多为手机游戏。</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">▼ <strong>博客网站</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.zzzzz688.com/">游戏天堂</a></td><td align="left">游戏博客网站，全球游戏下载基地，</td></tr><tr><td align="left">🌐 <a href="https://steamzg.com/">小叽资源</a></td><td align="left">游戏博客网站，可免费下载。</td></tr><tr><td align="left">🌐 <a href="https://www.jiligamefun.com/">叽哩叽哩游戏</a></td><td align="left">游戏博客网站，多为 ACG 游戏.<a href="https://mp.weixin.qq.com/s/vKpSKCMICy0cBp7OACnMPw">验证码</a>。</td></tr><tr><td align="left">🌐 <a href="https://www.xyg688.com/">小妖怪分享</a></td><td align="left">游戏博客网站，兴趣使然的资源搬运博客。</td></tr><tr><td align="left">🌐 <a href="https://kims3.xyz/">kims资源站</a></td><td align="left">游戏博客网站，免费电脑游戏下载站，提供高速下载。</td></tr><tr><td align="left">🌐 <a href="https://www.switch618.com/">Switch618</a></td><td align="left">游戏博客网站，免费，但要登陆。</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">▼ <strong>Stream 游戏</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://store.steampowered.com/">Steam</a></td><td align="left">游戏门户网站，目前最大 PC 游戏平台。</td></tr><tr><td align="left">🌐 <a href="https://steamunlocked.net/">SteamUnlocked</a></td><td align="left">Steam 资源游戏网站，有很多大作破解。</td></tr><tr><td align="left">🌐 <a href="https://www.s-sgames.com/">SGAMES</a></td><td align="left">专注于精品游戏，各类可联机精品资源。</td></tr><tr><td align="left">🌐 <a href="https://gamestarfield.com/">GameStarfield</a></td><td align="left">Steam 资源游戏网站，有很多大作破解。</td></tr><tr><td align="left">🌐 <a href="https://www.curseforge.com/">CurseForge</a></td><td align="left">全球最大的游戏 MOD 模组资源下载站。</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">▼ <strong>游戏网盘</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="http://gbtgame.ysepan.com/">GBT乐赏游戏空间</a></td><td align="left">游戏资源网盘。PC 游戏为主，收藏多为精品游戏。</td></tr><tr><td align="left">🌐 <a href="http://flysheep.ysepan.com/">flysheep 避难所</a></td><td align="left">游戏资源网盘。Steam、epic、VR、单机、Switch 游戏等。<a href="https://www.flysheep6.com/">独立网站</a></td></tr><tr><td align="left">🌐 <a href="http://821730880.ysepan.com/">萌新单机之家</a></td><td align="left">游戏资源网盘。</td></tr><tr><td align="left">🌐 <a href="https://docs.qq.com/document/DT2xBeVJvaHNQUHht">50TB游戏合集</a></td><td align="left">游戏资源网盘。<a href="https://www.lanzouw.com/iYp4j067mbtg">Excel 下载</a>。</td></tr><tr><td align="left">🌐 <a href="https://github.com/michelpereira/awesome-open-source-games">开源游戏合集</a></td><td align="left">开源游戏合集。</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">▼ <strong>游戏磁力</strong></td><td align="left"><strong>简介</strong></td></tr><tr><td align="left">🌐 <a href="https://www.1377x.to/">1377x</a></td><td align="left">游戏种子搜索引擎，综合资源站。</td></tr><tr><td align="left">🌐 <a href="https://bt4gprx.com/">BT4G ▲</a></td><td align="left">游戏种子搜索引擎，综合资源站。</td></tr><tr><td align="left">🌐 <a href="https://torrentgalaxy.to/">TorrentGalaxy</a></td><td align="left">游戏种子搜索引擎，综合资源站。</td></tr><tr><td align="left">🌐 <a href="https://www.limetorrents.lol/">LimeTorrents</a></td><td align="left">游戏种子搜索引擎，综合资源站。</td></tr><tr><td align="left">🌐 <a href="https://rutracker.org/forum/index.php">RuTracker.org</a></td><td align="left">游戏种子搜索引擎，综合资源站。</td></tr><tr><td align="left">🌐 <a href="https://pcgamestorrents.com/">PCGamesTorrent</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://www.gamestorrents.fm/home/">GamesTorrents</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://cpygames.com/">CPY GAMES</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://crotorrents.com/">CroTorrents</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://igg-games.com/">IGGGAMES</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://fitgirl-repacks.site/">FitGirl Repacks</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://repack-games.com/">Repack-Games</a></td><td align="left">游戏种子磁力网站。</td></tr><tr><td align="left">🌐 <a href="https://rutracker.org/forum/index.php">RuTracker</a></td><td align="left">游戏种子磁力网站，俄语。</td></tr><tr><td align="left">🌐 <a href="https://thebyrut.org/">Byrut</a></td><td align="left">游戏种子磁力网站，俄语。</td></tr></tbody></table><h2 id="4、Mac-游戏"><a href="#4、Mac-游戏" class="headerlink" title="4、Mac 游戏"></a>4、Mac 游戏</h2><table><thead><tr><th align="left">▼ <strong>Mac 游戏</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">📥 <a href="https://www.lanzouw.com/i726k0z4j4pi">Mac 游戏集合</a></td><td align="left">某游戏网站流出 300+ 款 Mac 平台热门游戏，提供网盘下载。</td></tr><tr><td align="left">📥 <a href="https://playcover.io/">PlayCover</a></td><td align="left">在 Mac（Arm芯片） 上运行 iOS 应用，比如“<strong>原神</strong>”等游戏。</td></tr><tr><td align="left">📥 <a href="https://getwhisky.app/zh-Hans/">Whisky</a></td><td align="left">在 Mac（Arm芯片） 上运行 Windows 应用，比如“<strong>原神</strong>”等游戏。</td></tr><tr><td align="left">🌐 <a href="https://decrypt.day/">Decrypt Day</a></td><td align="left">IPA 脱壳应用下载，海外网站，速度可能较慢。</td></tr><tr><td align="left">🌐 <a href="https://ipa.store/">iPA Store</a></td><td align="left">IPA 脱壳应用下载，需要注册载，每天 2 个免费下载次数。</td></tr></tbody></table><h2 id="5、游戏工具"><a href="#5、游戏工具" class="headerlink" title="5、游戏工具"></a>5、游戏工具</h2><table><thead><tr><th align="left">▼ <strong>游戏工具</strong></th><th align="left"><strong>简介</strong></th></tr></thead><tbody><tr><td align="left">📜 <a href="https://greasyfork.org/zh-CN/scripts/437233">防沉迷终结者</a></td><td align="left">去除国内 17173、4399 等游戏网站的登录需求。</td></tr><tr><td align="left">📥 <a href="https://browser.360.cn/eex/index.html">360 极速浏览器X</a></td><td align="left">目前还支持 Flash 的浏览器，推荐<a href="https://www.123pan.com/s/7bzA-pQpOd">奶酪版本</a>，而且还有 <a href="https://browser.360.cn/ee/mac/index.html">Mac 版本</a>。</td></tr><tr><td align="left">📥 <a href="https://pcstory.net/">蘑菇游戏下载器</a></td><td align="left">下载器，网吧 36T 游戏全部到你口袋里，点击下载完成后直接开玩。</td></tr><tr><td align="left">📥 <a href="https://steampp.net/">Watt Toolkit</a></td><td align="left">加速器，支持 Win、Mac、Linux 多平台。</td></tr><tr><td align="left">📥 <a href="https://uu.163.com/">UU加速器</a></td><td align="left">加速器，网易出品，免费，不止快，还很稳。</td></tr><tr><td align="left">📥 <a href="https://www.wemod.com/zh">WeMod</a></td><td align="left">修改器，PC 游戏作弊、修改器和 Mod 尽在一款应用中。</td></tr><tr><td align="left">📥 <a href="https://blog.csdn.net/vbcom/article/details/7245186">DirectX Repair</a></td><td align="left">检测并修复系统的 DirectX 状态，玩大型游戏必备。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、小游戏&quot;&gt;&lt;a href=&quot;#1、小游戏&quot; class=&quot;headerlink&quot; title=&quot;1、小游戏&quot;&gt;&lt;/a&gt;1、小游戏&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;▼ &lt;strong&gt;打发时间&lt;/strong&gt;</summary>
      
    
    
    
    <category term="网站推荐" scheme="https://dont-sleep-so-late.github.io/categories/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="网站" scheme="https://dont-sleep-so-late.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
    <category term="游戏" scheme="https://dont-sleep-so-late.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis笔记</title>
    <link href="https://dont-sleep-so-late.github.io/2023/11/13/mybatis/"/>
    <id>https://dont-sleep-so-late.github.io/2023/11/13/mybatis/</id>
    <published>2023-11-13T15:08:34.000Z</published>
    <updated>2023-11-13T15:17:57.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a>一、MyBatis</h2><h3 id="1-MyBatis："><a href="#1-MyBatis：" class="headerlink" title="1.MyBatis："></a>1.MyBatis：</h3><p>MyBatis：是一个半自动映射的框架。这里所谓的“半自动”是相对于Hibernate全表映射而言的，MyBatis需要手动匹配提供POJO、SQL和映射关系，而Hibernate只需提供POJO和映射关系即可。<br>与Hibernate相比，虽然使用MyBatis手动编写SQL要比使用Hibernate的工作量大，但MyBatis可以配置动态SQL并优化SQL，可以通过配置决定SQL的映射规则，它还支持存储过程等。对于一些复杂的和需要优化性能的项目来说，显然使用MyBatis更加合适。</p><p>MyBatis框架是当前主流的Java持久层（数据访问层DAO）框架之一，它与Hibernate一样，也是一种ORM（Object&#x2F;Relation Mapping，即对象关系映射）框架。所谓的ORM就是一种为了解决面向对象与关系型数据库中数据类型不匹配的技术，它通过描述Java对象与数据库表之间的映射关系，自动将Java应用程序中的对象持久化到关系型数据库的表中。</p><h3 id="2-MyBatis核心组件："><a href="#2-MyBatis核心组件：" class="headerlink" title="2.MyBatis核心组件："></a>2.MyBatis核心组件：</h3><p>SqlSessionFactoryBuilder（构造器）: 根据XML配置（推荐方式）或者代码来生成SqlSessionFactory（工厂接口）对象, 创建完成后该对象就不需要了，所以只需要使用一次，后面无需保存。</p><p>SqlSessionFactory：依靠工厂来创建SqlSession（会话）对象；该对象是线程安全的，所以整个应用只需要保存一个。</p><p>SqlSession：类似于一个JDBC的Connection对象。是一个既可以发送SQL去执行并返回结果，也可以获取Mapper的接口。</p><p>SQL Mapper：是MyBatis新设计的组件，是由一个Java接口和XML文件（或注解）构成的，需要给出对应的SQL和映射规则。负责发送SQL去执行，并返回结果。通过namespace.id调用Mapper中定义的SQL。</p><h3 id="3-MyBatis框架的工作执行流程如下："><a href="#3-MyBatis框架的工作执行流程如下：" class="headerlink" title="3. MyBatis框架的工作执行流程如下："></a>3. MyBatis框架的工作执行流程如下：</h3><p>（1）读取MyBatis配置文件mybatis-config.xml。<br>（2）加载映射文件Mapper.xml。<br>（3）构建会话工厂。<br>（4）创建SqlSession对象。<br>（5）使用Executor接口来操作数据库。<br>（6）使用MappedStatement类型的参数对映射信息进行封装。<br>（7）输入参数映射。<br>（8）输出结果映射。</p><h3 id="4-元素"><a href="#4-元素" class="headerlink" title="4. &lt;sql&gt;元素"></a>4. <code>&lt;sql&gt;</code>元素</h3><p><code>&lt;sql&gt;</code>元素的作用就是定义可重用的SQL代码片段。使用时，先通过<code>&lt;sql&gt;</code>元素定义重用的代码片段，然后在需要使用的地方使用<code>&lt;include&gt;</code>元素的refid属性引用了自定义的代码片段。</p><h3 id="5-MyBatis核心对象SqlSessionFactory的获取方式："><a href="#5-MyBatis核心对象SqlSessionFactory的获取方式：" class="headerlink" title="5.MyBatis核心对象SqlSessionFactory的获取方式："></a>5.MyBatis核心对象SqlSessionFactory的获取方式：</h3><p>SqlSessionFactory对象的实例可以通过SqlSessionFactoryBuilder对象来构建，而SqlSessionFactoryBuilder则可以通过XML配置文件或一个预先定义好的Configuration实例构建出SqlSessionFactory的实例，通过XML配置文件构建出的SqlSessionFactory实例，其实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;配置文件位置&quot;</span>);</span><br><span class="line"><span class="comment">// 根据配置文件构建SqlSessionFactory</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure><p><strong>MyBatis使用过程：</strong><br>使用SqlSessionFactoryBuilder创建SqlSessionFactory对象;</p><p>然后通过SqlSessionFactory创建SqlSession对象;</p><p>通过SqlSession对象完成基本操作（执行SQL）。</p><p>关闭SqlSession。</p><h3 id="6-元素"><a href="#6-元素" class="headerlink" title="6. &lt;mapper&gt;元素"></a>6. <code>&lt;mapper&gt;</code>元素</h3><p>在映射文件中，<code>&lt;mapper&gt;</code>元素是映射文件的根元素，其他元素都是它的子元素。这些子元素及其作用如下所示：<br><code>&lt;select&gt;</code>：用于映射查询语句，可自定义参数，返回结果集等。<br><code>&lt;insert&gt;</code>：用于映射插入语句，执行后返回一个整数，代表插入的条数。<br><code>&lt;update&gt;</code>：用于映射更新语句，执行后返回一个整数，代表更新的条数。<br><code>&lt;delete&gt;</code>：用于映射删除语句，执行后返回一个整数，代表删除的条数。<br><code>&lt;sql&gt;</code>：用于定义一部分SQL，然后可被其他语句引用此SQL。<br><code>&lt;cache&gt;</code>：用于给定命名空间的缓存配置。<br><code>&lt;cache-ref&gt;</code>：用于其他命名空间缓存配置的引用。<br><code>&lt;resultMap&gt;</code>：用于描述如何从数据库结果集中来加载对象。</p><p>当数据表中的列和需要返回的对象的属性不完全一致， MyBatis是不会自动赋值的。此时，就可以使用<code>&lt;resultMap&gt;</code>元素进行处理。<code>&lt;resultMap&gt;</code>元素的子元素<code>&lt;id&gt;</code>用于表示哪个列是主键，而<code>&lt;result&gt;</code>元素用于表示POJO和数据表中普通列的映射关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;custResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Customer&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;custId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cust_id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-mybatis中映射文件include标签应用"><a href="#7-mybatis中映射文件include标签应用" class="headerlink" title="7. mybatis中映射文件include标签应用"></a>7. mybatis中映射文件include标签应用</h3><p>MyBaits映射文件中使用<code>&lt;include&gt;</code>元素的 refid 属性可以引用自定义的代码片段，其属性值为自定义代码片段的id。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;custColumns&quot;</span>&gt;</span> </span><br><span class="line">cust_id custId,name,age </span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;sqlCustList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Customer&quot;</span>&gt;</span></span><br><span class="line">select</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;custColumns&quot;</span>/&gt;</span>   </span><br><span class="line">from customer c</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-MyBatis映射文件中元素"><a href="#8-MyBatis映射文件中元素" class="headerlink" title="8. MyBatis映射文件中&lt;mapper&gt;元素"></a>8. MyBatis映射文件中<code>&lt;mapper&gt;</code>元素</h3><p>MyBatis映射文件中<code>&lt;mapper&gt;</code>元素是配置文件的根元素，它包含一个namespace属性，该属性为这个<code>&lt;mapper&gt;</code>指定了唯一的命名空间。在Mybatis映射文件中，每个操作都有一个id属性表示操作的唯一标识。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;customerList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Customer&quot;</span>&gt;</span></span><br><span class="line">         select * from customer</span><br><span class="line">     <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-MyBatis映射文件中元素"><a href="#9-MyBatis映射文件中元素" class="headerlink" title="9. MyBatis映射文件中&lt;insert&gt;元素"></a>9. MyBatis映射文件中<code>&lt;insert&gt;</code>元素</h3><p>MyBatis映射文件中<code>&lt;insert&gt;</code>元素用于映射插入语句，在执行完元素中定义的SQL语句后，与<code>&lt;update&gt;</code>和<code>&lt;delete&gt;</code>元素在执行完之后一样，也会返回一个表示影响记录条数的整数。<code>&lt;insert&gt;</code>元素的属性与<code>&lt;select&gt;</code>元素的属性不同，可以使用keyProperty属性指定哪个是主键字段，使用useGeneratedKeys属性定义主键是否使用数据库内置策略生成，从而实现对于表中自增编号主键列的主键回填和自定义功能。</p><h3 id="10-根据MyBatis的映射文件编写Mapper接口过程中涉及的关键问题如下："><a href="#10-根据MyBatis的映射文件编写Mapper接口过程中涉及的关键问题如下：" class="headerlink" title="10.根据MyBatis的映射文件编写Mapper接口过程中涉及的关键问题如下："></a>10.根据MyBatis的映射文件编写Mapper接口过程中涉及的关键问题如下：</h3><p>通常一个映射文件对应一个Mapper接口，映射文件中的namespace与接口的全限定名一致。</p><p>映射文件中每个操作id对应Mapper接口的一个方法，方法名与映射文件中操作的id相同，参数类型和返回值类型与操作中的parameterType和resultType相同</p><p>SQL调用的时候通过接口调用，而不用再指出操作的id</p><h3 id="11-MyBatis配置XML文件结构如下"><a href="#11-MyBatis配置XML文件结构如下" class="headerlink" title="11.MyBatis配置XML文件结构如下"></a>11.MyBatis配置XML文件结构如下</h3><p>mybatis-config.xml作为MyBatis的全局配置文件，配置了MyBatis的运行环境等信息。<br>MyBatis配置XML文件结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="comment">&lt;!-- 配置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">properties</span>/&gt;</span><span class="comment">&lt;!-- 属性--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">settings</span>/&gt;</span><span class="comment">&lt;!--设置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">typeAliases</span>/&gt;</span><span class="comment">&lt;!-- 类型命名--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">typeHandlers</span>/&gt;</span> <span class="comment">&lt;!--类型处理器--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">objectFactory</span>/&gt;</span>  &lt;!– 对象工厂 --&gt;</span><br><span class="line">     <span class="tag">&lt;<span class="name">plugings</span>/&gt;</span>  <span class="comment">&lt;!--插件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">environments</span>&gt;</span> <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">environment</span>&gt;</span> <span class="comment">&lt;!--环境变量--&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">transactionManager</span>/&gt;</span><span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">dataSource</span>/&gt;</span> <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">databaseIdProvider</span>/&gt;</span><span class="comment">&lt;!--数据库厂商标识--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mappers</span>/&gt;</span> <span class="comment">&lt;!--映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些层次是不能够颠倒顺序的，如果颠倒顺序，MyBatis在解析XML文件的时候就会出现异常。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;entity.Customer&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Customer&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;entity.Course&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Course&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;entity.QuickManual&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;QuickManual&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!-- ?useUnicode=true&amp;amp;characterEncoding=utf8为了支持中文数据的写入 --&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/CustomerMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/CourseMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/QuickManualMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、MyBatis&quot;&gt;&lt;a href=&quot;#一、MyBatis&quot; class=&quot;headerlink&quot; title=&quot;一、MyBatis&quot;&gt;&lt;/a&gt;一、MyBatis&lt;/h2&gt;&lt;h3 id=&quot;1-MyBatis：&quot;&gt;&lt;a href=&quot;#1-MyBatis：&quot; cla</summary>
      
    
    
    
    <category term="后端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Mybatis" scheme="https://dont-sleep-so-late.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="https://dont-sleep-so-late.github.io/2023/11/13/spring/SpringMVC/"/>
    <id>https://dont-sleep-so-late.github.io/2023/11/13/spring/SpringMVC/</id>
    <published>2023-11-13T15:00:34.000Z</published>
    <updated>2023-11-14T13:04:01.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring框架"><a href="#一、Spring框架" class="headerlink" title="一、Spring框架"></a>一、Spring框架</h2><h3 id="1-典型的Web层框架包括："><a href="#1-典型的Web层框架包括：" class="headerlink" title="1.典型的Web层框架包括："></a>1.典型的Web层框架包括：</h3><p>Struts1<br>Web work<br>Struts2<br>Spring MVC</p><p>Spring MVC是Spring提供的一个实现了Web MVC设计模式的轻量级Web框架。采用工厂模式。它与Struts2框架一样，都属于MVC框架，但其使用和性能等方面比Struts2更加优异。SpringMVC项目中必须添加的JAR包包括：4个核心JAR包、commons-logging的JAR以及两个web相关的JAR（spring-web和spring-webmvc的JAR包）。</p><h3 id="2-Spring-MVC的特点。"><a href="#2-Spring-MVC的特点。" class="headerlink" title="2.Spring MVC的特点。"></a>2.Spring MVC的特点。</h3><p>（1） 是Spring框架的一部分，可以方便的利用Spring所提供的其他功能。<br>（2） 灵活性强，易于与其他框架集成。<br>（3） 提供了一个前端控制器DispatcherServlet，使开发人员无需额外开发控制器对象。<br>（4） 可自动绑定用户输入，并能正确的转换数据类型。<br>（5） 内置了常见的校验器，可以校验用户输入。如果校验不能通过，那么就会重定向到输入表单。<br>（6） 支持国际化。可以根据用户区域显示多国语言。</p><h3 id="3-Spring-MVC主要有如下优点："><a href="#3-Spring-MVC主要有如下优点：" class="headerlink" title="3.Spring MVC主要有如下优点："></a>3.Spring MVC主要有如下优点：</h3><p>（1）是Spring框架的一部分，可以方便的利用Spring所提供的其他功能。<br>（2）灵活性强，易于与其他框架集成。<br>（3）提供了一个前端控制器DispatcherServlet，使开发人员无需额外开发控制器对象。<br>（4）可自动绑定用户输入，并能正确的转换数据类型。<br>（5）内置了常见的校验器，可以校验用户输入。如果校验不能通过，那么就会重定向到输入表单。<br>（6）支持国际化。可以根据用户区域显示多国语言。<br>（7）支持多种视图技术。它支持JSP、Velocity和FreeMarker等视图技术。<br>（8）使用基于XML的配置文件，在编辑后，不需要重新编译应用程序。</p><h3 id="4-Spring-MVC框架的工作流程如下："><a href="#4-Spring-MVC框架的工作流程如下：" class="headerlink" title="4.Spring MVC框架的工作流程如下："></a>4.Spring MVC框架的工作流程如下：</h3><p>（1）用户通过浏览器向服务器发送请求，请求会被Spring MVC的前端控制器DispatcherServlet所拦截。<br>（2）DispatcherServlet拦截到请求后，会调用HandlerMapping处理器映射器。<br>（3）处理器映射器根据请求URL找到具体的处理器，生成处理器对象及处理器拦截器（如果有则生成）一并返回给DispatcherServlet 。<br>（4）DispatcherServlet会通过返回信息选择合适的HandlerAdapter（处理器适配器）。<br>（5）HandlerAdapter会调用并执行Handler（处理器），这里的处理器指的就是程序中编写的Controller类，也被称之为后端控制器。<br>（6）Controller执行完成后，会返回一个ModelAndView对象，该对象中会包含视图名或包含模型和视图名。<br>（7）HandlerAdapter将ModelAndView对象返回给DispatcherServlet 。<br>（8）DispatcherServlet会根据ModelAndView对象选择一个合适的ViewReslover（视图解析器）。<br>（9）ViewReslover解析后，会向DispatcherServlet中返回具体的View（视图）。<br>（10）DispatcherServlet对View进行渲染（即将模型数据填充至视图中）。<br>（11）视图渲染结果会返回给客户端浏览器显示。</p><h3 id="5-在web-xml中，配置Spring-MVC的前端控制器DispatcherServlet"><a href="#5-在web-xml中，配置Spring-MVC的前端控制器DispatcherServlet" class="headerlink" title="5.在web.xml中，配置Spring MVC的前端控制器DispatcherServlet"></a>5.在web.xml中，配置Spring MVC的前端控制器DispatcherServlet</h3><p><img src="https://cdn.jsdelivr.net/gh/dont-sleep-so-late/CDN/images/20231113230308.png"></p><p>如果没有通过<init-param>元素配置，应用程序会默认到WEB-INF目录下寻找如下方式命名的配置文件：servletName-servlet.xml。servletName指的是部署在web.xml文件中的DispatcherServlet的名称，而-servlet.xml是配置文件名的固定写法，如在WEB-INF下查找springmvc-servlet.xml文件。</p><h3 id="6-控制器方法的返回值类型"><a href="#6-控制器方法的返回值类型" class="headerlink" title="6.控制器方法的返回值类型"></a>6.控制器方法的返回值类型</h3><p>ModelAndView类型中可以添加Model数据，并指定视图；String类型的返回值可以跳转视图，但不能携带数据；而void类型主要在异步请求时使用，它只返回数据，而不会跳转视图。</p><h3 id="7-Controller注解在使用时可分为如下两步："><a href="#7-Controller注解在使用时可分为如下两步：" class="headerlink" title="7.@Controller注解在使用时可分为如下两步："></a>7.@Controller注解在使用时可分为如下两步：</h3><p>（1）在相应的类上标注@Controller注解。<br>（2）在Spring MVC的配置文件中添加相应的扫描配置信息。首先需要在配置文件中引入context名称空间的配置，然后使用<code>&lt;context:component-scan&gt;</code>元素指定需要扫描的类包。</p><h3 id="8-SpringMVC框架下请求处理方法的参数类型："><a href="#8-SpringMVC框架下请求处理方法的参数类型：" class="headerlink" title="8.SpringMVC框架下请求处理方法的参数类型："></a>8.SpringMVC框架下请求处理方法的参数类型：</h3><p>基于SpringMVC框架下请求处理方法的参数类型主要有：HttpServletRequest、HttpServletResponse、HttpSession、Model、HttpMethod等；<br>基于SpringMVC框架下请求处理方法的返回类型主要有：ModelAndView、Map、String、void、HttpEntity&lt;?&gt;、View等。</p><h3 id="9-SpringMVC中获取输入值的方式主要有："><a href="#9-SpringMVC中获取输入值的方式主要有：" class="headerlink" title="9.SpringMVC中获取输入值的方式主要有："></a>9.SpringMVC中获取输入值的方式主要有：</h3><p>在action的方法中写与请求参数同名的变量</p><p>在action的方法的参数中使用HttpServletRequest、HttpServletResponse、HttpSession、Model、HttpMethod等对象</p><p>在方法的参数中使用@RequestParam注解</p><p>界面上的输入信息是某个自定义对象的信息，在接收的时候直接封装为该自定义对象</p><p>把请求参数放到请求路径中，即采用RESTful风格。</p><h3 id="10-SpringMVC中对用户的响应方式主要有："><a href="#10-SpringMVC中对用户的响应方式主要有：" class="headerlink" title="10.SpringMVC中对用户的响应方式主要有："></a>10.SpringMVC中对用户的响应方式主要有：</h3><p>返回ModelAndView对象，如new ModelAndView(“studentList”,model)，第一个参数表示视图，第二参数表示视图中需要的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/studentUpdateView.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">updateView</span><span class="params">(String id)</span>&#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentService.findById(id);</span><br><span class="line">Map&lt;String,Object&gt; model = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">model.put(<span class="string">&quot;student&quot;</span>,student);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;studentUpdate&quot;</span>,model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层的方法返回值类型为String，在方法中返回表示输出界面的字符串，与ModelAndView中的第一个参数相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;studentAddView.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addView</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;studentAdd&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​使用String表示要返回的视图，使用Model表示要返回的数据。在请求方法的参数中定义Model对象，在请求方法体中把数据存储到Model对象中响应给前端页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/studentList.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">studentList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">List&lt;Student&gt; students = studentService.getStudents();</span><br><span class="line">model.addAttribute(<span class="string">&quot;students&quot;</span>,students);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;studentList&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​返回JSON数据。</p><h3 id="11-RequestParam注解"><a href="#11-RequestParam注解" class="headerlink" title="11.@RequestParam注解"></a>11.@RequestParam注解</h3><p>@RequestParam注解主要用于对请求中的参数进行定义，多用于在请求参数名与方法形参名不一致时的参数间接绑定。在使用时可以指定他的4个属性，具体如下：<br>（1）value：name属性的别名，这里指参数的名字，即入参的请求参数名字，如果只使用vaule属性，则可以省略value属性名。<br>（2）name：用于指定请求头绑定的名称。<br>（3）required ：用于指定参数是否必须，默认是true，表示请求中一定要有相应的参数。<br>（4）defaultValue：默认值，表示如果请求中没有同名参数时的默认值。</p><h3 id="12-在使用包装POJO类型数据绑定时"><a href="#12-在使用包装POJO类型数据绑定时" class="headerlink" title="12.在使用包装POJO类型数据绑定时"></a>12.在使用包装POJO类型数据绑定时</h3><p>在使用包装POJO类型数据绑定时，前端请求的参数名编写必须符合以下两种情况：<br>（1）如果查询条件参数是包装类的直接基本属性，则参数名直接用对应的属性名；<br>（2）如果查询条件参数是包装类中POJO的子属性，则参数名必须为“对象.属性”，其中“对象”要和包装POJO中的对象属性名称一致，“属性”要和包装POJO中的对象子属性一致。</p><h3 id="13-JSON数据交互时，主要使用的两个注解-RequestBody和-ResponseBody"><a href="#13-JSON数据交互时，主要使用的两个注解-RequestBody和-ResponseBody" class="headerlink" title="13.JSON数据交互时，主要使用的两个注解@RequestBody和@ResponseBody"></a>13.JSON数据交互时，主要使用的两个注解@RequestBody和@ResponseBody</h3><p>JSON数据交互时，主要使用了两个注解@RequestBody和@ResponseBody。其中@RequestBody用于将请求体中的数据绑定到方法的形参中，在使用时标准在在方法的形参上。@ResponseBody用于直接返回return对象。Jackson用到的开源包的有 jackson-annoations-2.8.8.jar、 jackson-core-2.8.8.jar、jackson-databind-2.8.8.jar。</p><h3 id="14-JSON对象的数组结构"><a href="#14-JSON对象的数组结构" class="headerlink" title="14.JSON对象的数组结构"></a>14.JSON对象的数组结构</h3><p>JSON对象的数组结构以 “[” 开始，以 “]” 结束，对象结构以 “{” 开始，以 “}”结束，JSON对象数据结构的中间部分由键值对（key：value）以英文 “,” 分隔的值的列表组成。关键字（key）必须为String类型，值（value）可以是String、Number、Object、Array等数据类型。</p><h3 id="15-RESTful"><a href="#15-RESTful" class="headerlink" title="15.RESTful"></a>15.RESTful</h3><p>RESTful也称之为REST，是英文“Representational State Transfer”的简称。RESTful风格在HTTP请求中，使用put、delete、post和get方式分别对应添加、删除、修改和查询的操作。</p><h3 id="16-PathVariable-“id”-注解"><a href="#16-PathVariable-“id”-注解" class="headerlink" title="16.@PathVariable(“id”)注解"></a>16.@PathVariable(“id”)注解</h3><p>@PathVariable(“id”)注解用于接收并绑定请求参数，它可以将URL请求中的变量映射到请求方法的形参上。<br>如果请求路径中的参数名方法形参名称一样，则@PathVariable后面的 “ (“id”) ” 可以省略。</p><h3 id="17-Spring-MVC的文件上传"><a href="#17-Spring-MVC的文件上传" class="headerlink" title="17.Spring MVC的文件上传"></a>17.Spring MVC的文件上传</h3><p>Spring MVC的文件上传是通过MultipartResolver对象实现的。</p><p>文件上传表单需要满足的3个条件如下：<br>（1） form表单的method属性设置为post；<br>（2） form表单的enctype属性设置为multipart&#x2F;form-data；<br>（3） 提供的文件上传输入框。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Spring框架&quot;&gt;&lt;a href=&quot;#一、Spring框架&quot; class=&quot;headerlink&quot; title=&quot;一、Spring框架&quot;&gt;&lt;/a&gt;一、Spring框架&lt;/h2&gt;&lt;h3 id=&quot;1-典型的Web层框架包括：&quot;&gt;&lt;a href=&quot;#1-典型的We</summary>
      
    
    
    
    <category term="后端开发" scheme="https://dont-sleep-so-late.github.io/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Spring" scheme="https://dont-sleep-so-late.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
